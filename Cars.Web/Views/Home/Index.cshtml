@{
    ViewData["Title"] = "AI 派車儀錶板";
    var mapsKey = ViewBag.GoogleMapsKey as string ?? "";
}
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>

    <!-- 你現有樣式：保持共存，不改 class 名稱 -->
    <link href="/css/Home/Index.css" rel="stylesheet" />

    <!-- 外部庫（你前面就有允許）：Chart.js / Vue / Axios / Google Maps -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=@mapsKey&v=quarterly&libraries=marker"></script>
</head>

<body>
    <main id="app" class="wrap" v-cloak>
        <div class="grid-areas">

            <!-- KPI 區 -->
            <section class="kpi-wrap">
                <div class="panel kpi">
                    <div class="label">今日班表數</div>
                    <div class="value">{{ kpi.scheduleTodayCount }}</div>
                    <div class="delta">更新於 {{ nowHHmm }}</div>
                </div>
                <div class="panel kpi">
                    <div class="label">未完成任務</div>
                    <div class="value">{{ kpi.uncompleteCount }}</div>
                    <div class="delta" :style="{color: kpi.uncompleteCount>0?'#dc2626':'#16a34a'}">
                        {{ kpi.uncompleteCount>0?'請盯任務':'全部 on track' }}
                    </div>
                </div>
                <div class="panel kpi">
                    <div class="label">待審核申請</div>
                    <div class="value">{{ kpi.pendingReviewCount }}</div>
                    <div class="delta" :style="{color: kpi.pendingReviewCount>0?'#d97706':'#16a34a'}">
                        {{ kpi.pendingReviewCount>0?'待處理':'已清空' }}
                    </div>
                </div>
                <div class="panel kpi">
                    <div class="label">今日總里程</div>
                    <div class="value">{{ totalKm }} km</div>
                    <div class="delta">目標 ≥ 300 km</div>
                </div>
            </section>

            <!-- 趨勢圖 + 清單 -->
            <section class="panel trend">
                <div class="panel-hd">近七日派車量趨勢</div>
                <div class="panel-bd chart-card">
                    <canvas id="trendChart" height="110"></canvas>
                </div>

                <div class="panel">
                    <div class="panel-hd">今日未完成任務</div>
                    <div class="panel-bd">
                        <table class="flat">
                            <thead>
                                <tr>
                                    <th>駕駛人</th>
                                    <th>時段/地點</th>
                                    <th>狀態</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="u in unfinished" :key="(u.driverName||'-') + '_' + (u.useTime||'-')">
                                    <td>{{ u.driverName || '-' }}</td>
                                    <td class="mono">{{ (u.useTime||'').split('-')[1] || u.useTime }}　{{ (u.route||'').split('-').slice(-1)[0] }}</td>
                                    <td>{{ u.dispatchStatus || '進行中' }}</td>
                                </tr>
                                <tr v-if="unfinished.length===0">
                                    <td colspan="3" style="text-align:center;color:#9ca3af">沒有未完成任務</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="panel">
                    <div class="panel-hd">今日待審核派車申請</div>
                    <div class="panel-bd">
                        <table class="flat">
                            <thead>
                                <tr>
                                    <th>申請人</th>
                                    <th>派車時間</th>
                                    <th>派車地點</th>
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <th style="text-align:center">動作</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="p in pendingFiltered" :key="(p.applicantName||'-') + '_' + (p.useTime||'-')">
                                    <td>{{ p.applicantName }}</td>
                                    <td class="mono">{{ (p.useTime||'').split('-')[1] || p.useTime }}</td>
                                    <td>{{ (p.route||'').split('-').slice(-1)[0] }}</td>
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <td class="actions" style="text-align:center">
                                            <button class="btn btn-yes" @@click="approve(p)">✓</button>
                                            <button class="btn btn-no" @@click="reject(p)">✕</button>
                                        </td>
                                    }
                                </tr>
                                <tr v-if="pending.length===0">
                                    <td colspan="4" style="text-align:center;color:#9ca3af">沒有待審核申請</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>

            <!-- 任務分布 -->
            <section class="panel dist">
                <div class="panel-hd">今日任務分布</div>
                <div class="panel-bd chart-card">
                    <canvas id="distChart" height="110"></canvas>
                </div>
            </section>

            <!-- 地圖牆（3+2） -->
            <section class="panel maps">
                <div class="panel-hd">目前各車輛位置</div>
                <div class="panel-bd">
                    <div class="map-grid">
                        <div v-for="(card, idx) in driverCards.slice(0,3)" :key="'m1_'+idx" class="map-cell">
                            <div class="gmap" :id="'gmap_'+idx" :class="{ 'dimmed': card.statusType !== 'on' }"></div>
                            <div class="badge-row">
                                <div class="badge-dark">{{ card.plateWithDriver }}</div>
                                <div class="badge-pill"
                                     :class="{'badge-on': card.statusType==='on','badge-idle': card.statusType==='idle','badge-break': card.statusType==='break'}">
                                    {{ card.statusText }}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="map-grid-row2">
                        <div v-for="(card, i) in driverCards.slice(3,5)" :key="'m2_'+i" class="map-cell">
                            <div class="gmap" :id="'gmap_'+(i+3)" :class="{ 'dimmed': card.statusType !== 'on' }"></div>
                            <div class="badge-row">
                                <div class="badge-dark">{{ card.plateWithDriver }}</div>
                                <div class="badge-pill"
                                     :class="{'badge-on': card.statusType==='on','badge-idle': card.statusType==='idle','badge-break': card.statusType==='break'}">
                                    {{ card.statusText }}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

        </div>

        <!-- 右下角：控制塔（即時告警 + AI 建議派車） -->
        <div class="floating-alerts" id="alerts" v-cloak>
            <div class="hd">
                <span>控制塔</span>
                <span class="pill" :class="health.ok ? 'pill-green' : 'pill-red'">
                    {{ health.ok ? '連線正常' : '連線異常' }}
                </span>
            </div>
            <div class="bd">
                <div class="alert-row">
                    <span>逾時任務</span>
                    <span class="count" :style="{color: overdueCount>0?'#dc2626':'#16a34a'}">{{ overdueCount }}</span>
                </div>
                <div class="alert-row">
                    <span>待派車卡住</span>
                    <span class="count" :style="{color: stuckCount>0?'#b45309':'#16a34a'}">{{ stuckCount }}</span>
                </div>

                <div class="alert-list" v-if="overdueList.length">
                    <div class="alert-item" v-for="o in overdueList" :key="o.id">
                        <strong>{{ o.driverName || '未指派' }}</strong>
                        <span class="pill pill-red">逾時</span>
                        <span class="mono">{{ o.useTimeTail }}</span>
                        <span>｜{{ o.destTail }}</span>
                    </div>
                </div>
                <div v-else style="font-size:12px;color:#6b7280;margin-top:6px;">
                    今天沒有逾時任務，保持這種罕見的秩序感。
                </div>

                <div class="alert-actions" style="margin-top:8px">
                    <button class="btn" @@click="refreshAlerts">重新檢查</button>
                    <button class="btn" style="margin-left:8px" @@click="openSuggest">AI 建議派車</button>
                </div>
            </div>
        </div>

        <!-- AI 建議派車 Dialog -->
        <dialog id="aiSuggestDlg">
            <div style="background:#fff;border-radius:8px;padding:10px;width:92%;max-width:820px">
                <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
                    <h3 style="margin:0">AI 建議派車</h3>
                    <button class="btn" @@click="closeSuggest">關閉</button>
                </div>

                <div v-if="suggesting" class="mono" style="opacity:.8">生成建議中，等等你的雲端朋友回話...</div>
                <div v-if="suggestErr" style="color:#b91c1c">{{ suggestErr }}</div>

                <table v-if="suggestList.length" class="flat" style="margin-top:8px">
                    <thead>
                        <tr>
                            <th>申請單</th>
                            <th>車輛</th>
                            <th>司機</th>
                            <th>目的地</th>
                            <th>信心</th>
                            <th>動作</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="s in suggestList" :key="s.suggestionId">
                            <td class="mono">#{{ s.applyId }}</td>
                            <td>{{ s.plateNo }}</td>
                            <td>{{ s.driverName }}</td>
                            <td>{{ s.destination }}</td>
                            <td>{{ (s.confidence * 100).toFixed(0) }}%</td>
                            <td>
                                <button class="btn btn-yes" @@click="applySuggestion(s)">套用</button>
                                <button class="btn" @@click="skipSuggestion(s)">略過</button>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <div v-if="!suggesting && !suggestList.length && !suggestErr" style="font-size:13px;color:#6b7280;margin-top:6px">
                    沒有建議。要嘛資料太完美，要嘛服務很懶。
                </div>
            </div>
        </dialog>
    </main>

    <script>
        const { createApp, ref, computed, onMounted, nextTick } = Vue;

        createApp({
          setup(){
            // ===== KPI =====
            const kpi = ref({ scheduleTodayCount:0, uncompleteCount:0, pendingReviewCount:0 });
            const totalKm = ref(0);
            const nowHHmm = computed(()=> new Date().toLocaleTimeString('zh-TW',{hour:'2-digit',minute:'2-digit'}));

            // ===== Lists =====
            const unfinished = ref([]);
            const pending = ref([]);
            const pendingFiltered = computed(()=>{
              const isDoneOrRejected = s => {
                const k = String(s || "").trim().toLowerCase();
                return k === "完成審核" || k === "駁回" || k === "approved" || k === "rejected";
              };
              return (pending.value || []).filter(x => !isDoneOrRejected(x.status));
            });

            // ===== Charts =====
            let trendChart, distChart;

            // ===== Maps (5 mini maps) =====
            const driverCards = ref([]);
            const miniMapCache = new Map();

            // ===== Alerts =====
            const health = ref({ ok: true });
            const overdueList = ref([]);
            const overdueCount = computed(()=> overdueList.value.length);
            const stuckCount = ref(0);

            // ===== AI Suggest =====
            const suggesting = ref(false);
            const suggestErr = ref('');
            const suggestList = ref([]);

            // ===== SVG =====
            const carSVG = (color)=>`
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="28" height="28">
                <rect x="96" y="200" width="320" height="90" rx="22" ry="22" fill="${color}" />
                <rect x="136" y="160" width="240" height="50" rx="10" ry="10" fill="${color}" />
                <circle cx="186" cy="310" r="22" fill="#1f2937"/><circle cx="326" cy="310" r="22" fill="#1f2937"/>
              </svg>`;

            // ===== API =====
            async function loadCards(){
              const { data } = await axios.get('/api/dashboard/cards');
              const r = data.data || data;
              kpi.value = {
                scheduleTodayCount: r.scheduleTodayCount || 0,
                uncompleteCount: r.uncompleteCount || 0,
                pendingReviewCount: r.pendingReviewCount || 0
              };
              totalKm.value = r.totalKm ?? 0;
            }
            async function loadUnfinished(){
              const { data } = await axios.get('/api/dashboard/dispatch/uncomplete');
              unfinished.value = data.data || data || [];
            }
            async function loadPending(){
              const { data } = await axios.get('/api/dashboard/applications/pending');
              // 正規化 status 欄位
              pending.value = (data.data || data || []).map(x=>{
                const rawStatus = (x.status ?? x.Status ?? x.dispatchStatus ?? x.DispatchStatus ?? "").toString().trim();
                return { ...x, status: rawStatus };
              });
            }

            // ===== Driver status -> mini cards（去重、擇優、五輛封頂、只在執勤中顯示司機名） =====
            async function loadDriverStatus(){
              const { data } = await axios.get('/api/dashboard/drivers/today-status');
              const list = (data.data || data) || [];

              const score = s => s === '執勤中' ? 3 : (s === '休息中' ? 2 : 1);
              const best = new Map(); // key: vehicleId 或 plateNo

              for (const x of list) {
                const key = Number(x.vehicleId) || (x.plateNo || '').trim();
                if (!key) continue;
                const prev = best.get(key);
                if (!prev) { best.set(key, x); continue; }

                const prevScore = score(prev.stateText || '');
                const curScore  = score(x.stateText || '');
                const prevTime  = new Date(prev.updatedAt || prev.updateTime || 0).getTime();
                const curTime   = new Date(x.updatedAt || x.updateTime || 0).getTime();

                if (curScore > prevScore || (curScore === prevScore && curTime >= prevTime)) {
                  best.set(key, x);
                }
              }

              const norm = Array.from(best.values()).slice(0,5).map(x=>{
                let statusType = 'idle';
                if (x.stateText === '執勤中') statusType = 'on';
                else if (x.stateText === '休息中') statusType = 'break';

                const plate = x.plateNo || '—';
                const hasDriver = (x.driverName || '').trim();
                const plateWithDriver = statusType === 'on' && hasDriver ? `${plate} ${x.driverName}` : plate;

                return {
                  key: 'drv_'+(x.vehicleId || x.driverId || plate),
                  vehicleId: x.vehicleId || x.driverId || plate,
                  plateWithDriver,
                  statusText: x.stateText,
                  statusType
                };
              });

              driverCards.value = norm;
              await nextTick();
              renderMaps();
            }

            // ===== 圖表 =====
            function renderTrend(seed){
              const ctx = document.getElementById('trendChart');
              if(trendChart) trendChart.destroy();
              const base = [6,8,7,9,10,11,12];
              base[6] = Math.max(seed, 0);
              trendChart = new Chart(ctx, {
                type:'line',
                data:{ labels:['週一','週二','週三','週四','週五','週六','週日'], datasets:[{ label:'派車量', data:base, fill:true, tension:.35 }]},
                options:{ plugins:{ legend:{display:false} }, scales:{ y:{ beginAtZero:true, ticks:{ precision:0 }}}}
              });
            }
            function renderDist(groups){
              const ctx = document.getElementById('distChart');
              if(distChart) distChart.destroy();
              const labels = Object.keys(groups);
              const data = Object.values(groups);
              distChart = new Chart(ctx,{ type:'doughnut', data:{ labels, datasets:[{ data }] }, options:{ plugins:{ legend:{ position:'bottom' }}}});
            }
            async function loadDistChart(){
              const { data } = await axios.get('/api/dashboard/dispatch/uncomplete');
              const list = data.data || data || [];
              const groups = { '已完成':0, '進行中':0, '待派車':0 };
              list.forEach(x=>{
                const s = (x.dispatchStatus||'').trim();
                if(s.includes('完成')) groups['已完成']++;
                else if(s.includes('待')) groups['待派車']++;
                else groups['進行中']++;
              });
              renderDist(groups);
            }

            // ===== Google Maps：建立一次，位置定時更新 =====
            function renderMaps(){
              if(!window.google || !google.maps) return;
              driverCards.value.forEach((card, i)=>{
                const el = document.getElementById('gmap_'+i);
                if(!el) return;
                let obj = miniMapCache.get(i);
                if(!obj){
                  const map = new google.maps.Map(el, {
                    center:{ lat:25.033964, lng:121.564468 }, zoom:15, disableDefaultUI:true, mapId:"add29920b46056c38796ff49"
                  });
                  const markerEl = document.createElement('div');
                  const color = card.statusType==='on' ? '#f97316' : (card.statusType==='idle' ? '#22c55e' : '#6b7280');
                  markerEl.innerHTML = carSVG(color);
                  const marker = new google.maps.marker.AdvancedMarkerElement({ map, position: map.getCenter(), content: markerEl });
                  obj = { map, marker };
                  miniMapCache.set(i, obj);
                }
              });
              refreshVehicleLocations();
            }

            // ===== 位置更新（去重，前 5 張餵 marker） =====
            async function refreshVehicleLocations(){
              try{
                const { data:raw } = await axios.get('/api/dashboard/vehicle-locations');
                const arr = Array.isArray(raw) ? raw : (raw?.data || []);

                const pick = new Map();
                for (const loc of arr) {
                  const vid = Number(loc.vehicleId ?? loc.VehicleId) || 0;
                  const plate = (loc.plateNo || loc.PlateNo || '').trim();
                  const key = vid || plate;
                  if (!key) continue;
                  // 如需「最新優先」，可在這裡比較時間戳再覆蓋
                  pick.set(key, loc);
                }
                const uniq = Array.from(pick.values());

                uniq.slice(0,5).forEach((loc, i)=>{
                  const obj = miniMapCache.get(i);
                  if(!obj) return;
                  const p = { lat: Number(loc.latitude||loc.Latitude), lng: Number(loc.longitude||loc.Longitude) };
                  if(Number.isFinite(p.lat)&&Number.isFinite(p.lng)){
                    obj.marker.position = p;
                    obj.map.setCenter(p);
                  }
                });
              }catch(e){
                console.warn('vehicle-locations 失敗', e);
              }
            }

            // ===== 審核/駁回 =====
            const approve = async (p) => {
              if (!confirm(`確定要將申請單 #${p.applyId} 審核通過並派車嗎？`)) return;
              try {
                await axios.post(`/api/carapplications/${p.applyId}/approve-assign`, null, { params: { passengerCount: p.passengerCount ?? 0 }});
                alert(`已成功審核並派車`);
                p.status = "完成審核";
                pending.value = pending.value.filter(r => r.applyId !== p.applyId);
              } catch (err) {
                alert(err?.response?.data?.message || '審核派車失敗');
              }
            };
            const reject = async (p) => {
              if (!confirm(`確定要將申請單 #${p.applyId} 駁回嗎？`)) return;
              try {
                await axios.patch(`/api/CarApplications/${p.applyId}/status`, { status: "駁回" });
                alert("已成功駁回");
                p.status = "駁回";
                pending.value = pending.value.filter(r => r.applyId !== p.applyId);
              } catch {
                alert("駁回失敗");
              }
            };

            // ===== 告警計算 =====
            const tail = (s) => {
              const parts = String(s||'').split('-').map(x=>x.trim()).filter(Boolean);
              return parts.length ? parts[parts.length-1] : '';
            };
            const timeTail = (s) => (String(s||'').split('-')[1] || s || '').toString().trim();

            function parseSlotEnd(item) {
              const today = new Date();
              const baseDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());

              const dt = item.endTime || item.useEnd || item.arrivalTime;
              if (dt) {
                const t = new Date(dt);
                if (!isNaN(t)) return t;
              }

              const raw = String(item.useTime || '').trim();
              if (!raw) return null;

              const m = raw.match(/(?:(\d{4}\/\d{1,2}\/\d{1,2})\s+)?(\d{1,2}:\d{2})\s*-\s*(\d{1,2}:\d{2})/);
              if (!m) return null;

              const [, dateStr,, endStr] = m;
              let base = baseDate;
              if (dateStr) {
                const d = new Date(dateStr);
                if (!isNaN(d)) base = new Date(d.getFullYear(), d.getMonth(), d.getDate());
              }
              const [hh, mm] = endStr.split(':').map(Number);
              return new Date(base.getFullYear(), base.getMonth(), base.getDate(), hh, mm, 0);
            }
            function parseSlotStart(item) {
              const today = new Date();
              const baseDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());

              const dt = item.startTime || item.useStart;
              if (dt) {
                const t = new Date(dt);
                if (!isNaN(t)) return t;
              }

              const raw = String(item.useTime || '').trim();
              const m = raw.match(/(?:(\d{4}\/\d{1,2}\/\d{1,2})\s+)?(\d{1,2}:\d{2})\s*-\s*(\d{1,2}:\d{2})/);
              if (!m) return null;

              const [, dateStr, startStr] = m;
              let base = baseDate;
              if (dateStr) {
                const d = new Date(dateStr);
                if (!isNaN(d)) base = new Date(d.getFullYear(), d.getMonth(), d.getDate());
              }
              const [hh, mm] = startStr.split(':').map(Number);
              return new Date(base.getFullYear(), base.getMonth(), base.getDate(), hh, mm, 0);
            }

            function isOverdue(item) {
              const endT = parseSlotEnd(item);
              if (!endT) return false;
              const status = (item.dispatchStatus || '').trim();
              const done = status.includes('完成');
              return !done && (new Date() > endT);
            }

            async function refreshAlerts(){
              try{
                // ping
                const ping = await axios.get('/api/dashboard/cards');
                health.value.ok = !!(ping && ping.status === 200);

                // 未完成任務
                const { data } = await axios.get('/api/dashboard/dispatch/uncomplete');
                const list = data.data || data || [];

                overdueList.value = list.filter(isOverdue).map(x => ({
                  id: x.dispatchId || x.id || `${x.driverName}_${x.useTime}`,
                  driverName: x.driverName,
                  useTimeTail: timeTail(x.useTime),
                  destTail: tail(x.route)
                }));

                // 卡住：狀態含「待」且開始時間已過
                const now = new Date();
                stuckCount.value = list.filter(x=>{
                  const s = (x.dispatchStatus||'').trim();
                  if (!s.includes('待')) return false;
                  const st = parseSlotStart(x);
                  return st && now > st;
                }).length;

              }catch(e){
                health.value.ok = false;
                console.warn('refreshAlerts error', e);
              }
            }

            // ===== AI 建議派車（對話框） =====
            function openSuggest(){
              document.getElementById('aiSuggestDlg').showModal();
              fetchSuggestions();
            }
            function closeSuggest(){ document.getElementById('aiSuggestDlg').close(); }

            async function fetchSuggestions(){
              suggesting.value = true;
              suggestErr.value = '';
              suggestList.value = [];
              try{
                const [pendingRes, driversRes, locsRes] = await Promise.all([
                  axios.get('/api/dashboard/applications/pending'),
                  axios.get('/api/dashboard/drivers/today-status'),
                  axios.get('/api/dashboard/vehicle-locations')
                ]);

                const { data } = await axios.post('/api/ai/dispatch/suggest', {
                  pending: pendingRes.data?.data ?? [],
                  drivers: driversRes.data?.data ?? [],
                  locations: locsRes.data?.data ?? []
                });

                suggestList.value = data?.data ?? [];
              }catch(err){
                suggestErr.value = '取得建議失敗';
              }finally{
                suggesting.value = false;
              }
            }
            async function applySuggestion(s){
              if(!confirm(`套用：車 ${s.plateNo} → 申請 #${s.applyId}？`)) return;
              try{
                await axios.post(`/api/carapplications/${s.applyId}/approve-assign`, null, {
                  params: { vehicleId: s.vehicleId, driverId: s.driverId }
                });
                alert('已派車');
                closeSuggest();
                // 快速刷新
                loadPending();
                loadDriverStatus();
                refreshVehicleLocations();
              }catch(e){
                alert('套用失敗');
              }
            }
            async function skipSuggestion(s){
              try{
                await axios.post('/api/ai/dispatch/skip', { suggestionId: s.suggestionId });
                suggestList.value = suggestList.value.filter(x => x.suggestionId !== s.suggestionId);
              }catch{}
            }

            // ===== Boot =====
            async function boot(){
              await refreshAlerts();
              setInterval(refreshAlerts, 15000);

              await loadCards();
              renderTrend(kpi.value.scheduleTodayCount);
              await Promise.all([ loadUnfinished(), loadPending(), loadDriverStatus(), loadDistChart() ]);

              setInterval(async ()=>{ await loadCards(); renderTrend(kpi.value.scheduleTodayCount); }, 60000);
              setInterval(loadUnfinished, 60000);
              setInterval(loadPending, 60000);
              setInterval(refreshVehicleLocations, 3000);
            }

            onMounted(boot);

            return {
              // KPI
              kpi, totalKm, nowHHmm,
              // lists
              unfinished, pending, pendingFiltered,
              // maps/cards
              driverCards,
              // actions
              approve, reject,
              // alerts
              health, overdueList, overdueCount, stuckCount, refreshAlerts,
              // AI suggest UI
              suggesting, suggestErr, suggestList, openSuggest, closeSuggest, applySuggestion, skipSuggestion
            };
          }
        }).mount('#app');
    </script>
</body>
