﻿@{
ViewData["Title"] = "用車申請";
}
<head>
    <link href="/css/Dispatch/CarApply.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.13/flatpickr.min.css">
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.js"></script>

</head>


<body>
    <div id="app" class="container" v-cloak>
        <form id="car-form">
           
            <div class="section">
                <div class="section-hd">
                    <div>用車申請</div>
                </div>
            </div>


                <div>
                    <!-- 用車申請（申請人 + 車輛卡） -->
                    <div class="section-bd">
                        <div class="grid-2">
                            <!-- 左側：申請人卡 + 欄位 -->
                            <div>
                                

                                <div class="grid-3">
                                    <div>
                                        <label>車輛類別 *</label>
                                        <select v-model="vehicleType">
                                            <option value="汽車">汽車</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label>事由 *</label>
                                        <select v-model="purposeType">
                                            <option value="公務車(不可選車)">公務車(不可選車)</option>
                                            @* <option value="公務車(可選車)">公務車(可選車)</option> *@
                                        </select>
                                    </div>
                                    <div>
                                        <label>裝載物料品名</label>
                                        <input class="form-control" v-model="materialName" placeholder="例如： 文件" />

                                    </div>

                                    <!-- 只有選「公務車(可選車)」時才出現車輛下拉 -->
                                    <div v-if="purposeType === '公務車(可選車)'">
                                        <label>車輛 *</label>
                                        <select v-model="assign.vehicleId">
                                            <option :value="null">（未選擇）</option>
                                            <option v-for="v in availableVehicles"
                                                    :key="v.vehicleId"
                                                    :value="v.vehicleId">
                                                {{ v.plateNo }} ({{ v.capacity }}人座)
                                            </option>
                                        </select>
                                        <small class="muted">駕駛依班表自動指派，車輛由你挑選</small>
                                    </div>
                                </div>



                                <div class="grid-1" style="margin-top:12px">
                                    <div class="row-combined">
                                        <div style="flex:0 0 180px;">
                                            <label>事由類型</label>
                                            <select v-model="reasonType" style="width:100%">
                                                <option value="公務用">公務用</option>
                                            </select>
                                        </div>
                                    
                                        <div style="flex:1; margin-left:12px;">
                                            <label>用車事由</label>
                                            <input type="text" placeholder="簡述申請原因" v-model="applyReason" style="width:100%" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 右側：車輛資訊摘要卡 -->
                            <div class="vehicle-card">
                                <div class="vehicle-icon">🚗</div>
                                <div>
                                    <div style="font-weight:700">{{ vehicleType }}<br>{{ purposeType }}</div>
                                    <div class="muted" style="margin-top:6px">
                                        將於 <b>{{ fmtDateTimeLocal(useStart) }}</b> 出車，<br />
                                        預計 <b>{{ fmtDateTimeLocal(useEnd) }}</b> 歸還。
                                    </div>
                                    <div style="margin-top:8px"><a href="javascript:void(0)">more →</a></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div style="width:45%;">
                            <label>起始時間 *</label>
                            <div class="input-group">
                                <input id="useStart" type="text" class="form-control" placeholder="選擇起始時間" />
                                <span class="input-group-text" id="calendarStart">📅</span>
                            </div>
                        </div>

                        <div style="width:45%;">
                            <label>結束時間 *</label>
                            <div class="input-group">
                                <input id="useEnd" type="text" class="form-control" placeholder="選擇結束時間" />
                                <span class="input-group-text" id="calendarEnd">📅</span>
                            </div>
                        </div>
                    </div>

                    <div class="section">
                        <!-- 標題列 -->
                        <div class="row mb-2 bg-primary text-white text-center" style="padding:8px 0;">
                            <div class="col-3">出發地</div>
                            <div class="col-3">目的地</div>
                            <div class="col-3">來回 | 單程</div>
                            <div class="col-2">動作</div>
                        </div>
                    </div>

                    <div class="section-bd">
                        <div class="row align-items-center mb-2">
                            <div class="col-3">
                                <input id="orig" class="form-control" placeholder="請輸入出發地" v-model="origin" required />
                                <div class="ac-dropdown" id="ac-orig"></div>
                            </div>



                            <div class="col-3">
                                <input id="dest" class="form-control" placeholder="請輸入目的地" v-model="destination" required />
                                <div class="ac-dropdown" id="ac-dest"></div>
                            </div>



                            <div class="col-3">
                                <select class="form-control" v-model="tripType">
                                    <option value="round">來回</option>
                                    <option value="single">單程</option>
                                </select>
                            </div>

                            <div class="col-2 text-center">
                                <button type="button" class="btn btn-primary" @@click="calcDistance">查詢</button>
                            </div>
                        </div>


                        <!-- 查詢結果 -->
                        <div v-if="singleDistance && singleDuration" class="row mt-3">
                            <div class="col">
                                <div class="metric">
                                    🚗 單程距離：約 <b>{{ singleDistance }}</b>
                                    ⏱ 單程時間：約 <b>{{ singleDuration }}</b>
                                </div>
                            </div>
                            <div class="col">
                                <div class="metric">
                                    🔁 來回距離：約 <b>{{ roundTripDistance }}</b>
                                    ⏱ 來回時間：約 <b>{{ roundTripDuration }}</b>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- 人員與單位 -->
                <div class="section">
                    <!-- 標題列 -->
                    <div class="row mb-2 bg-primary text-white text-center" style="padding:8px 0;">
                        <div class="col-2"><div>搭乘人數 *</div></div>
                        <div class="col-3"><div>搭乘人員 *</div></div>
                        <div class="col-4"><div>所屬單位與職稱 *</div></div>
                        <div class="col-2 text-center"><div>動作</div></div>
                    </div>

                    <!-- 輸入列 -->
                    <div class="section-bd">
                        <div v-for="(p, x) in passengers" :key="x" class="row mb-2">
                            <div class="col-1 text-center">
                                <span>{{ x + 1 }}</span>
                            </div>
                            <div class="col-4">
                            <input type="text"
                                   v-model="p.name"
                                   class="form-control"
                                   placeholder="姓名"
                                   @@input ="p.name = p.name.replace(/[0-9]/g, '')">

                            </div>
                            <div class="col-4">
                                <input type="text" v-model="p.deptTitle" class="form-control" placeholder="單位與職稱">
                            </div>
                            <div class="col-2 text-center">
                                <button type="button" class="btn btn-danger" @@click="removePassenger(x)">刪除</button>
                            </div>
                        </div>

                        <div class="row mb-2 align-items-end">
                            <div class="col-3">
                                <label>搭乘人數 *</label>
                                <input type="number" class="form-control" :value="passengers.length" readonly>
                                <div v-if="capacityError" style="color:red; margin-top:4px;">
                                    {{ capacityError }}
                                </div>
                            </div>
                            <div class="col-auto">
                                <button type="button"
                                        class="btn btn-primary"
                                        @@click="addPassenger"
                                        :disabled="!canAddPassenger">
                                    新增乘客
                                </button>
                            </div>
                        </div>
                        
                    </div>

                    <!-- 動作列 -->
                    <div class="actions" style="margin-top:16px">
                        <a asp-action="Dispatch" asp-controller="Dispatches"
                           class="btn"
                           style="background:#6b7280; color:#fff; border-color:#6b7280;">
                            返回清單
                        </a>
                        <button type="button" class="btn btn-primary" @@click="onSubmit">送出申請</button>
                    </div>
                </div>
        </form>
    </div>

    <script>
        // 產生 Places Per-Session token
        function createPlacesSessionToken(){
          if (window.crypto?.randomUUID) return crypto.randomUUID();
          return Date.now().toString(36) + Math.random().toString(36).slice(2);
        }
                const placeSessionTokens = { orig: null, dest: null };
        function getOrCreateToken(which){
          // 需要現代瀏覽器；若要兼容可換簡單 GUID 產生器
          if (!placeSessionTokens[which]) placeSessionTokens[which] = crypto.randomUUID();
          return placeSessionTokens[which];
        }
        function endToken(which){ placeSessionTokens[which] = null; }
    </script>
    <script>
            // 解析 "(lat,lng)" 或 "lat,lng"
            function parseLatLngText(text){
              if (!text) return null;
              const s = String(text).trim().replace(/[()]/g, "").replace(/[，\s]+/g, ",");
              const parts = s.split(",");
              if (parts.length !== 2) return null;
              const lat = Number(parts[0]), lng = Number(parts[1]);
              if (!isFinite(lat) || !isFinite(lng)) return null;
              if (lat < -90 || lat > 90 || lng < -180 || lng > 180) return null;
              return { lat, lng };
            }
            // 下拉選單（1 秒防抖、含鍵盤操作）
            function attachPlacesAutocomplete(inputId, dropdownId, callback, idleMs = 1000) {
              const input = document.getElementById(inputId);
              const drop  = document.getElementById(dropdownId);
              if (!input || !drop) return;

              document.body.appendChild(drop);

              function moveActive(dir){
                const items = Array.from(drop.querySelectorAll('.ac-item'));
                if (!items.length) return;
                let idx = items.findIndex(x=>x.classList.contains('active'));
                idx = (idx + dir + items.length) % items.length;
                items.forEach(x=>x.classList.remove('active'));
                items[idx].classList.add('active');
              }
           

            // === 新增：Session Token 管理 ===
        let sessionToken = null;
        const ensureToken = () => {
          if (!sessionToken) {
            sessionToken = crypto.randomUUID();
            console.log(`[${inputId}] 建立新 sessionToken:`, sessionToken);
          }
          return sessionToken;
        };
        const endSession = () => {
          console.log(`[${inputId}] sessionToken 結束:`, sessionToken);
          sessionToken = null;
        };

         function positionDropdown() {
                const rect = input.getBoundingClientRect();
                drop.style.position = "absolute";
                drop.style.top  = rect.bottom + window.scrollY + "px";
                drop.style.left = rect.left + window.scrollX + "px";
                drop.style.width = rect.width + "px";
              }

              let timer = null;
              function showLoading(){ drop.innerHTML = '<div class="ac-empty">搜尋中…</div>'; drop.style.display='block'; positionDropdown(); }
              function showEmpty(msg='找不到建議'){ drop.innerHTML = `<div class="ac-empty">${msg}</div>`; drop.style.display='block'; positionDropdown(); }
              function hide(){ drop.style.display='none'; drop.innerHTML=''; }

              function render(items, onPick){
                drop.innerHTML = '';
                if (!items || !items.length){ showEmpty(); return; }
                items.forEach((it, idx)=>{
                  const div = document.createElement('div');
                  div.className = 'ac-item' + (idx===0? ' active' : '');
                  div.textContent = it.text;
                  div.dataset.id = it.id || '';
                  div.addEventListener('mousedown', (e)=>{ e.preventDefault(); onPick(it); });
                  drop.appendChild(div);
                });
                drop.style.display = 'block';
                positionDropdown();
              }

                    async function pick(item){
          try{
            if (item.id) {
              const token = ensureToken();
              console.log(`[${inputId}] 發送 details 請求，token:`, token);

              const url = `/api/places/details/${encodeURIComponent(item.id)}?sessionToken=${encodeURIComponent(token)}`;
              const res = await fetch(url);
              console.log(`[${inputId}] details status:`, res.status);

              const data = await res.json();
              console.log(`[${inputId}] details body:`, data);

              const name = data?.displayName?.text || item.text || '';
              input.value = name;
              hide();

              const lat = data?.location?.latitude ?? null;
              const lng = data?.location?.longitude ?? null;
              if (typeof callback === 'function') {
                callback({ id: data?.id || item.id, text: name, lat, lng, addr: data?.formattedAddress, raw: data });
              }
            } else {
              input.value = item.text;
              hide();
              if (typeof callback === 'function') callback(item);
            }
          } finally {
            endSession(); // 選完就結束
            input.dispatchEvent(new Event('change', { bubbles:true }));
          }
        }

               function pickActive(){ const el = drop.querySelector('.ac-item.active'); if (!el) return; pick({ id: el.dataset.id || '', text: el.textContent }); }

        input.addEventListener('focus', ()=>{ ensureToken(); positionDropdown(); });

        input.addEventListener('input', ()=>{
          const q = input.value.trim();
          clearTimeout(timer);
          hide();
          if (!q || q.length < 3) return;
          timer = setTimeout(async ()=>{
            ensureToken();
            showLoading();
            try {
              console.log(`[${inputId}] autocomplete 請求，token:`, sessionToken);

              const res = await fetch('/api/places/autocomplete', {
                method:'POST',
                headers:{ 'Content-Type':'application/json' },
                body: JSON.stringify({ input: q, sessionToken })
              });

              console.log(`[${inputId}] autocomplete status:`, res.status);
              const data = await res.json();
              console.log(`[${inputId}] autocomplete result:`, data);

              const items = (data?.suggestions||[]).map(s=>{
                const pp = s.placePrediction;
                const text = pp?.text?.text || '';
                const id   = pp?.placeId || '';
                return text ? { id, text } : null;
              }).filter(Boolean);

              render(items, pick);
            } catch(err){
              console.error(`[${inputId}] autocomplete error:`, err);
              showEmpty('⚠ 連線異常，請稍後再試');
            }
          }, idleMs);
        });

        input.addEventListener('keydown', (e)=>{
          if (e.key==='Enter'){ e.preventDefault(); if (drop.style.display==='block'){ pickActive(); } return false; }
          if (e.key==='ArrowDown'){ e.preventDefault(); moveActive(+1); }
          else if (e.key==='ArrowUp'){ e.preventDefault(); moveActive(-1); }
          else if (e.key==='Escape'){ hide(); }
        });
            function newSessionToken() {
              sessionToken = crypto.randomUUID(); // 產生唯一 token
            }
            

              document.addEventListener('click', (e)=>{ if (!drop.contains(e.target) && e.target!==input) hide(); });

              input.addEventListener('blur', ()=>{ /* 也可加個延遲再 endSession()，看 UX 需求 */ });
              window.addEventListener('resize', positionDropdown);
              window.addEventListener('scroll', positionDropdown);
            }

                    let singleDurationSec = 0;       // 單程秒數
                    let roundTripDurationSec = 0;    // 來回秒數 ＝ 單程 * 2

                    function toLocalDateTimeString(date) {
              const pad = n => String(n).padStart(2, "0");
              return `${date.getFullYear()}-${pad(date.getMonth()+1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
            }

            //日期正規化
                    function fmtDateTimeLocal(dtStr) {
              if (!dtStr) return "—";
              const d = new Date(dtStr);
              if (isNaN(d.getTime())) return "—";
              const pad = n => String(n).padStart(2, "0");
              return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
            }

            function recalcArrival() {
              const startInput = document.getElementById("UseStart").value;
              if (!startInput) return;

              const start = new Date(startInput);
              if (isNaN(start.getTime())) return;

              const tripType = document.getElementById("TripType").value;
              const secs = (tripType === "來回") ? roundTripDurationSec : singleDurationSec;
              if (!secs || secs <= 0) return;
            }
            // 初始化：避免重複綁定
            function initPlacesAutocompleteDebounced(bindings = {}, opts = {}){
              if (window.__AC_DEBOUNCED_INITED__) return; window.__AC_DEBOUNCED_INITED__ = true;
              const idleMs = Number.isFinite(opts.idleMs) ? opts.idleMs : 1000;
              const safeAttach = (inputId, dropdownId, onPick)=>{
                const input = document.getElementById(inputId), drop = document.getElementById(dropdownId);
                if (!input || !drop) return;
                attachPlacesAutocomplete(inputId, dropdownId, onPick, idleMs);
              };
              safeAttach('orig','ac-orig', (p)=>{ if (typeof bindings.onOrigin==='function') bindings.onOrigin(p); else { const el=document.getElementById('orig'); if (el) el.value=p.text; window.origin=p.text; } });
              safeAttach('dest','ac-dest', (p)=>{ if (typeof bindings.onDestination==='function') bindings.onDestination(p); else { const el=document.getElementById('dest'); if (el) el.value=p.text; window.destination=p.text; } });
            }
    </script>
    <script>
        console.log("✅ JS 載入測試：檔案已執行");
        window.addEventListener('error', e => console.error('🌋 WindowError:', e.message, e.error));
        window.addEventListener('unhandledrejection', e => console.error('🌋 UnhandledRejection:', e.reason));
    </script>

    <script>
        const { createApp, ref, reactive, onMounted, computed, watch } = Vue;

        createApp({
          setup() {
            // ----- 小工具 -----
            const pad = n => String(n).padStart(2, "0");
            function toLocalDateTimeString(date) {                    // ← 補上你原本呼叫但沒定義的工具
              return `${date.getFullYear()}-${pad(date.getMonth()+1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
            }
            function toLocalISOString(date) {
              const tzOffset = date.getTimezoneOffset() * 60000;
              return new Date(date.getTime() - tzOffset).toISOString().slice(0, -1);
            }
            function toLocalNaive(dtLike) {
              const d = new Date(dtLike);
              return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
            }
            function fmtDateTimeLocal(dtStr) {
              if (!dtStr) return "—";
              const d = new Date(dtStr);
              if (isNaN(d)) return "—";
              return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
            }
            function problemDetailsToText(pd) {
              if (pd && pd.errors) {
                return Object.entries(pd.errors).map(([k, arr]) => `${k}: ${arr.join('；')}`).join('\n');
              }
              if (pd && (pd.title || pd.detail)) {
                return `${pd.title || ''} ${pd.detail || ''}`.trim();
              }
              return '未知錯誤';
            }

            function toLocalIso(dt) {
              if (!dt) return "";
              const d = new Date(dt);
              if (isNaN(d)) return "";
              const pad = n => String(n).padStart(2, "0");
              return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
            }

            // 把任意距離字串轉成 number（decimal）或 null
            function toDecimalOrNull(s) {
              if (s == null) return null;
              const t = String(s)
                .replace(/[,，]/g, ".")
                .replace(/[^\d.\-]/g, "")
                .trim();
              if (t === "" || t === "." || t === "-" || t === "-.") return null;
              const n = Number(t);
              return Number.isFinite(n) ? n : null;
            }

            // ---- 行程秒數（由 calcDistance 計算後更新）----
            let singleDurationSec = 0;
            let roundTripDurationSec = 0;

            // ----- 狀態 -----
            const now = new Date();

            // 申請人模式 & 下拉
            const applyFor = ref("self"); // self 
            

            // 表單欄位
            const vehicleType  = ref("汽車");
            const purposeType  = ref("公務車(不可選車)");
            const passengerCount = ref(1);
            const reasonType = ref("公務用");
            const applyReason = ref("");
            const origin = ref("");
            const destination = ref("");
            const tripType = ref("round"); // single / round
            const materialName = ref("");
            // 申請者（本人）資訊
            const applicant = reactive({ name:'', birth:'', dept:'', ext:'', email:'' });

            // 時間
            const useStart = ref(toLocalDateTimeString(now));
            const useEnd = ref("");

            const arrivalDisplay = computed(() => {
              if (!useStart.value) return "";
              const start = new Date(useStart.value);
              if (isNaN(start)) return "";
              const secs = (tripType.value === "round") ? roundTripDurationSec : singleDurationSec;
              if (!secs) return "";
              const arrival = new Date(start.getTime() + secs * 1000);
              
              return `${arrival.getFullYear()}/${pad(arrival.getMonth()+1)}/${pad(arrival.getDate())} ${pad(arrival.getHours())}:${pad(arrival.getMinutes())}`;
            });

            // 車輛
            const vehicles = ref([]);
            const assign   = reactive({ vehicleId: null });
            const availableVehicles = computed(() =>
              (vehicles.value || []).filter(v => {
                const status = (v.status ?? '').trim();
                const busy   = !!v.busy;
                return status !== '使用中' && !busy;
              })
            );

            // 乘客名單
            const passengers = ref([{ name: "", deptTitle: "" }]);
            const syncPassengerCount = () => { passengerCount.value = passengers.value.length; };
            async function addPassenger() {
            // 判斷是否超過最大載客量
              if (maxCapacity.value > 0 && passengers.value.length >= maxCapacity.value) {
                capacityError.value = `⚠️ 目前最多只能載 ${maxCapacity.value} 人`;
                return;
              }
              passengers.value.push({ name: "", deptTitle: "" });
              syncPassengerCount();
              await checkCapacity();
            }

            async function removePassenger(i) {
              passengers.value.splice(i, 1);
              syncPassengerCount();
              await checkCapacity();
            }

            // 可否再新增乘客
            const canAddPassenger = computed(() => {
              if (maxCapacity.value > 0 && passengers.value.length >= maxCapacity.value) {
                return false;
              }
              return true;
            });
            //檢查載客量
            const capacityError = ref("");  // 顯示錯誤訊息
            const maxCapacity = ref(0);     // 從後端查回的最大載客量

                    async function checkCapacity() {
          if (!useStart.value || !useEnd.value) return;
                 try {
          const res = await axios.get("/api/max-capacity", {
            params: {
              from: toLocalIso(useStart.value),
              to:   toLocalIso(useEnd.value)
            }
          });

          //最大載客量
          const max = res.data?.data?.max ?? res.data?.max ?? 0;
          maxCapacity.value = max;

          if (passengers.value.length >= max && max > 0) {
            capacityError.value = `⚠️ 目前最多只能載 ${max} 人`;
          } else {
            capacityError.value = "";
          }
        } catch (err) {
          console.error("❌ checkCapacity error", err);
        }

        }
        
            // ----- 載入 API -----
           

            async function loadVehicles() {
              if (!useStart.value || !useEnd.value) return;
              try {
                const fromStr = useStart.value;             // datetime-local 是本地無 Z
                const toStr   = toLocalNaive(useEnd.value); // 轉成本地無 Z

                const res = await axios.get('/api/vehicles-available', {
                  params: {
                    from: fromStr,
                    to:   toStr,
                    capacity: passengers.value.length || undefined
                  },
                  withCredentials: true
                });

                if (!res.data?.data || res.data?.data.length === 0) {
                  alert("⚠ 當下沒有可用車輛，請調整時間或人數");
                }

                vehicles.value = res.data.map(v => ({
                  vehicleId: v.vehicleId,
                  plateNo:   v.plateNo ?? '',
                  brand:     v.brand ?? '',
                  model:     v.model ?? '',
                  capacity:  v.capacity ?? 0,
                  status:    v.status ?? '',
                  busy:      false
                }));

                // if (purposeType.value === '公務車(可選車)') {
                //   assign.vehicleId = vehicles.value[0]?.vehicleId ?? null;
                // } else {
                //   assign.vehicleId = null;
                // }
              } catch (err) {
                vehicles.value = [];
              }
            }

            // ----- 監聽 -----
            watch(purposeType, (val) => {
              if (val === '公務車(可選車)') {
                const stillOk = availableVehicles.value.find(v => v.vehicleId === assign.vehicleId);
                if (!stillOk) assign.vehicleId = availableVehicles.value[0]?.vehicleId ?? null;
              } else {
                assign.vehicleId = null;
              }
            });

            watch(availableVehicles, (list) => {
              if (purposeType.value !== '公務車(可選車)') return;
              const ok = list.find(v => v.vehicleId === assign.vehicleId);
              if (!ok) assign.vehicleId = list[0]?.vehicleId ?? null;
            });

            

           // 監聽乘客數變化也自動檢查
            watch(passengers, () => {
              checkCapacity();
            }, { deep: true });

        // ----- 動作：計算距離/時間 -----
        async function calcDistance() {
          if (!origin.value || !destination.value) {
            alert('請輸入出發地與目的地');
            return;
          }

          try {
            const url = `/api/distance?origin=${encodeURIComponent(origin.value)}&destination=${encodeURIComponent(destination.value)}`;
            const res = await fetch(url);
            const data = await res.json();

            if (!data || !data.distanceKm) {
              alert('⚠️ 查無路線');
              return;
            }

            // 秒數換算
            const singleDurationSec    = data.durationMin * 60;
            const roundTripDurationSec = data.durationMin * 120;

            // 顯示用格式化
            const km = (data.distanceKm).toFixed(1) + ' 公里';
            const fmt = (minutes) => {
              let h = Math.floor(minutes / 60);
              let m = Math.round(minutes % 60);
              let t = '';
              if (h > 0) t += h + ' 小時 ';
              if (m > 0) t += m + ' 分鐘';
              return t.trim() || '0 分鐘';
            };

            // 綁定到既有的顯示欄位
            singleDistance.value    = km;
            singleDuration.value    = fmt(data.durationMin);
            roundTripDistance.value = (data.distanceKm * 2).toFixed(1) + ' 公里';
            roundTripDuration.value = fmt(data.durationMin * 2);

            // 推估結束時間 + 載入可用車輛
            const start = new Date(useStart.value);
            if (!isNaN(start)) {
             
           
              await loadVehicles();
            }
          } catch (err) {
            console.error('❌ 取得距離失敗', err);
          }
        }

            // ----- 其他顯示用欄位 -----
            const singleDistance    = ref(null);
            const singleDuration    = ref(null);
            const roundTripDistance = ref(null);
            const roundTripDuration = ref(null);

            // ----- 送出 -----
        async function onSubmit() {
          if (!origin.value || !destination.value) {
            alert('請輸入出發地與目的地');
            return;
          }
          if (purposeType.value === '公務車(可選車)' && !assign.vehicleId) {
            alert('請選擇車輛');
            return;
          }

          const startDt = new Date(useStart.value);
          let endDt = useEnd.value ? new Date(useEnd.value) : null;
        // 使用者有填結束時間 → 就直接用
          if (useEnd.value) {
            endDt = new Date(useEnd.value);
          }

          // 不再強制「沒填就推算」
          if (!endDt || isNaN(endDt.getTime())) {
            alert('請輸入結束時間');
            return;
          }

          const normUseStart = toLocalISOString(startDt);
          const normUseEnd   = toLocalISOString(endDt);

          if (endDt <= startDt) {
            alert('結束時間必須晚於起始時間');
            return;
          }



          const pax = (passengers.value || []).filter(p => p && p.name && p.name.trim());
          console.log("👥 passengers:", pax);



          const payload = {
            applyFor: applyFor.value,
            vehicleType: vehicleType.value,
            purposeType: purposeType.value,
            passengerCount: pax.length,
            useStart: normUseStart,
            useEnd: normUseEnd,
            reasonType: reasonType.value,
            applyReason: applyReason.value,
            origin: origin.value,
            destination: destination.value,
            tripType: tripType.value,
            singleDistance: toDecimalOrNull(singleDistance.value),
            singleDuration: String(singleDuration.value ?? ''),
            roundTripDistance: toDecimalOrNull(roundTripDistance.value),
            roundTripDuration: String(roundTripDuration.value ?? ''),
            materialName: materialName.value,
            vehicleId: (purposeType.value === '公務車(可選車)') ? (Number(assign.vehicleId) || null) : null,
            status: '待審核'
          };
          
          console.log("📦 payload (application):", payload);

          const dto = {
            application: payload,
            passengers: pax.map(p => ({
              name: p.name.trim(),
              deptTitle: p.deptTitle || null
            })),
          };

          console.log("🚚 DTO 最終送出內容:", dto);

          try {
            const res = await axios.post('/api/CarApplications', dto, {
              withCredentials: true,
              headers: { 'Content-Type': 'application/json' }
            });
            console.log("✅ 後端回應:", res);
            alert(res.data?.message || "申請成功");
            window.location.href = '/Dispatches/Dispatch';
                  } catch (err) {
          if (err.response) {
            const data = err.response.data;

            let msg;
            if (typeof data === "string") {
              msg = data;
            } else {
              msg =
                data?.message ||
                data?.error ||
                data?.detail ||
                data?.title ||
                problemDetailsToText(data) ||
                JSON.stringify(data) ||
                "未知錯誤";
            }

            alert(`⚠️ 申請失敗\n${msg}`);
          } else {
            alert('❌ 無法連線伺服器');
          }
        }
        }

            // ----- 初始化 -----
        onMounted(() => {
          const pad = n => String(n).padStart(2, "0");
          const formatRoc = (date) => {
            const rocYear = date.getFullYear() - 1911;
            const mm = pad(date.getMonth() + 1);
            const dd = pad(date.getDate());
            const hh = pad(date.getHours());
            const mi = pad(date.getMinutes());
            return `${rocYear}/${mm}/${dd} ${hh}:${mi}`;
          };

          const startPicker = flatpickr("#useStart", {
            enableTime: true,
            clickOpens: false,   // 🚫 禁止直接點輸入框打開
            dateFormat: "Y-m-d H:i",
            altInput: true,
            altFormat: "Y-m-d H:i",
            formatDate: (date) => formatRoc(date),
            defaultDate: new Date(),
            onChange: (dates) => {
              if (dates.length) useStart.value = dates[0].toISOString();
            }
          });

          const endPicker = flatpickr("#useEnd", {
            enableTime: true,
            clickOpens: false,
            dateFormat: "Y-m-d H:i",
            altInput: true,
            altFormat: "Y-m-d H:i",
            formatDate: (date) => formatRoc(date),
            onChange: (dates) => {
              if (dates.length) useEnd.value = dates[0].toISOString();
            }
          });

          // 📅 點擊圖示才開啟日曆
          document.getElementById("calendarStart").addEventListener("click", () => {
            startPicker.open();
          });
          document.getElementById("calendarEnd").addEventListener("click", () => {
            endPicker.open();
          });
          initPlacesAutocompleteDebounced({
          onOrigin: (p) => {
            console.log("🚩 Origin picked:", p);
            window.origin = p.text;
          },
          onDestination: (p) => {
            console.log("🚩 Destination picked:", p);
            window.destination = p.text;
          }
        });
    });
              




            return {
              // 基本
              applyFor, vehicleType, purposeType,
              passengerCount, useStart, useEnd, reasonType, applyReason,
              origin, destination, tripType, applicant,materialName,

              // 車輛
              vehicles, availableVehicles, assign, loadVehicles,

              // 行程/距離
              singleDistance, singleDuration, roundTripDistance, roundTripDuration,
              arrivalDisplay, fmtDateTimeLocal, calcDistance,

              // 乘客
              passengers, addPassenger, removePassenger,checkCapacity,capacityError,canAddPassenger,

              // 送出
              onSubmit
            };
          }
        }).mount('#app');
    </script>



</body>