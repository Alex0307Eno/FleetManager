
@model List<CarApplication>
@{
    ViewData["Title"] = "派車單";

}

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="/css/Dispatch/Dispatches.css" rel="stylesheet" />
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>派車單</title>
    @await Html.PartialAsync("_Pagination")

</head>
<body>
    <div id="app" class="wrap" v-cloak>
        <section class="card">
            <div class="card-hd topbar">
                <h5 class="mb-0" style="font-weight:700">派車申請</h5>
                <div style="display:flex;gap:8px">
                    
                   
                    
                        <a class="btn btn-warning" asp-controller="Dispatches" asp-action="CarApply">新增</a>
                    
                    @if (User.IsInRole("Admin"))
                    { 
                    <button class="btn btn-primary" @@click="exportCSV">匯出</button>
                    }
                </div>
            </div>

            <div class="card-bd">
                <div class="filters">
                    <div class="f-item">
                        <label>日期起</label>
                        <input type="date" v-model="filters.dateStart">
                        <label>日期迄</label>
                        <input type="date" v-model="filters.dateEnd">
                        <button class="btn" style="margin-left:6px" @@click="reloadByDate">搜尋</button>
                        <button class="btn" style="margin-left:6px" @@click="resetFilters">重置</button>
                    </div>
                    <div class="f-item">
                        <label>駕駛人</label>
                        <select v-model="filters.driver">
                            <option value="">全部</option>
                            <option v-for="d in drivers" :key="d" :value="d">{{ d }}</option>
                        </select>
                    </div>

                    <div class="f-item">
                        <label>申請人</label>
                        <select v-model="filters.applicant">
                            <option value="">全部</option>
                            <option v-for="a in applicants" :key="a" :value="a">{{ a }}</option>
                        </select>
                    </div>
                    <div class="f-item">
                        <label>車輛</label>
                        <select v-model="filters.car">
                            <option value="">全部</option>
                            <option v-for="c in cars" :key="c" :value="c">{{ c }}</option>
                        </select>
                    </div>
                    
                </div>
            </div>

            <div class="card-bd table-wrap">
                <table>
                    <thead>
                        <tr>
                            <th style="width:110px">用車日期</th>
                            <th style="width:120px">用車時間</th>
                            <th style="width:260px">目的地</th>
                            <th>事由</th>
                            <th style="width:80px">申請人</th>
                            <th style="width:60px">人數</th>
                            <th style="width:90px">行駛里程</th>
                            <th style="width:100px">審核狀態</th>
                            <th style="width:90px">駕駛人</th>
                            <th style="width:80px">車輛</th>
                            <th style="width:80px">裝載物料</th>
                            <th style="width:110px">功能</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="r in paged" :key="r.applyId">
                            <td class="mono">{{ r.useDate }}</td>
                            <td class="mono">{{ r.useTime }}</td>
                            <td class="col-route">
                                {{ r.route }} ({{ r.tripType === 'round' ? '來回' : (r.tripType === 'single' ? '單程' : '') }})
                            </td>
                            <td>
                                <span v-if="r.reasonType">({{ r.reasonType }}) </span>{{ r.reason }}
                            </td>
                            <td>{{ r.applicantName }}</td>
                            <td class="mono">{{ r.passengerCount }}</td>
                            <td class="mono">{{ r.tripDistance }}</td>
                            <td><span class="badge" :class="statusClass(r.status)">{{ statusText(r.status) }}</span></td>
                            <td><span class="pill" :class="r.driverName ? '' : 's-muted'">{{ r.driverName || '未指派' }}</span></td>
                            <td><span class="pill blue" :class="r.plateNo ? '' : 's-muted'">{{ r.plateNo || '未指派' }}</span></td>
                            <td class="mono">{{ r.materialName  }}</td>
                            <td class="row-actions">
                                <button class="icon-btn view" title="檢視" @@click="openAppHistory(r.applyId)"><i class="fa-solid fa-eye"></i></button>
                                @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
                                {
                                <button v-if="canEdit(r)" class="icon-btn edit" title="編輯" @@click="editRow(r)"><i class="fa-solid fa-pen-to-square"></i></button>
                                }
                                <button  class="icon-btn delete" title="刪除" @@click="removeRow(r)"><i class="fa-solid fa-trash"></i></button>
                            </td>
                        </tr>
                        <tr v-if="!loading && filtered.length===0">
                            <td colspan="11" style="text-align:center;color:#6b7280">沒有符合條件的資料</td>
                        </tr>
                    </tbody>
                </table>
                <pagination v-model="page"
                            :page-size="pageSize"
                            :total="filtered ? filtered.length : 0">
                </pagination>



                <div class="footer-dots">
                    <div class="dotline"></div><div class="dotline"></div><div class="dotline"></div><div class="dotline"></div><div class="dotline"></div>
                </div>
            </div>
        </section>
        <!-- 申請單異動紀錄 Modal -->
        <div v-if="showAppHistory" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">申請單異動紀錄</h3>
                <p class="modal-subtitle">#{{ currentAppId }}</p>

                <table class="table">
                    <thead>
                        <tr>
                            <th>時間</th>
                            <th>動作</th>
                            <th>操作人</th>
                            <th>舊值</th>
                            <th>新值</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-if="!appHistoryRows.length">
                            <td colspan="5" class="text-muted">目前沒有異動紀錄</td>
                        </tr>
                        <tr v-for="(h,i) in appHistoryRows" :key="i">
                            <td>{{ formatDateTime(h.at) }}</td>
                            <td>{{ h.action }}</td>
                            <td>{{ h.byUserName }}</td>
                            <td>{{ h.oldValue }}</td>
                            <td><pre style="white-space: pre-line; margin:0">{{ h.newValue }}</pre></td>
                        </tr>
                    </tbody>
                </table>

                <div class="text-end">
                    <button class="btn btn-secondary" @@click="showAppHistory=false">關閉</button>
                </div>
            </div>
        </div>


        <!-- 編輯狀態 Modal -->
        <div v-if="editing" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">編輯審核狀態</h3>
                <p class="modal-subtitle" v-if="editing">派車單 #{{ editing?.applyId }}</p>

                <div class="form-group">
                    <label for="statusSelect">審核狀態</label>
                    <select id="statusSelect" v-model="newStatus">
                        <option value="待審核">待審核</option>
                        <option value="完成審核">完成審核</option>
                        <option value="駁回">駁回</option>
                    </select>
                </div>

                <div class="modal-actions">
                    <button class="btn" @@click="cancelEdit">取消</button>
                    <button class="btn btn-primary" @@click="confirmEdit">確認</button>
                </div>
            </div>
        </div>

        


    </div>


    <script>
        const { createApp, ref, computed, onMounted } = Vue;

        createApp({
          setup(){
            const rows = ref([]);
            const loading = ref(true);
            const error = ref("");
            //分頁
            const page = ref(1);
            const pageSize = 10;

        const paged = computed(() => {
          const start = (page.value - 1) * pageSize;
          return filtered.value.slice(start, start + pageSize);
        });
               
            
            // 當月 1~最後 1 日
            function getMonthRange(){
              const now = new Date();
              const y = now.getFullYear(), m = now.getMonth();
              const first = new Date(y, m, 2);
              const last  = new Date(y, m+1, 1);
              const f = d => d.toISOString().slice(0,10);
              return { start: f(first), end: f(last) };
            }

            // 篩選條件
            const filters = ref({
              dateStart: "", dateEnd: "",
              driver: "", applicant: "", car: "", q: ""
            });

            const drivers = ref([]);
            const applicants = ref([]);
            const cars = ref([]);

            // 格式工具
            const pad = n => String(n).padStart(2,"0");
            const fmtDate = d => {
              const dt = new Date(d); if (isNaN(dt)) return "";
              return `${dt.getFullYear()}-${pad(dt.getMonth()+1)}-${pad(dt.getDate())}`;
            };
            const fmtTime = d => {
              const dt = new Date(d); if (isNaN(dt)) return "";
              return `${pad(dt.getHours())}:${pad(dt.getMinutes())}`;
            };

            // 後端 /api/dispatch/records -> 轉成前端欄位
         const shapeRow = x => ({
          applyId: x.applyId,
          vehicleId: x.vehicleId,
          plateNo: x.plateNo || "",
          useDate: fmtDate(x.useStart),
          useTime: fmtTime(x.useStart),
          tripType: x.tripType || "",
          useStartRaw: x.useStart,
          route: (x.origin || "") + " - " + (x.destination || ""),
          applicantName: x.applicantName || "",
          applicantDept: x.applicantDept || "",
          passengerCount: x.passengerCount ?? 0,
          materialName: x.materialName  || "",
          tripType: x.tripType || "",
           tripDistance: (() => {
          const t = (x.tripType || "").toString().trim().toLowerCase();
          const single = x.singleDistance || "";
          const round  = x.roundTripDistance || "";
          return t === "single" ? single : (t === "round" ? round : (round || single || ""));
        })(),
          status: x.status || "",

          // 新增
          reasonType: x.reasonType || "",
          reason: x.applyReason || "",
          driverName: x.driverName || "",
          plateNo: x.plateNo || ""
        });

                function normalizeDate(d) {
          if (!d) return null;
          const dt = new Date(d);
          if (isNaN(dt)) return null;
          return dt.toISOString().split('T')[0]; // yyyy-MM-dd
        }


            // 載入（依日期向後端要資料；其餘在前端過濾）
                    const loadData = async () => {
          loading.value = true; error.value = "";
          try {
            const params = {};
            if (filters.value.dateStart) params.dateFrom = normalizeDate(filters.value.dateStart);
            if (filters.value.dateEnd)   params.dateTo   = normalizeDate(filters.value.dateEnd);
        if (filters.value.q && filters.value.q.trim()) {
          params.q = filters.value.q.trim();
        }
            const res = await axios.get('/api/carApplications', { params });
            const arr = Array.isArray(res.data?.data) ? res.data.data : [];
            rows.value = arr.map(shapeRow);
            console.log("API回傳", res.data);

            // 下拉清單
            const uniq = a => [...new Set(a.filter(Boolean))];
            drivers.value    = uniq(rows.value.map(r => r.driverName));
            applicants.value = uniq(rows.value.map(r => r.applicantName));
            cars.value       = uniq(rows.value.map(r => r.plateNo));
          } catch(e){
            console.log("Validation Errors:", e.response?.data?.errors);
            console.error("API錯誤:", e.response?.data || e.message);

            error.value = "讀取派車單失敗";
          } finally {
            loading.value = false;
          }
        };
        

         // === CarApplication 異動紀錄 ===
        const showAppHistory = ref(false)
        const currentAppId = ref(null)
        const appHistoryRows = ref([])

                 function formatDateTime(dt) {
          if (!dt) return "";
          const d = new Date(dt);
          return d.toLocaleString("zh-TW", { hour12: false });
        }



        // 打開 Modal + 讀取紀錄
        async function openAppHistory(appId) {
          console.log("🔎 openAppHistory called with appId =", appId)
          currentAppId.value = appId
          try {
            const res = await axios.get(`/api/carapplications/${appId}/history`, { withCredentials: true })
            appHistoryRows.value = res.data || []
            showAppHistory.value = true
          } catch (err) {
            console.error("❌ 載入申請單異動紀錄失敗", err)
            alert("載入申請單異動紀錄失敗")
          }
        }


            onMounted(() => {
              const {start,end} = getMonthRange();
              filters.value.dateStart = start;
              filters.value.dateEnd   = end;
              loadData();
            });

            // 前端篩選
            const filtered = computed(() => {
              const f = filters.value;
              const q = (f.q||"").toLowerCase().trim();

              return rows.value.filter(r => {
                // 日期區間
                if (f.dateStart && r.useDate < f.dateStart) return false;
                if (f.dateEnd   && r.useDate > f.dateEnd)   return false;

                if (f.driver    && r.driverName    !== f.driver)    return false;
                if (f.applicant && r.applicantName !== f.applicant) return false;
                if (f.car       && r.plateNo       !== f.car)       return false;

                if (q){
                  const hay = [
                    r.route, r.reason,r.applicantName,
                    r.driverName, r.plateNo, r.status
                  ].map(x => (x||"").toString().toLowerCase()).join(" ");
                  if (!hay.includes(q)) return false;
                }
                return true;
              });
            });

            // 顯示文字/樣式
             const statusText = (s) => {
               const k = String(s || "").trim();
               if (k === "完成審核" || k.toLowerCase() === "approved") return "完成審核";
               if (k === "駁回" || k.toLowerCase() === "reject") return "駁回";
               return "待審核";
             };

             // 顯示樣式
             const statusClass = (s) => {
               const k = String(s || "").trim();
               if (k === "完成審核" || k.toLowerCase() === "approved") return "s-approved";
               if (k === "駁回" || k.toLowerCase() === "reject") return "s-reject";
               return "s-wait"; // 待審核
             };


            // 依日期重新查詢後端
            const reloadByDate = () => loadData();

            // 重置到「當月一號～最後一號」，並清空其它條件
            const resetFilters = () => {
              const {start,end} = getMonthRange();
              filters.value.dateStart = start;
              filters.value.dateEnd   = end;
              filters.value.driver    = "";
              filters.value.applicant = "";
              filters.value.car       = "";
              filters.value.q         = "";
              // 重新打 API（當月資料）
              loadData();
            };

            // 匯出CSV
        const exportCSV = () => {
          const headers = ['用車日期','用車時間','目的地','事由','申請人','人數','里程','狀態','駕駛','車牌'];

          // 取目前畫面上的資料
          const rowsForCsv = Array.isArray(filtered.value) ? filtered.value : [];
          console.log('[exportCSV] rows:', rowsForCsv.length);

          // 轉一列（含轉義）
          const q = s => `"${String(s ?? '').replaceAll('"','""')}"`;

          const lines = rowsForCsv.map(r => [
            r.useDate,                           // 已在 shapeRow 轉好 yyyy-MM-dd
            r.useTime,                           // 已在 shapeRow 轉好 HH:mm
            r.route || '',                       // 路線（含停靠點的字串，若後端已有）
            r.reasonType ? `(${r.reasonType}) ${r.reason || ''}` : (r.reason || ''),
            r.applicantName || '',
            r.passengerCount ?? '',
            r.tripDistance ?? '',
            r.status || '',
            r.driverName || '',
            r.plateNo || '',
            ''                                   // 這頁沒有長短差欄位就留空，或自行帶入
          ].map(q).join(','));

          // ★ 關鍵：加 UTF-8 BOM，Excel 讀取不亂碼
          const bom = '\uFEFF';
          const csv = [headers.join(','), ...lines].join('\r\n');
          const blob = new Blob([bom + csv], { type: 'text/csv;charset=utf-8;' });
          const fileName = '派車紀錄.csv';

          if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            window.navigator.msSaveOrOpenBlob(blob, fileName);
          } else {
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url; a.download = fileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          }
        };


        // U: 編輯
        const editing = ref(null);   // 正在編輯的 row
          const newStatus = ref("");
                 const editRow = (r) => {
          editing.value = r;
          newStatus.value = r.status || "待審核";
        };

                const confirmEdit = async () => {
          if (!editing.value) return;
          try {
           // 先更新狀態
            await axios.patch(`/api/carApplications/${editing.value.applyId}/status`, {
              status: newStatus.value
            });
        
            // 若改為「完成審核」→ 立刻自動派車
            if (newStatus.value === '完成審核') {
              const params = {
                passengerCount: editing.value.passengerCount ?? 0
              };
              try {
                const res2 = await axios.post(
                  `/api/carApplications/${editing.value.applyId}/approve-assign`,
                  null,
                  { params }
                );
                alert(res2.data?.message || '審核完成並已自動派車');
              } catch (err) {
                //自動派車失敗時回報，但狀態仍已更新成完成審核，管理員可再重試或改派
                const msg = err?.response?.data?.message || '自動派車失敗，請稍後再試或改派車輛';
                alert(`❌ ${msg}`);
              }
            }
        
            editing.value = null;
            await loadData(); // 重新載入列表（更新駕駛/車牌/狀態）
           
          } catch (err) {
            console.error(err);
            alert("更新失敗");
          }
        };



        // 取消編輯
        const cancelEdit = () => {
          editing.value = null;
        };
        //狀態為完成審核不可編輯
                function canEdit(r) {
          if (String(r.status).trim() === "完成審核") return false;

          // 沒駕駛 → 可編輯
          if (!r.driverId) return true;

          // 沒有出發時間 → 不可編輯
          if (!r.useStartRaw) return false;

           const start = new Date(r.useStartRaw);
          if (isNaN(start)) return false;

          // 有駕駛 → 只能在出發前編輯
          return start > new Date();
        }


        // D: 刪除
                const removeRow = async (r) => {
        if (!confirm(`確定刪除申請單 #${r.applyId}？`)) return;
        try {
        await axios.delete(`/api/carApplications/${r.applyId}`);
        // 前端移除，或重新載入
        rows.value = rows.value.filter(x => x.applyId !== r.applyId);
        alert('刪除成功');
        } catch (err) {
        alert('刪除失敗');
        }
        };


       return {
          // 狀態 & 資料
          rows, loading, error,
          filters, drivers, applicants, cars,

          // 分頁
          page, pageSize, paged,

          // 前端篩選
          filtered,

          // 顯示用工具
            statusText, statusClass, canEdit,formatDateTime,

          //篩選操作
          reloadByDate, resetFilters,

          // 匯出
          exportCSV,

          // 異動
             showAppHistory,openAppHistory, currentAppId, appHistoryRows,

          //編輯
          editing, newStatus, editRow, confirmEdit, cancelEdit,

          //刪除
          removeRow
        };

          }
        })
          .component('pagination', window.Pagination)
         .mount('#app');
    </script>
</body>
