@{
    
    ViewData["Title"] = "執勤排班";
}

<link rel="stylesheet" href="/css/Driver/Schedule.css" />
<script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<div id="app" class="wrap" v-cloak>
    <div class="topbar">
        <h1>駕駛員管理 ＞ 輪值排班</h1>

    </div>

    <div class="grid">
        <!-- 左：主月曆 -->
        <section class="card">
            <div class="card-hd" style="gap:10px; align-items:center;">
                <!-- 上一個 -->
                <button class="btn" :disabled="isFirstWeek" @@click="prev">＜</button>

                <!-- 日期範圍：依照 viewMode 切換 -->
                <div>{{ headerText }}</div>

                <!-- 下一個 -->
                <button class="btn" :disabled="isLastWeek" @@click="next">＞</button>

                <!-- 每月 / 每週 / 每日 分段切換 -->
                <div class="seg" style="margin-left:12px;">
                    <button class="seg-btn" :class="{active: viewMode==='month'}" @@click ="viewMode='month'">每月</button>
                    <button class="seg-btn" :class="{active: viewMode==='week'}" @@click ="viewMode='week'">每週</button>
                    <button class="seg-btn" :class="{active: viewMode==='day'}" @@click ="viewMode='day'">每日</button>
                </div>

                <!-- 工具列 -->
                <div class="toolbar" style="margin-left:auto; display:flex; gap:6px;">
                    <button class="btn btn-warning" @@click ="openAgentModal">代理人</button>
                    <button class="btn btn-primary" @@click ="exportCSV">匯出班表</button>
                </div>
            </div>

            <!-- 代理人 Modal -->
            <div v-if="agentModalOpen" class="modal-mask">
                <div class="modal-container" style="max-width:900px;width:90%;">
                    <h3 class="modal-title">代理人員清單</h3>

                    <table class="agent-table" style="width:100%;border-collapse:collapse;">
                        <thead>
                            <tr>
                                <th>姓名</th>
                                <th>身分證</th>
                                <th>生日</th>
                                <th>聯絡地址</th>
                                <th>手機</th>
                                <th>緊急聯絡人</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="a in agents" :key="a.id">
                                <td>{{ a.name }}</td>
                                <td>{{ a.nationalId }}</td>
                                <td>{{ a.birthRoc }}</td>
                                <td>{{ a.contact }}</td>
                                <td>{{ a.mobile }}</td>
                                <td>{{ a.emergency }}</td>
                            </tr>
                            <tr v-if="!agents.length">
                                <td colspan="8" style="text-align:center;color:#999;padding:8px">目前沒有資料</td>
                            </tr>
                        </tbody>
                    </table>

                    <div class="modal-actions" style="margin-top:12px;text-align:right">
                        <button class="btn btn-primary" @@click="agentModalOpen=false">關閉</button>
                    </div>
                </div>
            </div>

            <div class="card-bd" v-if="viewMode==='month'">
                <!-- 月曆：星期標題 -->
                <div class="month-head">
                    <div v-for="w in ['週日','週一','週二','週三','週四','週五','週六']" :key="w">{{ w }}</div>
                </div>
                <!-- 6 週 x 7 天 -->
                <div class="month-grid">
                    <div v-for="(cell,idx) in monthGrid" :key="idx" class="day">
                        <div class="day-hd" :class="{today: cell.isToday}">
                            <span>{{ cell.d || '' }}</span>
                        </div>

                        <!-- 平日才顯示排班 pill（週一=1 ... 週五=5）-->
                        <template v-if="cell.isWeekday">
                            <div v-for="(txt,i) in linesFor(cell.jsDate)" :key="i"
                                 :class="i===2 ? 'help' : 'pill'">
                                {{ txt.text }}
                            </div>
                        </template>


                    </div>
                </div>
            </div>

            <!-- 週檢視：只排 Mon–Fri -->
            <div class="card-bd" v-else-if="viewMode==='week'">
                <div class="week-wrapper">
                    <!-- 左：時間軸 -->
                    <div class="time-col" ref="timeCol">
                        <div class="time-head"></div>
                        <div class="time-gutter">
                            <div v-for="h in hours" :key="h" class="time-tick">{{ h }}</div>
                        </div>
                    </div>

                    <!-- 右：週表 -->
                    <table class="table week-grid" ref="weekGrid">
                        <thead>
                            <tr>
                                <th v-for="(d,i) in weekDays" :key="i" :class="{ today: isSameDay(d.jsDate, current) }">
                                    {{ d.label }}
                                    <div class="help mono">{{ d.date }}</div>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- 08:00–11:30 -->
                            <tr class="band-row">
                                <td v-for="d in weekDays" :key="d.date + '-s1'">
                                    <div class="slot slot-dark">
                                        <div class="slot-time">08:00–11:30</div>
                                        <div class="slot-title">{{ (linesFor(d.jsDate)[0] || {}).text || '—' }}</div>
                                        <span class="cnt">{{ getDisp(d.jsDate,'slot1').length }}</span>
                                    </div>
                                    <div class="dot" v-for="u in getDisp(d.jsDate,'slot1')" :key="'s1-' + u.id">
                                        • {{ hhmm(u.start) }} {{ u.driverName || '—' }}
                                    </div>
                                </td>
                            </tr>

                            <!-- 11:30–13:00 -->
                            <tr class="band-row">
                                <td v-for="d in weekDays" :key="d.date + '-s2'">
                                    <div class="slot slot-dark">
                                        <div class="slot-time">11:30–13:00</div>
                                        <div class="slot-title">{{ (linesFor(d.jsDate)[1] || {}).text || '—' }}</div>
                                        <span class="cnt">{{ getDisp(d.jsDate,'slot2').length }}</span>
                                    </div>
                                    <div class="dot" v-for="u in getDisp(d.jsDate,'slot2')" :key="'s2-' + u.id">
                                        • {{ hhmm(u.start) }} {{ u.driverName || '—' }}
                                    </div>
                                </td>
                            </tr>

                            <!-- 13:00–17:00 -->
                            <tr class="band-row">
                                <td v-for="d in weekDays" :key="d.date + '-s3'">
                                    
                                    <div class="dot" v-for="u in getDisp(d.jsDate,'slot3')" :key="'s3-' + u.id">
                                        • {{ hhmm(u.start) }} {{ u.driverName || '—' }}
                                    </div>
                                </td>
                            </tr>

                            <!-- 17:00~ -->
                            <tr class="band-row">
                                <td v-for="d in weekDays" :key="d.date + '-s4'">
                                    <div class="slot slot-dark">
                                        <div class="slot-time">17:00~</div>
                                        <div class="slot-title">{{ (linesFor(d.jsDate)[2] || {}).text || '—' }}</div>
                                        <span class="cnt">{{ getDisp(d.jsDate,'slot4').length }}</span>
                                    </div>
                                    <div class="dot" v-for="u in getDisp(d.jsDate,'slot4')" :key="'s4-' + u.id">
                                        • {{ hhmm(u.start) }} {{ u.driverName || '—' }}
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- 每日檢視 -->
            <div class="card-bd day-view" v-else-if="viewMode==='day'">
                <table class="table">
                    <thead>
                        <tr>
                            <th style="width:80px">時段</th>
                            <th class="today">
                                {{ currentLabel }}
                                <span class="help mono">{{ currentWeekday }}</span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th>早・午</th>
                            <td>
                                <div class="pill pill-dark">
                                    {{ getLineCodeByDateShift(today,'AM') }}：{{ getDriverNameByDateShift(today,'AM') }}
                                </div>

                                <div v-for="u in dayRows.filter(x => x.shift==='AM')" :key="u.id">
                                    🚗 {{ hhmm(u.start) }}{{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>

                        <tr>
                            <th>午・晚</th>
                            <td>
                                <div class="pill">
                                    {{ getLineCodeByDateShift(today,'PM') }}：{{ getDriverNameByDateShift(today,'PM') }}
                                </div>
                                <div v-for="u in dayRows.filter(x => x.shift==='PM')" :key="u.id" class="help">
                                    🚗 {{ hhmm(u.start) }}{{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>

                        <tr>
                            <th>一般(1)</th>
                            <td>
                                <div class="pill">
                                    {{ getLineCodeByDateShift(today,'G1') }}：{{ getDriverNameByDateShift(today,'G1') }}
                                </div>
                                <div v-for="u in dayRows.filter(x => x.shift==='G1')" :key="u.id" class="help">
                                    🚗 {{ hhmm(u.start) }}{{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>

                        <tr>
                            <th>一般(2)</th>
                            <td>
                                <div class="pill">
                                    {{ getLineCodeByDateShift(today,'G2') }}：{{ getDriverNameByDateShift(today,'G2') }}
                                </div>
                                <div v-for="u in dayRows.filter(x => x.shift==='G2')" :key="u.id" class="help">
                                    🚗 {{ hhmm(u.start) }}{{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>

                        <tr>
                            <th>一般(3)</th>
                            <td>
                                <div class="pill">
                                    {{ getLineCodeByDateShift(today,'G3') }}：{{ getDriverNameByDateShift(today,'G3') }}
                                </div>
                                <div v-for="u in dayRows.filter(x => x.shift==='G3')" :key="u.id" class="help">
                                    🚗 {{ hhmm(u.start) }}{{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

        </section>



        <!-- 右：小月曆 + 班次安排 -->
        <aside class="stack">
            <div class="card">
                <div class="card-hd">114年 {{ month }} 月</div>
                <div class="card-bd">
                    <div class="mini-cal">
                        <div class="mini-head" v-for="w in ['日','一','二','三','四','五','六']" :key="w">{{ w }}</div>
                        <div v-for="n in firstWeekday-1" :key="'pad'+n"></div>
                        <div v-for="d in daysInMonth" :key="'d'+d" class="mini-cell" :class="{today: isToday(d)}">{{ d }}</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-hd">班次安排</div>
                <div class="card-bd">
                    <select v-model="selectedOption" class="week-select">
                        <option v-for="opt in optionList" :key="opt.value" :value="opt.value">
                            {{ opt.label }}
                        </option>
                    </select>

                    <div class="list" style="margin-top:10px">
                        <div class="row"
                             v-for="k in ['A','B','C','D','E']"
                             :key="k"
                             style="display:flex;align-items:center;margin-bottom:6px;">

                            <label style="flex:0 0 24px;font-weight:700;">{{ k }}：</label>

                            <select v-model="assign[k]" style="flex:1; padding:4px;">
                                <option :value="null">（未指定）</option>
                                <option v-for="p in allCandidates" :key="p.id" :value="p.id">
                                    {{ p.name }}（{{ p.role }}）
                                </option>
                            </select>
                        </div>
                    </div>




                    <div style="text-align:right; margin-top:10px;">
                        <button class="btn btn-primary"
                                @@click="applyAssignments">
                            確認
                        </button>
                    </div>
                </div>
            </div>
        </aside>
    </div>
</div>

<script>
    const { createApp, ref, reactive, computed, onMounted, watch, nextTick } = Vue;

    createApp({
      setup() {
        const today   = new Date();
        const current = ref(today)
        const year = ref(today.getFullYear())
        const month = ref(today.getMonth() + 1)
        const day = ref(today.getDate())
        const yearAD = computed(() => rocYear.value + 1911);

        const hours = ['08:00', '11:30–13:00', '17:00~'];
        const weekGrid = ref(null);
        const timeCol  = ref(null);

        // 從 API 取回的資料
        const drivers        = ref([]);   // 駕駛清單（driverId, driverName）
        const schedules      = ref([]);   // 班表清單（workDate, shift, lineCode, driverId, driverName）
        const agents         = ref([]);
        const agentModalOpen = ref(false);

        // 視圖與下拉
        const viewMode        = ref('week');  // 'month' | 'week' | 'day'
        const selectedOption  = ref(null);

        // 右側派工資料（你原本的功能保留）
        const dayDispatches   = ref([]);
        const weekDispatches  = ref({});

        // ==== 工具 ====
        const startOfDay = d => new Date(d.getFullYear(), d.getMonth(), d.getDate());
        const endOfDay   = d => new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59, 999);
        const toYMD = (d) => {
          const pad = n => String(n).padStart(2,'0');
          return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`;
        };
            function parseDateOnly(str) {
      if (!str) return null;
      const [y,m,d] = str.split("T")[0].split("-");
      return new Date(Number(y), Number(m)-1, Number(d));
    }

            // === schedules 載入後建快取 Map ===
    const scheduleMap = computed(() => {
      const map = {};
      for (const s of (schedules.value || [])) {
        const dt  = new Date(s.workDate ?? s.WorkDate);
        const key = `${toYMD(dt)}|${s.shift ?? s.Shift}`;
        map[key] = {
          lineCode:   s.lineCode   ?? s.LineCode,
          driverId:   s.driverId   ?? s.DriverId,
          driverName: s.driverName ?? s.DriverName
        };
      }
      return map;
    });
        const hhmm = (dt) => {
          const x = new Date(dt);
          const h = String(x.getHours()).padStart(2,'0');
          const m = String(x.getMinutes()).padStart(2,'0');
          return `${h}:${m}`;
        };
        const minuteOfDay = (dt) => {
          const x = new Date(dt);
          return x.getHours()*60 + x.getMinutes();
        };
        const isSameDay = (a, b) => {
          const da = new Date(a);
          const db = new Date(b);
          return da.getFullYear()===db.getFullYear() && da.getMonth()===db.getMonth() && da.getDate()===db.getDate();
        };
         // 民國年
    const rocYear = computed(() => current.value.getFullYear() - 1911)

        const currentLabel = computed(() => {
      const d = current.value
      if (!d) return ''
      return `${d.getMonth() + 1}/${d.getDate()}`
    })
    const currentWeekday = computed(() => {
      const d = current.value
      if (!d) return ''
      return ['日','一','二','三','四','五','六'][d.getDay()]
    })


    // 月顯示
    const monthText = computed(() =>
      `${rocYear.value} 年 ${current.value.getMonth() + 1} 月`
    )

            // 當週起迄
    const weekStart = computed(() => {
      const d = new Date(year.value, month.value - 1, day.value)
      const start = new Date(d)
      start.setDate(d.getDate() - d.getDay() + 1) // 週一
      return start
    })

    const weekEnd = computed(() => {
      const start = weekStart.value
      const end = new Date(start)
      end.setDate(start.getDate() + 6) // 到週日
      return end
    })
        // ==== 週切片 ====
        const weeksOfMonth = computed(() => {
          const res = [];
          const year = yearAD.value;
          const m = month.value - 1;
          let d = new Date(year, m, 1);
          const dow = (d.getDay() + 6) % 7; // 以週一為起點
          d.setDate(d.getDate() - dow);

          while (true) {
            const start = startOfDay(d);
            const fri = new Date(start); fri.setDate(fri.getDate() + 4);
            const end = endOfDay(fri); // 週五 23:59:59.999

            if (start.getMonth() === m || end.getMonth() === m) res.push([start, end]);
            d.setDate(d.getDate() + 7);
            if (d.getMonth() > m && d.getDate() >= 7) break;
          }
          return res;
        });

        // ==== 右側「班次安排」：A~E 對應司機（臨時覆寫）
        const assign = reactive({ A: null, B: null, C: null, D: null, E: null });

        // 代理人/駕駛合併下拉
        const allCandidates = computed(() => {
          return [
            ...(drivers.value || []).map(d => ({ id: d.driverId, name: d.driverName, role: "駕駛" })),
            ...(agents.value  || []).map(a => ({ id: a.driverId, name: a.name, role: "代理人" }))
          ];
        });

        // ==== 載資料 ====

        async function loadDriversAvailable() {
      try {
        let start, end;

        if (viewMode.value === 'day') {
          // 🔹每日模式：單日
          const date = current.value.toISOString().slice(0, 10);
          start = end = date;

        } else if (viewMode.value === 'week') {
          // 🔹每週模式：週一到週日
          start = weekStart.value.toISOString().slice(0, 10);
          end = weekEnd.value.toISOString().slice(0, 10);

        } else if (viewMode.value === 'month') {
          // 🔹每月模式：整月
          const y = yearAD.value;
          const m = month.value;
          const monthStart = new Date(y, m - 1, 1);
          const monthEnd = new Date(y, m, 0); // 當月最後一天
          start = monthStart.toISOString().slice(0, 10);
          end = monthEnd.toISOString().slice(0, 10);
        }

        const res = await axios.get('/api/Drivers/Available', { params: { start, end } });
        drivers.value = res.data || [];
      } catch (err) {
        console.error("讀取駕駛失敗:", err);
        drivers.value = [];
      }
    }


        // 載入代理人
        async function loadAgents() {
          try {
            const res = await axios.get('/api/Agents/profiles');
            agents.value = res.data || [];
          } catch { agents.value = []; }
        }
            // 載入班表
        async function loadSchedules() {
          try {
            const res = await axios.get('/api/Drivers/Schedule/Events', { params: { year: yearAD.value, month: month.value }});
            schedules.value = Array.isArray(res.data) ? res.data : [];
            console.log("=== SCHEDULES ===", schedules.value);  

          } catch (err) {
            console.error("讀取班表失敗:", err);
            schedules.value = [];
          }
        }

        // ==== 依日期/班別/Line 取名字 ====
               function findSchedule(date, shift) {
      if (!date) return null;
      const d = new Date(date);
      const key = `${toYMD(d)}|${shift}`;
      const hit = scheduleMap.value[key];
      return hit
        ? { lineCode: hit.lineCode, driverId: hit.driverId, driverName: hit.driverName }
        : null;
    }
        // ==== 依日期/班別 取 LineCode / DriverName ====
    function getLineCodeByDateShift(date, shift) {
      const hit = findSchedule(date, shift);
      return hit ? hit.lineCode : '—';
    }
        // ==== 依日期/班別 取 DriverName ====
    function getDriverNameByDateShift(date, shift) {
      const hit = findSchedule(date, shift);
      if (!hit) return '—';
      if (hit.driverName) return hit.driverName;
      const drv = (drivers.value || []).find(p => p.driverId === hit.driverId);
      return drv ? drv.driverName : '—';
    }

      function getDriverNameByLine(date, lineCode) {
          const dY = date.getFullYear(), dM = date.getMonth(), dD = date.getDate();
          // 優先找 AM，找不到就任一筆
          const candidates = schedules.value.filter(s => {
            const dt = new Date(s.workDate);
            return dt.getFullYear()===dY && dt.getMonth()===dM && dt.getDate()===dD && s.lineCode===lineCode;
          });
          const am = candidates.find(c => c.shift==='AM');
          const chosen = am || candidates[0];
          if (!chosen) return '—';
          if (chosen.driverName) return chosen.driverName;
          const drv = drivers.value.find(p => p.driverId === chosen.driverId);
          return drv ? drv.driverName : '—';
        }

        // ==== 月/週畫面左側兩個 pill + 一個「長差」行：動態算 ====
        function linesFor(dateLike) {
          const d = new Date(dateLike);
          const wd = d.getDay(); // 0=Sun..6=Sat
          if (wd === 0 || wd === 6) return []; // 週末不顯示

          // 依當天實際資料：AM/PM 的 Line 與人名
          const amHit = findSchedule(d, 'AM');
          const pmHit = findSchedule(d, 'PM');

          const amText = amHit
            ? `${amHit.lineCode} - ${getDriverNameByDateShift(d,'AM')}（早、午）`
            : `—`;

          const pmText = pmHit
            ? `${pmHit.lineCode} - ${getDriverNameByDateShift(d,'PM')}（午、晚）`
            : `—`;

          // 「長差第一順位」：依你給的固定規則（Mon→E、Tue→B、Wed→D、Thu→A、Fri→C）
          const longByWeekday = { 1:'E', 2:'B', 3:'D', 4:'A', 5:'C' };
          const longLine = longByWeekday[wd] || null;
          const longName = longLine ? getDriverNameByLine(d, longLine) : '—';
          const longText = longLine ? `長差第一順位：${longLine} - ${longName}` : '';

          return [
            { type:'am',   text: amText },
            { type:'pm',   text: pmText },
            { type:'long', text: longText }
          ];
        }

        // ==== 右側下拉：根據目前日期把 A~E 先帶成「當天各 Line 的臨時覆寫 DriverId」 ====
        function initTodayAssign() {
          const y = today.getFullYear(), m = today.getMonth(), d = today.getDate();
          const rows = schedules.value.filter(s => {
            const dt = new Date(s.workDate);
            return dt.getFullYear()===y && dt.getMonth()===m && dt.getDate()===d;
          });
          // 以當天資料初始化（若某 Line 沒覆寫則為 null）
          const firstByLine = {};
          for (const r of rows) {
            if (firstByLine[r.lineCode] == null && r.driverId != null) firstByLine[r.lineCode] = r.driverId;
          }
          assign.A = firstByLine['A'] ?? null;
          assign.B = firstByLine['B'] ?? null;
          assign.C = firstByLine['C'] ?? null;
          assign.D = firstByLine['D'] ?? null;
          assign.E = firstByLine['E'] ?? null;
        }

        // 週顯示：取當週一 ~ 週日
    const weekText = computed(() => {
      const d = new Date(current.value)
      const day = d.getDay() === 0 ? 7 : d.getDay() // 週日要變 7
      const start = new Date(d)
      start.setDate(d.getDate() - (day - 1)) // 週一
      const end = new Date(start)
      end.setDate(start.getDate() + 6) // 週日

      const fmt = (date) =>
        `${date.getFullYear() - 1911}/${String(date.getMonth() + 1).padStart(2, "0")}/${String(date.getDate()).padStart(2, "0")}`

      return `${fmt(start)} - ${fmt(end)}`
    })

    // 日顯示
    const dayText = computed(() => {
      return `${rocYear.value}/${String(current.value.getMonth() + 1).padStart(2, "0")}/${String(current.value.getDate()).padStart(2, "0")}`
    })

    // 顯示的文字依 viewMode 切換
    const headerText = computed(() => {
      if (viewMode.value === "month") return monthText.value
      if (viewMode.value === "week") return weekText.value
      if (viewMode.value === "day") return dayText.value
      return ""
    })

        // ==== 左右切換 ====
          // 上一頁
              async function prev() {
      const d = new Date(current.value)
      if (viewMode.value === "month") {
        d.setMonth(d.getMonth() - 1)
        current.value = d
        await loadSchedules()
        selectedOption.value = month.value   //  重設月份
      } else if (viewMode.value === "week") {
        d.setDate(d.getDate() - 7)
        current.value = d
        selectedOption.value = findWeekIndexOf(d)  //  重設週數
      } else if (viewMode.value === "day") {
        d.setDate(d.getDate() - 1)
        current.value = d
        selectedOption.value = d.getDate()   //  重設日期
      }
    }

    async function next() {
      const d = new Date(current.value)
      if (viewMode.value === "month") {
        d.setMonth(d.getMonth() + 1)
        current.value = d
        await loadSchedules()
        selectedOption.value = month.value   //  重設月份
      } else if (viewMode.value === "week") {
        d.setDate(d.getDate() + 7)
        current.value = d
        selectedOption.value = findWeekIndexOf(d)  //  重設週數
      } else if (viewMode.value === "day") {
        d.setDate(d.getDate() + 1)
        current.value = d
        selectedOption.value = d.getDate()   //  重設日期
      }
    }




        const isFirstWeek = computed(() =>
      viewMode.value === 'week' && Number(selectedOption.value || 0) <= 0
    );
    const isLastWeek = computed(() =>
      viewMode.value === 'week' && Number(selectedOption.value || 0) >= (weeksOfMonth.value.length - 1)
    );


        const isWeekdayDate = (d) => (d.getDay() >= 1 && d.getDay() <= 5);

        function buildTargetDates() {
          const y = yearAD.value;

          if (viewMode.value === 'month') {
            const m = Number(selectedOption.value || month.value);
            const dim = new Date(y, m, 0).getDate();
            const dates = [];
            for (let d = 1; d <= dim; d++) {
              const dt = new Date(y, m - 1, d);
              if (isWeekdayDate(dt)) dates.push(dt);
            }
            return dates;
          }

          if (viewMode.value === 'week') {
            const idx = Number(selectedOption.value ?? 0);
            const w = weeksOfMonth.value[idx];
            if (!w) return [];
            const dates = [];
            let d = new Date(w[0]); // 週一
            for (let i = 0; i < 5; i++) { dates.push(new Date(d)); d.setDate(d.getDate() + 1); }
            return dates;
          }

          // day
          const dd = Number(selectedOption.value || today.getDate());
          const dt = new Date(y, month.value - 1, dd);
          return isWeekdayDate(dt) ? [dt] : [];
        }

        // 送出「批次設定」→ 後端會按照每一日期與班別的 LineCode 把 DriverId 覆寫到 Schedules
        const toDriverId = (v) => {
          if (v == null) return null;
          const n = Number(v);
          return Number.isFinite(n) ? n : null;
        };
        async function applyAssignments() {
          const dates = buildTargetDates();
          if (!dates.length) { alert('沒有可套用的日期（可能是週末/假日）'); return; }

          const payload = {
            dates: dates.map(d => toYMD(d)),
            assign: {
              A: toDriverId(assign.A),
              B: toDriverId(assign.B),
              C: toDriverId(assign.C),
              D: toDriverId(assign.D),
              E: toDriverId(assign.E),
            }
          };

          try {
            const res = await axios.post('/api/Drivers/Schedule/BulkSet', payload);
            const changes = Array.isArray(res.data) ? res.data : [];
            if (changes.length) {
              const msg = changes.map(c => {
                const date  = c.Date  ?? c.date  ?? '';
                const shift = c.Shift ?? c.shift ?? '';
                const line  = c.LineCode ?? c.lineCode ?? '';
                const oldN  = c.OldDriver ?? c.oldDriver ?? '—';
                const newN  = c.NewDriver ?? c.newDriver ?? '—';
                return `${date} [${shift}] ${line}：${oldN} → ${newN}`;
              }).join('\n');

              alert('已修改班表：\n' + msg);
            } else {
              alert('沒有任何變更');
            }

            await loadSchedules();
          } catch (err) {
            const status = err?.response?.status;
            const data   = err?.response?.data;
            console.error('[BulkSet] failed:', status, data, err);
            alert(`批次套用失敗：${status ?? ''} ${data ?? ''}`);
          }
        }

        // 週檢視同步
        function syncWeekGutter() {
          const tbl  = weekGrid.value;
          const col  = timeCol.value;
          if (!tbl || !col) return;
          const head = col.querySelector('.time-head');
          const theadH = tbl.tHead ? tbl.tHead.offsetHeight : 0;
          if (head) head.style.height = theadH + 'px';
        }

        // 週索引
        const findWeekIndexOf = (d) => {
          const t0 = new Date(d.getFullYear(), d.getMonth(), d.getDate()).getTime();
          const w = weeksOfMonth.value;
          for (let i = 0; i < w.length; i++) if (t0 >= w[i][0].getTime() && t0 <= w[i][1].getTime()) return i;
          return 0;
        };
        const optionList = computed(() => {
          if (viewMode.value === 'month') {
            return Array.from({ length: 12 }, (_, i) => ({ value: i + 1, label: ` ${i + 1} 月` }));
          }
          if (viewMode.value === 'week') {
            return weeksOfMonth.value.map((_, idx) => ({ value: idx, label: ` ${month.value} 月 第 ${idx + 1} 週` }));
          }
          if (viewMode.value === 'day') {
            return Array.from({ length: daysInMonth.value }, (_, i) => ({ value: i + 1, label: ` ${month.value} / ${i + 1} ` }));
          }
          return [];
        });



            // 用 selectedOption 決定週數
    const weekDays = computed(() => {
      if (viewMode.value !== 'week') return [];
      const idx = Number(selectedOption.value ?? 0);   // 下拉選的週次 index
      const w = weeksOfMonth.value[idx];
      if (!w) return [];
      const days = [];
      let d = new Date(w[0]); // 週一
      for (let i = 0; i < 5; i++) {
        days.push({
          label: ['週一','週二','週三','週四','週五'][i],
          date: `${d.getMonth() + 1}/${d.getDate()}`,
          jsDate: new Date(d)
        });
        d.setDate(d.getDate() + 1);
      }
      return days;
    });


        // 小月曆 / 月格
        const daysInMonth   = computed(() => new Date(yearAD.value, month.value, 0).getDate());
        const firstOfMonth  = computed(() => new Date(yearAD.value, month.value - 1, 1));
        const firstWeekday  = computed(() => firstOfMonth.value.getDay() === 0 ? 7 : firstOfMonth.value.getDay());
        const isToday = d => (yearAD.value === today.getFullYear() && month.value === today.getMonth() + 1 && d === today.getDate());
        const monthGrid = computed(() => {
          const arr = [];
          const dim = daysInMonth.value;
          const startDay = firstOfMonth.value.getDay(); // 0=Sun..6=Sat
          for (let i = 0; i < startDay; i++) arr.push({ d:'', isToday:false, isWeekday:false, jsDate:null });
          for (let d = 1; d <= dim; d++) {
            const jsDate = new Date(yearAD.value, month.value-1, d);
            const dow = jsDate.getDay();
            arr.push({ d, jsDate, isToday: isSameDay(jsDate, today), isWeekday: dow >= 1 && dow <= 5 });
          }
          while (arr.length < 42) arr.push({ d:'', isToday:false, isWeekday:false, jsDate:null });
          return arr;
        });

        // 週派工
    function getDisp(jsDate, bucket) {
      const key  = toYMD(jsDate)
      const list = (weekDispatches.value[key] || [])
        .slice()
        .sort((a, b) => new Date(a.start) - new Date(b.start))

      // 分鐘換算用
      const minuteOfDay = (dt) => {
        const x = new Date(dt)
        return x.getHours() * 60 + x.getMinutes()
      }

      // 新的 4 個區段：
      // slot1: 08:00–11:30
      // slot2: 11:30–13:00
      // slot3: 13:00–17:00
      // slot4: >= 17:00
      if (typeof bucket === 'string') {
        switch (bucket) {
          case 'slot1': { // 08:00–11:30
            return list.filter(u => {
              const m = minuteOfDay(u.start)
              return m >= 480 && m < 690   // 08:00=480, 11:30=690
            })
          }
          case 'slot2': { // 11:30–13:00
            return list.filter(u => {
              const m = minuteOfDay(u.start)
              return m >= 690 && m < 780   // 13:00=780
            })
          }
          case 'slot3': { // 13:00–17:00
            return list.filter(u => {
              const m = minuteOfDay(u.start)
              return m >= 780 && m < 1020  // 17:00=1020
            })
          }
          case 'slot4': { // 17:00~
            return list.filter(u => minuteOfDay(u.start) >= 1020)
          }
          default:
            return []
        }
      }

      return []
    }
                    async function loadDayDispatches() {
      try {
        const res = await axios.get('/api/Drivers/Schedule/DayDispatches', {
         params: { date: current.value.toISOString().slice(0,10) } 
        });
        dayDispatches.value = Array.isArray(res.data) ? res.data : []; 
      } catch (err) {
        console.error("讀取當日派車失敗:", err);
        dayDispatches.value = [];  
      }
    }

        async function loadWeekDispatches(){
          const days = weekDays.value || [];
          if (!days.length) return;
          const reqs = days.map(d => {
            const date = toYMD(d.jsDate);
            return axios.get('/api/Drivers/Schedule/DayDispatches', { params: { date } })
              .then(r => ({ date, rows: r.data || [] }))
              .catch(() => ({ date, rows: [] }));
          });
          const all = await Promise.all(reqs);
          const map = {}; for (const it of all) map[it.date] = it.rows;
          weekDispatches.value = map;
        }

        // 右側代理人
        async function openAgentModal() {
          try {
            const res = await axios.get('/api/agents/profiles');
            agents.value = res.data;
            agentModalOpen.value = true;
          } catch (err) {
            console.error("讀取代理人失敗:", err);
            alert("無法載入代理人資料");
          }
        }

     function syncSelection() {
      if (viewMode.value === 'month') {
        selectedOption.value = month.value;
      } else if (viewMode.value === 'week') {
        selectedOption.value = findWeekIndexOf(current.value);
      } else { // day
        selectedOption.value = current.value.getDate();
      }
    }

         // --- 當前日期變動 ---
       watch(current, (d) => {
      year.value  = d.getFullYear()
      month.value = d.getMonth() + 1
      day.value   = d.getDate()

      if (viewMode.value === 'month') {
        selectedOption.value = month.value
        loadSchedules()   // ⬅️ 這裡也補上
      } else if (viewMode.value === 'week') {
        selectedOption.value = findWeekIndexOf(d)
        loadWeekDispatches()
      } else if (viewMode.value === 'day') {
        selectedOption.value = d.getDate()
        loadDayDispatches()
        loadDriversAvailable();
      }
    })


    // 切換視圖模式：日 -> 用週API
    watch(viewMode, async (m) => {
      if (m === 'month') {
        selectedOption.value = month.value
        await loadSchedules()
      } else if (m === 'week') {
        selectedOption.value = findWeekIndexOf(current.value)
        await loadWeekDispatches()
      } else if (m === 'day') {
            const today = new Date()
        current.value = today
        selectedOption.value = today.getDate()
        await loadDayDispatches()
      }
    })

    // current 改變時：在「每日」模式也確保週資料就緒
    watch(current, async (d) => {
      year.value  = d.getFullYear()
      month.value = d.getMonth() + 1
      day.value   = d.getDate()

      if (viewMode.value === 'month') {
        selectedOption.value = month.value
        await loadSchedules()
      } else if (viewMode.value === 'week') {
        selectedOption.value = findWeekIndexOf(d)
        await loadWeekDispatches()
      } else if (viewMode.value === 'day') {
        selectedOption.value = d.getDate()
        const key = toYMD(d)
        if (!weekDispatches.value[key]) await loadWeekDispatches()
      }
    })

        const dayRows = computed(() => {
      const key = toYMD(current.value)
      return weekDispatches.value[key] || []
    })


    // --- 下拉選擇改變時 ---
    watch(selectedOption, async (val) => {
      if (viewMode.value === 'month') {
        const m = Number(val);
        if (m >= 1 && m <= 12) {
          month.value   = m;
          await loadSchedules();
        }
      } else if (viewMode.value === 'week') {
        const idx = Number(val);
        const w = weeksOfMonth.value[idx];
        if (w) {
          current.value = new Date(w[0]); // 切到該週的週一
          await loadWeekDispatches();
        }
      } else if (viewMode.value === 'day') {
        const dd = Number(val);
        current.value = new Date(yearAD.value, month.value - 1, dd);
        await loadSchedules();
        await loadDayDispatches();
      }
    });


    // --- 週畫面同步表頭高度 ---
    watch([viewMode, weekDays, schedules, weekDispatches], () => {
      if (viewMode.value === 'week') nextTick(syncWeekGutter)
    })


        // 防止 A~E 選到重複司機
        watch(assign, (newVal) => {
          const chosen = Object.values(newVal).filter(v => typeof v === 'number');
          const seen = new Set();
          for (const k of ['A','B','C','D','E']) {
            const id = newVal[k];
            if (id == null || typeof id !== 'number') continue;
            if (seen.has(id)) {
              const available = drivers.value.map(d => d.driverId).filter(did => !chosen.includes(did));
              assign[k] = available.length ? available[0] : null;
            } else seen.add(id);
          }
        }, { deep: true });


                  function downloadCSV(csv, filename) {
      // 加上 BOM 避免 Excel 亂碼
      const blob = new Blob(["\uFEFF" + csv], { type: "text/csv;charset=utf-8;" });
      const url = URL.createObjectURL(blob);

      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", filename);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }

    function exportMonthCSV() {
      let csv = "日期,班別,線別,駕駛\n";
      (schedules.value || []).forEach(s => {
        const dt = new Date(s.workDate ?? s.WorkDate);
        const date = dt.toISOString().slice(0, 10);
        const shift = s.shift ?? s.Shift;
        const line  = s.lineCode ?? s.LineCode;
        const name  = s.driverName ?? s.DriverName ?? "—";
        csv += `${date},${shift},${line},${name}\n`;
      });
      downloadCSV(csv, "Schedule-Month.csv");
    }

    function exportWeekCSV() {
      let csv = "日期,時間,駕駛\n";
      const days = weekDays.value || [];
      days.forEach(d => {
        const key = toYMD(d.jsDate);
        const rows = weekDispatches.value[key] || [];
        rows.forEach(r => {
          csv += `${d.date},${hhmm(r.start)},${r.driverName || '—'}\n`;
        });
      });
      downloadCSV(csv, "Schedule-Week.csv");
    }

    function exportDayCSV() {
      let csv = "日期,時間,駕駛\n";
      const key = toYMD(current.value);
      (dayRows.value || []).forEach(r => {
        csv += `${key},${hhmm(r.start)},${r.driverName || '—'}\n`;
      });
      downloadCSV(csv, "Schedule-Day.csv");
    }

    // 匯出入口
    function exportCSV() {
  let csv = "日期,時段,線別,駕駛,額外派工\n";

  if (viewMode.value === "month") {
    // 月檢視：列整月的班表
    (schedules.value || []).forEach(s => {
      const dt = new Date(s.workDate ?? s.WorkDate);
      const date = dt.toISOString().slice(0, 10);
      const shift = s.shift ?? s.Shift;
      const line  = s.lineCode ?? s.LineCode;
      const name  = s.driverName ?? s.DriverName ?? "—";
      csv += `${date},${shift},${line},${name},\n`;
    });

    downloadCSV(csv, "Schedule-Month.csv");

  } else if (viewMode.value === "week") {
    // 週檢視：每天 AM/PM/長差 + 點狀派工
    const days = weekDays.value || [];
    days.forEach(d => {
      const dateStr = toYMD(d.jsDate);
      const lines = linesFor(d.jsDate);

      // 固定三個班表
      lines.forEach(l => {
        if (!l.text) return;
        const [lineCode, driver] = l.text.split(" - ");
        csv += `${dateStr},${l.type},${lineCode || ''},${driver || ''},\n`;
      });

      // 點狀派工
      const rows = weekDispatches.value[dateStr] || [];
      rows.forEach(r => {
        csv += `${dateStr},派工,,${r.driverName || '—'},${hhmm(r.start)}\n`;
      });
    });

    downloadCSV(csv, "Schedule-Week.csv");

  } else if (viewMode.value === "day") {
    // 日檢視：當天 AM/PM/長差 + 派工
    const dateStr = toYMD(current.value);
    const lines = linesFor(current.value);

    lines.forEach(l => {
      if (!l.text) return;
      const [lineCode, driver] = l.text.split(" - ");
      csv += `${dateStr},${l.type},${lineCode || ''},${driver || ''},\n`;
    });

    (dayRows.value || []).forEach(r => {
      csv += `${dateStr},派工,,${r.driverName || '—'},${hhmm(r.start)}\n`;
    });

    downloadCSV(csv, "Schedule-Day.csv");
  }
}





        // 初始載入
    onMounted(async () => {
      await loadDriversAvailable();
      await loadAgents()
      await loadSchedules()
      await loadDayDispatches()

      initTodayAssign()

      await nextTick()
      nextTick(syncWeekGutter)
      window.addEventListener('resize', syncWeekGutter)

      // 🔑 初始化：只在第一次載入時給一個預設值
      if (viewMode.value === 'month') {
        selectedOption.value = month.value
      } else if (viewMode.value === 'week') {
        await nextTick()
        selectedOption.value = findWeekIndexOf(current.value) // 今天所在的週
      } else if (viewMode.value === 'day') {
        selectedOption.value = current.value.getDate()
      }
    })

        // 週畫面同步表頭高度
        watch([viewMode, weekDays, schedules, weekDispatches], () => {
          if (viewMode.value === 'week') nextTick(syncWeekGutter);
        });


      return {
        // 基本資料
        today, rocYear, monthText, year, month, day, yearAD, viewMode, weekStart, weekEnd, currentLabel, currentWeekday,      

        // 資料清單
        drivers, schedules, agents, agentModalOpen,       

        // 介面控制
        optionList, selectedOption, weeksOfMonth, weekDays, hours, syncSelection, dayRows,        

        // 月曆格線
        daysInMonth, firstWeekday, isToday, monthGrid,        

        // 參考元素
        weekGrid, timeCol, dayDispatches, weekDispatches, headerText,     

        // 功能方法
        prev, next, openAgentModal, loadSchedules, loadDayDispatches,
        linesFor, getDisp, hhmm, toYMD, isFirstWeek, isLastWeek,
        getDriverNameByDateShift, getLineCodeByDateShift,     

        // 右側面板
        assign, allCandidates, applyAssignments, loadDriversAvailable,        

        // 工具輔助
        isSameDay, exportCSV
      };

      }
    }).mount('#app');
</script>
