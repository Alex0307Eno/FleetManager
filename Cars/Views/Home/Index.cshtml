
<head>

    <title>公務車派車系統</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="/css/Home/Index.css" rel="stylesheet" />


    <!-- Vue / axios -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <!-- 後端注入 Google Maps API 金鑰 -->
    <script>
        window.GOOGLE_MAPS_KEY = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.GoogleMapsKey ?? ""));
    </script>
</head>

<body>
    <main id="dashboard" class="wrap" v-cloak>
        <div class="grid">
            <!-- 左側：兩種視圖切換 -->
            <section>
                <!-- A. 排班視圖 -->
                <div v-if="viewMode==='schedule'" class="card">
                    <div class="card-hd" style="display:flex; justify-content:space-between; align-items:center;">
                        <!-- 左邊固定 -->
                        <div>今日排班情形</div>

                        <!-- 右邊日期 + 時間 -->
                        <div id="dateTime"></div>
                    </div>

                    <div class="card-bd">
                        <table>
                            <thead>
                                <tr>
                                    <th>駕駛人</th>
                                    <th>排班狀態</th>
                                    <th>目前任務</th>
                                    <th>組室</th>
                                    <th>申請人</th>
                                    <th>人數</th>
                                    <th>累計行駛里程</th>
                                    <th>目前位置</th>
                                    <th>車輛</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="(s, idx) in scheduleTable" :key="s.key">
                                    <td>{{ s.driverName || '-' }}</td>
                                    <td><span class="pill" :class="s.shiftClass">{{ s.shiftLabel }}</span></td>
                                    <td class="col-route">{{ s.arrivalDisplay || '無任務' }}</td>
                                    <td>{{ s.applicantDept }}</td>
                                    <td>{{ s.applicantName || '-' }}</td>
                                    <td>{{ s.passengerCount ?? '-' }}</td>
                                    <td>{{ s.tripDistance ?? '-' }}</td>
                                    <td>
                                        <button class="btn" style="padding:2px 6px" title="查看即時定位" @@click.stop.prevent="openMap(s)">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 384 512" aria-hidden="true">
                                                <path fill="red" d="M192 0C86 0 0 86 0 192c0 96 144 320 192 320s192-224 192-320C384 86 298 0 192 0z" />
                                                <circle cx="192" cy="192" r="48" fill="black" />
                                            </svg>
                                        </button>
                                    </td>
                                    <td>{{ s.plateNo ? s.plateNo.replace(/\D/g, '') : '-' }}</td>
                                </tr>
                               
                                <tr v-if="!schedules.length">
                                    <td colspan="9" style="text-align:center;color:#999;padding:8px">今天沒有排班資料</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- 左下角：駕駛目前狀態 -->
                    <div class="card" style="margin-top:12px;">
                        <div class="card-hd" style="display:flex;align-items:center;justify-content:space-between;">
                            <div>駕駛目前狀態</div>
                            
                            
                                <button class="btn" style="background:#ffb020;border-color:#ffb020;color:#111827;font-weight:700"
                                @@click="enterMyLocationView">
                                    車輛現況
                                </button>
                            
                        </div>
                        <div class="card-bd no-pad">
                            <table class="table-flat">
                                <thead>
                                    <tr>
                                        <th style="width:60px;">順序</th>
                                        <th style="width:120px;">駕駛員</th>
                                        <th style="width:110px;">今日值班</th>
                                        <th style="width:160px;">目前狀態</th>
                                        <th>當前任務</th>
                                        <th style="width:120px;">預計回來時間</th>
                                        <th style="width:150px;">最早可出車時間</th>
                                        <th style="width:100px;">出勤狀況</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="(d,idx) in driverStatus" :key="d.key">
                                        <td class="mono">{{ idx+1 }}</td>
                                        <td>{{ d.driverName }}</td>
                                        <td><span class="pill" :class="d.shiftClass">{{ d.shiftLabel }}</span></td>

                                        <td>
                                            <span class="status-dot" :class="d.stateDotClass"></span>
                                            {{ d.stateText }}
                                            <span v-if="d.stateText==='休息中' && d.restRemainMinutes > 0" class="rest-hint">
                                                （<span style="color:red">剩 {{ d.restRemainMinutes }} 分鐘</span>）
                                            </span>
                                        </td>
                                        <td class="mono">{{ d.taskWindow || '無' }}</td>
                                        <td class="mono">{{ d.useEnd || '-' }}</td>
                                        <td class="mono">{{ d.earliestOut || (d.stateText==='待命中' ? '即時可用' : '-') }}</td>
                                        <td>{{ d.attendance }}</td>
                                    </tr>
                                    <tr v-if="driverStatus.length===0">
                                        <td colspan="8" style="text-align:center;color:#94a3b8;padding:16px;">目前沒有資料</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>


                </div>

                <!-- B. 駕駛位置（五張地圖：上3下2、含車子 Marker） -->
                <div v-else class="card">
                   
                    
                        <div class="card-hd">
                            <div>目前各車輛位置</div>
                            <div style="display:flex;gap:8px;align-items:center">

                                <button class="btn" @@click="exitMyLocationView">返回</button>
                            </div>
                        </div>
                    

                    <div v-if="locError" class="card-bd" style="color:#b91c1c;">⚠️ {{ locError }}</div>

                    <!-- 上排 3 張 -->
                    <div class="map-grid">
                        <div v-for="(card, idx) in driverCards.slice(0,3)" :key="card.key" class="map-cell">
                            <div class="gmap"
                                 :id="'gmap_'+idx"
                                 :class="{ 'dimmed': card.statusType !== 'on' }"></div>
                            <div class="badge-row">
                                <div class="badge-dark">
                                    <template v-if="card.statusType === 'on'">
                                        {{ (card.plate || '—') + ' ' + (card.driver || '') }}
                                    </template>
                                    <template v-else-if="card.statusType === 'break'">
                                        {{ card.driver || '—' }}
                                    </template>
                                    <template v-else-if="card.statusType === 'idle'">
                                        {{ card.plate || '—' }}
                                    </template>
                                    <template v-else>
                                        —
                                    </template>
                                </div>


                                <div class="badge-pill"
                                     :class="{
                                      'badge-on': card.statusType === 'on',
                                      'badge-idle': card.statusType === 'idle',
                                      'badge-break': card.statusType === 'break'
                                    }">
                                    {{ card.statusText }}
                                </div>
                            </div>
                        </div>

                        <!-- 下排 2 張 -->
                        <div class="map-grid-row2">
                            <div v-for="(card, i) in driverCards.slice(3,5)" :key="card.key" class="map-cell">
                                <div class="gmap"
                                     :id="'gmap_'+(i+3)"
                                     :class="{ 'dimmed': card.statusType !== 'on' }"></div>
                                <div class="badge-row">
                                    <div class="badge-dark">
                                        <template v-if="card.statusType === 'on'">
                                            {{ (card.plate || '—') + ' ' + (card.driver || '') }}
                                        </template>
                                        <template v-else-if="card.statusType === 'break'">
                                            {{ card.driver || '—' }}
                                        </template>
                                        <template v-else-if="card.statusType === 'idle'">
                                            {{ card.plate || '—' }}
                                        </template>
                                        <template v-else>
                                            —
                                        </template>
                                    </div>


                                    <div class="badge-pill"
                                         :class="{
                                         'badge-on': card.statusType === 'on',
                                         'badge-idle': card.statusType === 'idle',
                                         'badge-break': card.statusType === 'break'
                                       }">
                                        {{ card.statusText }}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- 右側資訊 -->
            <aside class="stack">
                <div class="card">
                    <div class="card-hd">今日未完成任務</div>
                    <table style="width:100%;border-collapse:collapse;">
                        <thead>
                            <tr>
                                <th style="text-align:left;padding:6px 10px;border-bottom:1px solid var(--border);">駕駛人</th>
                                <th style="text-align:left;padding:6px 10px;border-bottom:1px solid var(--border);">待辦任務</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="u in unfinished" :key="u.driverName + '_' + u.useTime">
                                <td style="padding:8px 10px">{{ u.driverName }}</td>
                                <td style="padding:8px 10px" class="mono">
                                    {{ (u.useTime || '').split('-')[1] || u.useTime }} {{ (u.route || '').split('-').slice(-1)[0] }}
                                </td>
                            </tr>
                            <tr v-if="unfinished.length === 0">
                                <td colspan="2" style="text-align:center;color:#999;padding:10px">目前沒有未完成任務</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="card">
                    <div class="card-hd">今日待審核派車申請</div>
                    <div class="card-bd">
                        <table style="border-collapse:collapse;width:100%">
                            <thead>
                                <tr style="color:#374151;font-size:14px">
                                    <th style="text-align:left;padding:6px 8px">申請人</th>
                                    <th style="text-align:left;padding:6px 8px">派車時間</th>
                                    <th style="text-align:left;padding:6px 8px">派車地點</th>
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <th style="text-align:center;padding:6px 8px">審核</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                
                                <tr v-for="p in pendingFiltered" :key="(p.applicantName || '-') + '_' + (p.useTime || '-')">
                                    <td style="padding:8px 8px">{{ p.applicantName }}</td>
                                    <td style="padding:8px 8px" class="mono">{{ (p.useTime || '').split('-')[1] || p.useTime }}</td>
                                    <td style="padding:8px 8px">{{ (p.route || '').split('-').slice(-1)[0] }}</td>
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <td style="padding:8px 8px" class="actions">
                                            <button class="btn btn-yes" @@click="approve(p)">✓</button>
                                            <button class="btn btn-no" @@click="reject(p)">✕</button>
                                        </td>
                                    }
                                </tr>
                                <tr v-if="pending.length === 0">
                                    <td colspan="4" style="text-align:center;color:#999;padding:10px">沒有待審核申請</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </aside>
        </div>
        <div id="loading-overlay">
            <div class="spinner"></div>
        </div>
    </main>



    <!-- Vue App -->
    <script>
     function updateDateTime() {
            var now = new Date();

            // 日期 + 星期
            var options = { weekday: 'long' };
            var dateStr = now.getFullYear() + "/" +
                          (now.getMonth() + 1) + "/" +
                          now.getDate() + " " +
                          now.toLocaleDateString("zh-TW", options);

            // 時間 (時:分:秒)
            var timeStr = now.toLocaleTimeString("zh-TW");

            // 更新右邊區塊
        const el = document.getElementById("dateTime");
        if (el) {
          el.textContent = dateStr + " " + timeStr;
        }
                }

        updateDateTime();           // 載入時執行一次
        setInterval(updateDateTime, 1000); // 每秒更新
        window.addEventListener('DOMContentLoaded', () => {
          if (!window.Vue) { console.error('❌ Vue 還沒載到'); return; }
          const { createApp, ref, onMounted, computed, nextTick, watch } = window.Vue;

          createApp({
            setup(){
              // ===== 視圖切換 =====
              const viewMode   = ref('schedule');   // 'schedule' | 'mypos'

              // ===== 列表資料 =====
              const schedules  = ref([]);
              const unfinished = ref([]);
              const pending    = ref([]);
              const driverStatus = ref([]);
              const pendingFiltered = computed(() => {
              const isDoneOrRejected = (s) => {
                const k = String(s || "").trim().toLowerCase();
                return k === "完成審核" || k === "駁回" || k === "approved" || k === "rejected";
              };
              return (pending.value || []).filter(x => !isDoneOrRejected(x.status));
            });
              

              // ===== 工具 =====
              const hasMapsKey = computed(() => !!(window.GOOGLE_MAPS_KEY && window.GOOGLE_MAPS_KEY.length));
              const toNumOrNull = v => { const n = Number(v); return Number.isFinite(n) ? n : null; };
              const validLatLng = (lat,lng)=> Number.isFinite(lat)&&Number.isFinite(lng) && lat>=-90 && lat<=90 && lng>=-180 && lng<=180 && !(lat===0 && lng===0);

              const pad = n => n.toString().padStart(2,'0');
              const fmtHHmm = (d) => { if (!d) return ''; const dt = (d instanceof Date) ? d : new Date(d); if (isNaN(dt)) return ''; return `${pad(dt.getHours())}:${pad(dt.getMinutes())}`; };
              const tailDestFromRoute = (route) => { if (!route) return ''; const parts = String(route).split('-').map(s=>s.trim()).filter(Boolean); return parts.length ? parts[parts.length-1] : ''; };

              // ===== 單一駕駛定位：開新分頁 Google Maps（簡單做法） =====
              function openMap(driver){
                const lat = toNumOrNull(driver.lat), lng = toNumOrNull(driver.lng);
                if (validLatLng(lat,lng)) {
                  window.open(`https://www.google.com/maps?q=${lat},${lng}`, '_blank', 'noopener');
                } else {
                  const q = (driver.location || driver.route || driver.applicantDept || driver.applicantName || '').trim();
                  if (q) window.open(`https://www.google.com/maps?q=${encodeURIComponent(q)}`, '_blank', 'noopener');
                  else console.warn('無定位資訊');
                }
              }
                        // ===== 今日排班行程表（司機可重複出現，依時間排序） =====
                 const scheduleTable = computed(() => {
                   return (schedules.value || [])
                     .slice() // 複製一份，避免影響原始資料
                     .sort((a, b) => {
                       const ta = a.startTime ? new Date(a.startTime).getTime() : 0;
                       const tb = b.startTime ? new Date(b.startTime).getTime() : 0;
                       return ta - tb; // 依照開始時間由早到晚排序
                     });
                 });

              // ===== 我的定位（五張地圖） =====
              const myLoc     = ref({ lat:null, lng:null, ts:null });
              const locating  = ref(false);
              const locError  = ref("");

              function getMyLocation(){
                locating.value = true;
                locError.value = "";
                return new Promise((resolve,reject)=>{
                  if (!navigator.geolocation) {
                    locError.value = "此瀏覽器不支援定位 (Geolocation)";
                    locating.value = false;
                    return reject(new Error(locError.value));
                  }
                  navigator.geolocation.getCurrentPosition(
                    pos => {
                      myLoc.value = { lat:Number(pos.coords.latitude), lng:Number(pos.coords.longitude), ts:Date.now() };
                      try { localStorage.setItem('lastMyLoc', JSON.stringify(myLoc.value)); } catch {}
                      locating.value = false;
                      console.log('📍 myLoc 更新：', myLoc.value);
                      resolve();
                    },
                    err => {
                      locating.value = false;
                      locError.value = `定位失敗：${err.message}（請確認 HTTPS/localhost，且已允許定位權限）`;
                      console.warn('定位失敗，改用備援中心點顯示地圖');
                      reject(err);
                    },
                    { enableHighAccuracy:true, timeout:15000, maximumAge:30000 }
                  );
                });
              }

             

         

          // 小汽車圖（橘：執勤中）
          function carSVG(color){
            return `
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="28" height="28">
                <rect x="96" y="200" width="320" height="90" rx="22" ry="22" fill="${color}" />
                <rect x="136" y="160" width="240" height="50" rx="10" ry="10" fill="${color}" />
                <circle cx="186" cy="310" r="22" fill="#1f2937"/>
                <circle cx="326" cy="310" r="22" fill="#1f2937"/>
              </svg>`;
          }

                  // ===== 取得目前地圖中心（我的定位或台北101） =====
         const FALLBACK_CENTER = { lat: 25.033964, lng: 121.564468 }; // 台北101
        function currentCenter() {
          const lat = toNumOrNull(myLoc.value?.lat);
          const lng = toNumOrNull(myLoc.value?.lng);
          return (validLatLng(lat, lng))
            ? { lat, lng }
            : FALLBACK_CENTER; // 台北101
        }

        // ===== 先抓所有車輛目前位置（初始化 + 之後輪詢沿用） =====
        async function loadVehicleLocations() {
          try {
            const res = await fetch("/api/dashboard/vehicle-locations");
            const list = await res.json(); // 預期: [{ vehicleId, latitude, longitude, status }, ...]
            // 先把初值放進 miniMapCache，避免初渲染 marker 沒點
            list.forEach(loc => {
              const id = Number(loc.vehicleId);
              if (!Number.isFinite(id)) return;
              const lat = Number(loc.latitude);
              const lng = Number(loc.longitude);
              if (!validLatLng(lat, lng)) return;

              const mapObj = miniMapCache.get(id);
              if (mapObj && mapObj.marker) {
                mapObj.marker.position = { lat, lng };
                mapObj.lastPos = { lat, lng };
              } else {
                // 不建地圖，首次 renderMyMaps() 會建；這裡只先記錄
                miniMapCache.set(id, { map: null, marker: null, lastPos: { lat, lng }, animating: false });
              }
            });
          } catch (e) {
            console.warn("載入車輛位置失敗，先用中心點顯示：", e);
          }
        }
          // 全域快取

        const miniMapCache = new Map(); // key = vehicleId
        let _carUpdater = null;

        function renderMyMaps() {
          const center = currentCenter(); // 用這個取代 myPos

          driverCards.value.slice(0, 5).forEach((card, i) => {
            const el = document.getElementById('gmap_' + i);
            if (!el) return;

            const id = Number(card.vehicleId ?? (i + 1));
            let mapObj = miniMapCache.get(id);

            // 取得此車初次位置
            const initialPos = (mapObj && mapObj.lastPos && validLatLng(mapObj.lastPos.lat, mapObj.lastPos.lng))
              ? mapObj.lastPos
              : center;

            if (!mapObj || !mapObj.map) {
              const map = new google.maps.Map(el, {
                   center: currentCenter(),
                zoom: 16,
                disableDefaultUI: true,
                mapId: "add29920b46056c38796ff49"
              });

              const markerEl = document.createElement('div');
              const color =
                card.statusType === 'on'   ? '#f97316' :
                card.statusType === 'idle' ? '#22c55e' :
                '#94a3b8';
              markerEl.innerHTML = carSVG(color);

              const marker = new google.maps.marker.AdvancedMarkerElement({
                map,
                position: currentCenter(),  
                content: markerEl
              });

              mapObj = { map, marker, lastPos: initialPos, animating: false };
              miniMapCache.set(id, mapObj);
            }
          });

          // 啟動輪詢（只啟一次）
          if (!_carUpdater) {
            _carUpdater = setInterval(async () => {
              try {
                   const { data: list } = await axios.get("/api/dashboard/vehicle-locations");

                list.forEach(loc => {
                  const id = Number(loc.vehicleId);
                  const mapObj = miniMapCache.get(id);
                  if (!mapObj || !mapObj.marker) return;

                  const card = driverCards.value.find(c => Number(c.vehicleId) === id);
                  if (!card || card.statusType !== 'on') return; // 只有執勤中才動

                  const newPos = { lat: Number(loc.latitude), lng: Number(loc.longitude) };
                  if (!validLatLng(newPos.lat, newPos.lng)) return;

                  animateMarkerTo(mapObj, newPos);
                });
              } catch (err) {
                console.warn("🚘 更新全部車輛位置失敗", err);
              }
            }, 3000);
          }
        }

        //平滑移動
        function animateMarkerTo(mapObj, newPos) {
          if (!mapObj.lastPos) {
            mapObj.marker.position = newPos;
            mapObj.lastPos = newPos;
            if (mapObj.map) mapObj.map.panTo(newPos);
            return;
          }
             // 動畫中就先記住下一個目標，結束後立刻接上
             if (mapObj.animating) { mapObj.queuedPos = newPos; return; }

          const steps = 40;   // 60 小步
          const delay = 40;   // 每步 50ms = 約 3 秒完成
          const old = mapObj.lastPos;
          const dLat = (newPos.lat - old.lat) / steps;
          const dLng = (newPos.lng - old.lng) / steps;
          let i = 0;
          mapObj.animating = true;

          function tick() {
            i++;
            const lat = old.lat + dLat * i;
            const lng = old.lng + dLng * i;
            const pos = { lat, lng };
            mapObj.marker.position = { lat, lng };
            mapObj.marker.position = pos;
            if (mapObj.map) mapObj.map.panTo(pos);
            if (i < steps) {
              setTimeout(tick, delay);
            } else {
              mapObj.lastPos = newPos;
              mapObj.animating = false;
           // 如果期間有新座標排隊，馬上接續下一段
            if (mapObj.queuedPos) {
              const q = mapObj.queuedPos;
              mapObj.queuedPos = null;
              animateMarkerTo(mapObj, q);
             }
            }
          }
          tick();
        }

            async function enterMyLocationView(){
              viewMode.value = 'mypos';

              try {
                await getMyLocation().catch(()=>{});
              } catch(e) {
                console.warn("定位失敗，改用台北101");
              }

              await loadVehicleLocations(); //  抓車輛位置
              await nextTick();
              renderMyMaps(); //  中心點是自己位置
              console.log("目前中心：", myLoc.value);
            }
        

        function exitMyLocationView(){ viewMode.value = 'schedule'; }

             watch(() => myLoc.value, (val) => {
               if (viewMode.value === 'mypos' && val && val.lat && val.lng) {
                 console.log("🧭 定位更新，重新置中：", val);
                 nextTick(() => {
                   driverCards.value.forEach((_, i) => {
                     const el = document.getElementById('gmap_' + i);
                     if (!el) return;
                     const mapObj = [...miniMapCache.values()][i];
                     if (mapObj?.map) mapObj.map.setCenter({ lat: val.lat, lng: val.lng });
                   });
                 });
               }
             });             
             watch(() => viewMode.value, (m) => { if (m === 'mypos') nextTick(renderMyMaps); });

              // ===== 生成地圖卡片資料（五張） =====
                      const driverCards = computed(() => {
          // 抓我的即時定位
          const myLat = toNumOrNull(myLoc.value?.lat);
          const myLng = toNumOrNull(myLoc.value?.lng);

          const base = (driverStatus.value || []).slice(0, 5).map((d, i) => {
          let statusText = d.stateText || '—';
          let statusType = 'idle';

          if (statusText === '執勤中') {
            statusType = 'on';
          } else if (statusText === '休息中') { 
            statusType = 'break';  
          }

          return {
            key: d.key,
            vehicleId: d.vehicleId ?? (d.driverId ?? i + 1),
            plate: (d.plateNo || '').trim() || '—',
            driver: (d.driverName || '').trim() || '—',
            statusText: statusText,
            statusType: statusType,
            lat: toNumOrNull(d.lat),
            lng: toNumOrNull(d.lng),
            myLat,
            myLng

          };
        });

        while (base.length < 5) {
          base.push({
            key: 'placeholder_' + base.length,
            plate: '—',
            driver: '—',
            statusText: '待機中',
            statusType: 'idle',
            lat: validLatLng(myLat, myLng) ? myLat : null,
            lng: validLatLng(myLat, myLng) ? myLng : null
          });
        }

        return base;

        });
                      
         

        // --- 審核操作（✅/✕） ---
        const approve = async (p) => {
          if (!confirm(`確定要將申請單 #${p.applyId} 審核通過並派車嗎？`)) return;

          try {
            console.log(" approve", p);

          
            const { data } = await axios.post(
              `/api/carapplications/${p.applyId}/approve-assign`,
              null,
              { params: { passengerCount: p.passengerCount ?? 0 } }
            );
          

            
           location.reload();
            alert(`已成功審核並派車`);

            
            p.status = "完成審核";
            p.vehicleId = data.vehicleId ?? null;
            p.plateNo = data.plateNo ?? null;

           
            pending.value = pending.value.filter(r => r.applyId !== p.applyId);


          } catch (err) {
            console.error(" approve error:", err);
           
            const msg = err?.response?.data?.message || err?.message || '審核派車失敗';
            alert(msg);
          }
        };


        const reject = async (p) => {
          if (!confirm(`確定要將申請單 #${p.applyId} 駁回嗎？`)) return;

          try {
            console.log(" reject", p);
            await axios.patch(`/api/CarApplications/${p.applyId}/status`, {
              status: "駁回"
            });
            alert(" 已成功駁回");
            p.status = "駁回";
            pending.value = pending.value.filter(r => r.applyId !== p.applyId);
          } catch (err) {
            console.error(" reject error:", err);
            alert("駁回失敗");
          }
        };

              // ===== 資料載入 =====
              async function get(url){ const res = await axios.get(url); return res.data.data; }
              async function loadAll(){
                try{
                  const [s,u,p,ds] = await Promise.all([
                    get('/api/dashboard/schedule/today'),
                    get('/api/dashboard/dispatch/uncomplete'),
                    get('/api/dashboard/applications/pending'),
                    get('/api/dashboard/drivers/today-status'),
                  ]);
              


                  const norm = (list)=> (list||[]).map(x=>{
                    const arrivalTimeRaw = x.arrivalTime ?? x.endTime ?? x.useEnd ?? null;
                    const arrivalPlaceRaw = (x.arrivalPlace ?? x.destination ?? tailDestFromRoute(x.route) ?? x.applicantDept ?? '').toString().trim();
                    const arrivalDisplay = (fmtHHmm(arrivalTimeRaw) && arrivalPlaceRaw)
                      ? `${fmtHHmm(arrivalTimeRaw)} ${arrivalPlaceRaw}` : '';

                    const rawShift = (x.shiftName ?? x.shift ?? '').toString().trim().toUpperCase();
                    const shiftLabel = rawShift==='AM' ? '早午' : rawShift==='PM' ? '午晚' : '一般';
                    const shiftClass = rawShift==='AM' ? 'am' : rawShift==='PM' ? 'pm' : 'general';

                    const deptRaw = (x.applicantDept ?? '').trim();
                    let deptShort = deptRaw;
                    if (deptShort) {
                      const parts = deptShort.split('/');
                      deptShort = parts[parts.length - 1].trim().replace(/科.*$/, '科');
                    }

                    return {
                      key: `${x.scheduleId ?? (x.driverId ?? 'X')}_${x.shift ?? ''}`,
                      driverName: x.driverName ?? '-',
                      hasDispatch: !!x.hasDispatch,
                      applicantDept: x.applicantDept || '-',
                      applicantName: x.applicantName ?? '-',
                      passengerCount: x.passengerCount ?? '-',
                      tripDistance: (x.tripDistance ?? '').toString().replace('公里',''),
                      lat: toNumOrNull(x.lat), lng: toNumOrNull(x.lng),
                      plateNo: x.plateNo ?? '-',
                      useStart: x.useStart ?? x.UseStart ?? null,
                      useEnd: x.useEnd ?? x.UseEnd ?? null,
                      updatedAt: x.updatedAt,
                      shiftLabel, shiftClass, arrivalDisplay
                    };
                  });
                schedules.value  = norm(s);
                unfinished.value = u || [];
                driverStatus.value = (ds || []).map(scheduleToDriverRow);

                // 1) 先把各種可能的欄位統一成 .status（處理大小寫與空白）
               const cleaned = (p || []).map(x => {
               const rawStatus =
                 (x.status ?? x.Status ?? x.dispatchStatus ?? x.DispatchStatus ?? "")
                   .toString()
                   .trim();
               return {
                 ...x,
                 applyId: x.applyId ?? x.ApplyId ?? null,
                 status: rawStatus
               };
             });
             // 直接放進 pending，畫面用 pendingFiltered 顯示未審核
             pending.value = cleaned;
                      } catch (err) {
            console.error('載入失敗：', err);
          }
        }

        function scheduleToDriverRow(x){
          // 時間
          // 解析用車時間欄位（後端大小寫不一致都包進來）
          const rawStart = x?.startTime ?? x?.useStart ?? x?.UseStart ?? null;
          const rawEnd   = x?.endTime   ?? x?.useEnd   ?? x?.UseEnd   ?? null;

          // 統一轉成 Date 物件
          const st = rawStart ? new Date(rawStart) : null;
          const et = rawEnd   ? new Date(rawEnd)   : null;          
          const etDate = et ? new Date(et) : null;
          // 後端提供的休息資訊與請假單
          const restRemainMinutes = Number(x?.restRemainMinutes ?? 0);
          const restUntil         = x?.restUntil ? new Date(x.restUntil) : null;
          const leave             = (x?.leaveNote || '').trim();

          // 狀態（執勤中 > 休息中 > 待命中）
          let stateText;
            if ((x?.stateText || '').trim() === '執勤中') {
              stateText = '執勤中';
            } else {
              stateText = (restRemainMinutes > 0) ? '休息中' : '待命中';
            }


          // 燈號
          let stateDotClass = 'status-green';
          if (stateText === '執勤中') stateDotClass = 'status-red';
          else if (stateText === '休息中') stateDotClass = 'status-gray';
          else if (stateText === '請假') stateDotClass = 'status-orange';

          // 小工具
          const pad = (n) => n.toString().padStart(2,'0');
          const fmtHHmm = (d) => {
            if (!d) return '';
            const dt = d instanceof Date ? new Date(d) : new Date(d);
            if (isNaN(dt)) return '';
            return `${pad(dt.getHours())}:${pad(dt.getMinutes())}`;
          };

          // 顯示用途
          const arrivalTimeRaw  = x.arrivalTime ?? x.endTime ?? x.useEnd ?? null;
          const tailDestFromRoute = (route) => {
            if (!route) return '';
            const parts = String(route).split('-').map(s=>s.trim()).filter(Boolean);
            return parts.length ? parts[parts.length-1] : '';
          };
          const arrivalPlaceRaw = (x.arrivalPlace ?? x.destination ?? tailDestFromRoute(x.route) ?? x.applicantDept ?? '').toString().trim();

          // 班別
          const rawShift=(x.shiftName??x.shift??'').toString().trim().toUpperCase();
          let label='一般', cls='general';
          if(rawShift==='AM'){ label='早午'; cls='am'; }
          else if(rawShift==='PM'){ label='午晚'; cls='pm'; }
          else if(['G1','G2','G3'].includes(rawShift)){ label='一般'; cls='general'; }

          // 時窗/回來時間/最早可出車
          const taskWindow = (st && et) ? `${fmtHHmm(st)}-${fmtHHmm(et)}` : '';
          const useEnd = etDate ? fmtHHmm(etDate) : '-';
          const earliestOut =
             stateText === '執勤中' ? (et ? fmtHHmm(new Date(et.getTime() + 60*60000)) : '-')
            : stateText === '休息中' ? (restUntil ? fmtHHmm(restUntil) : '-')
            : '即時可用';
          // 出勤狀況
        const attendance = (typeof x.attendance === 'string' && x.attendance.trim())
          ? x.attendance.trim()   
          : ( (x?.leaveNote || '').trim() ? '請假' : '正常' );

          return {
            key: `${x?.driverId || 'D'}_${rawShift}`,
            driverId: x?.driverId ?? null,
            driverName: x?.driverName ?? '-',
            shiftLabel: label,
            shiftClass: cls,
            plateNo: x.plateNo ?? '-',
            stateText,
            stateDotClass,
            restRemainMinutes,                 
            taskWindow,
            useEnd,
            earliestOut,
            attendance: leave === '請假' ? '請假' : '正常',
            applicantDept: arrivalPlaceRaw || '-',
            applicantName: x?.applicantName ?? '-',
            passengerCount: x?.passengerCount ?? '-',
            
          };
        }
                



              function openFleetStatus(){
                // window.location.href = '/Vehicle/Status';
                console.log('open fleet status');
              }

                      onMounted(() => {
                  loadAll();
                  setInterval(() => {
                    loadAll();  // 每分鐘重抓一次資料，確保狀態更新
                  }, 60 * 1000);
                });


              return {
                // 視圖
                viewMode, enterMyLocationView, exitMyLocationView,fmtHHmm,
                // 列表/審核
                schedules,scheduleTable, unfinished, pending, approve, reject,pendingFiltered,
                // 單一地圖開新頁
                openMap,
                // 我的定位
                hasMapsKey, myLoc, locating, locError,
                // 地圖卡片
                driverCards,
                // 左下角：駕駛狀態
                driverStatus, openFleetStatus
              };
            }
          }).mount('#dashboard');
        });
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=@(ViewBag.GoogleMapsKey)&v=quarterly&libraries=marker" async defer></script>

</body>
