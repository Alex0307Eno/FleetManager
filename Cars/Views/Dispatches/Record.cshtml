@{
    ViewData["Title"] = "派車紀錄";
}

<head>
    
    <title>派車紀錄</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="/css/Dispatch/Record.css" rel="stylesheet" />
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

</head>
<body>
    <main id="app" class="wrap" v-cloak>
        <div class="card records">
            <!-- 卡片標題列：左標題、右按鈕 -->
            <div class=" topbar d-flex align-items-center justify-content-between">
                <h5 class="mb-0 fw-bold">派車紀錄</h5>
                <div class="d-flex gap-2">
                    @if (User.IsInRole("Admin"))
                    {
                    <a class="btn btn-warning fw-bold" asp-controller="Dispatches" asp-action="Dispatch">
                        用車申請
                    </a>
                    <button class="btn btn-success fw-bold" @@click="openMergeModal()">
                        共乘併單
                    </button>

                    <button class="btn btn-outline" @@click="exportCsv">
                        <i class="fa-solid fa-file-export"></i> 匯出
                    </button>
                    }
                </div>
            </div>

            <!-- 卡片內容：搜尋欄 + 表格，同寬 -->
            <div class="card-bd">
                <!-- 搜尋欄 -->
                <div class="filters-bar">
                    <div class="filters-chip q">
                        <label>用車日期</label>
                        <input type="date" v-model="q.dateFrom">
                        <span style="color:#64748b;">–</span>
                        <input type="date" v-model="q.dateTo">
                    </div>

                    <div class="filters-chip">
                        <label>駕駛員</label>
                        <select v-model="q.driver">
                            <option value="">全部</option>
                            <option v-for="d in uniqueDrivers" :key="d" :value="d">{{ d }}</option>
                        </select>
                    </div>

                    <div class="filters-chip">
                        <label>申請人</label>
                        <select v-model="q.applicant">
                            <option value="">全部</option>
                            <option v-for="a in uniqueApplicants" :key="a" :value="a">{{ a }}</option>
                        </select>
                    </div>

                    <div class="filters-chip">
                        <label>車牌</label>
                        <select v-model="q.plateNo">
                            <option value="">全部</option>
                            <option v-for="p in uniquePlates" :key="p" :value="p">{{ p }}</option>
                        </select>
                    </div>

                </div>

                <!-- 表格 -->
                <div class="table-wrap">
                    <table>
                        <thead>
                            <tr>
                                <th style="width:120px">用車日期 <i class="fa-solid fa-caret-down" style="color:#9ca3af"></i></th>
                                <th style="width:130px">用車時間</th>
                                <th>目的地</th>
                                <th style="width:260px">事由</th>
                                <th style="width:120px">申請人</th>
                                <th style="width:70px">人數</th>
                                <th style="width:90px">行駛里程</th>
                                <th style="width:100px">審核狀態</th>
                                <th style="width:120px">駕駛員</th>
                                <th style="width:90px">車輛</th>
                                <th style="width:90px">出發前里程數</th>
                                <th style="width:90px">回場後里程數</th>
                                @if (User.IsInRole("Admin"))
                                {
                                    <th style="width:140px">功能</th>
                                }
                        </thead>

                                <tbody>
                            <tr v-for="(r,i) in shown"
                                :key="(r.dispatchId || r.id) + '-' + (r.applyId || i)"
                                :class="[
                                  isGroupHead(i) ? 'row-parent' : 'row-child',
                                  (!isGroupHead(i) && isCollapsed(r.dispatchId)) ? 'collapsed-child' : ''
                                ]">
                                <!-- 用車日期 + 展開/收合 + 母/子標籤 -->
                                <td class="mono">
                                    <template v-if="isGroupHead(i)">
                                        <!-- 有子單才顯示箭頭 -->
                                        <a v-if="hasChildren(r.dispatchId)"
                                           href="javascript:;"
                                           class="group-toggle"
                                           @@click="toggleGroup(r.dispatchId)">
                                            <i :class="isCollapsed(r.dispatchId)
                                                ? 'fa-solid fa-caret-right'
                                                : 'fa-solid fa-caret-down'">
                                            </i>
                                        </a>
                                        <span class="tag tag-parent">母單</span>
                                        {{ rocDate(r.useStart) }}
                                    </template>

                                    <template v-else>
                                        <span class="tag tag-child">子單</span>
                                        {{ rocDate(r.useStart) }}
                                    </template>
                                </td>


                                <td class="mono">{{ timeSpan(r.useStart, r.useEnd) }}</td>
                                <td class="col-route">
                                    {{ r.route }} ({{ r.tripType === 'round' ? '來回' : (r.tripType === 'single' ? '單程' : '') }})
                                </td>
                                <td>
                                    <span v-if="r.reasonType">({{ r.reasonType }}) </span>{{ r.reason }}
                                </td>
                                <td>{{ r.applicant }}</td>
                                <td class="mono">{{ r.seats }}</td>
                                <td class="mono">{{ fmtKm(r.km) }}</td>
                                <td><span class="badge" :class="statusClass(r.status)">{{ statusText(r.status) }}</span></td>

                                <td>
                                    <span class="pill" :class="!isGroupHead(i) ? 's-muted' : ''">
                                        {{ r.driver || '未指派' }}
                                    </span>
                                </td>
                                <td>
                                    <span class="pill blue" :class="r.plate ? '' : 's-muted'">
                                        {{ r.plate || '未指派' }}
                                    </span>
                                </td>
                                
                                <td class="mono">{{ fmtNum(r.odometerStart) }}</td>
                                
                                <td class="mono">{{ fmtNum(r.odometerEnd) }}</td>



                                

                                <!-- 功能列：母單可以編輯/刪除；子單維持檢視或不顯示 -->
                                <td>
                                    <div class="actions" v-if="isGroupHead(i)">
                                        @if (User.IsInRole("Admin"))
                                        {
                                        <button class="icon-btn view" title="檢視" @@click="viewRow(r)"><i class="fa-solid fa-eye"></i></button>
                                        <button v-if="canEdit(r)" class="icon-btn edit" title="編輯" @@click="editRow(r)"><i class="fa-solid fa-pen-to-square"></i></button>
                                        <button class="icon-btn delete" title="刪除" @@click="removeRow(r)"><i class="fa-solid fa-trash"></i></button>
                                        }
                                    </div>
                                    <div class="actions" v-else>
                                        <button class="icon-btn view" title="檢視" @@click="viewRow(r)"><i class="fa-solid fa-eye"></i></button>
                                    </div>
                                </td>
                            </tr>
                            <tr v-if="!shown.length">
                                <td colspan="12" style="text-align:center;color:#94a3b8;padding:16px">目前沒有資料</td>
                            </tr>
                        </tbody>
                    </table>

                    <div class="hint">最後更新時間：{{ lastUpdated }}</div>
                </div>
            </div>
        </div>
        <!-- 編輯 Modal（只改駕駛/車輛） -->
        <div v-if="editing" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">更新指派</h3>
                <p class="modal-subtitle">派車單 #{{ editing.dispatchId }}</p>

                <div class="form-group">
                    <label>可用駕駛</label>
                    <select v-model.number="selectedDriverId" class="form-control"
                            :disabled="currentDriver && (!availDrivers || availDrivers.length === 0)">
                        <option :value="null">（不指定）</option>
                        <!-- 當下的駕駛 -->
                        <option v-if="currentDriver" :value="currentDriver.driverId">
                            ★ 當前指派：{{ currentDriver.driverName }}
                        </option>
                        <!-- 其他可用駕駛 -->
                        <option v-for="d in availDrivers" :key="d.driverId" :value="d.driverId">
                            {{ d.driverName }}
                        </option>
                    </select>
                    <div v-if="currentDriver && (!availDrivers || availDrivers.length === 0)"
                         style="color:#b91c1c; margin-top:6px;">
                        ⚠️ 當下沒有可用司機
                    </div>
                </div>

                <div class="form-group">
                    <label>可用車輛</label>
                    <select v-model.number="selectedVehicleId" class="form-control"
                            :disabled="currentVehicle && (!availVehicles || availVehicles.length === 0)">
                        <option :value="null">（不指定）</option>
                        <!-- 當下的車輛 -->
                        <option v-if="currentVehicle" :value="currentVehicle.vehicleId">
                            ★ 當前指派：{{ currentVehicle.plateNo }}(載客量{{ currentVehicle.capacity }})
                        </option>
                        <!-- 其他可用車輛 -->
                        <option v-for="v in availVehicles" :key="v.vehicleId" :value="v.vehicleId">
                            {{ v.plateNo }}（{{ v.brand }} {{ v.model }} / 載客量 {{ v.capacity }}）
                        </option>
                    </select>
                    <div v-if="currentVehicle && (!availVehicles || availVehicles.length === 0)"
                         style="color:#b91c1c; margin-top:6px;">
                        ⚠️ 當下沒有可用車輛
                    </div>
                </div>




                <div class="modal-actions">
                    <button class="btn" @@click="cancelEdit">取消</button>
                    <button class="btn btn-primary" @@click="confirmEdit">確認</button>
                </div>
            </div>
        </div>
        <!-- 共乘併單 Modal -->
        <div v-if="showMergeModal" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">共乘併單</h3>

                <!-- 選擇派車單 -->
                <div class="form-group">
                    <label>選擇派車單</label>
                    <select v-model.number="currentDispatchId" class="form-control">
                        <option :value="null" disabled>該時段無派車資料</option>
                        <option v-for="opt in dispatchOptions" :key="opt.id" :value="opt.id">
                            #{{ opt.id }}｜{{ opt.text }}
                        </option>
                    </select>
                </div>

                <!-- 已併入清單 -->
                <div class="form-group" style="margin-top:10px;">
                    <label>已併入的申請</label>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>申請單</th>
                                <th>起訖</th>
                                <th>時間</th>
                                <th>座位</th>
                                <th style="width:90px;"></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-if="!mergedApps || mergedApps.length===0">
                                <td colspan="5" class="text-muted">目前沒有併入任何申請</td>
                            </tr>
                            <tr v-for="a in mergedApps" :key="a.dispatchId">
                                <td class="mono">#{{ a.dispatchId }}</td>
                                <td>{{ a.origin }} → {{ a.destination }}</td>
                                <td class="mono">{{ rocDate(a.useStart) }} {{ timeSpan(a.useStart, a.useEnd) }}</td>
                                <td class="mono">{{ a.seats }}</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" title="取消併單"
                                            @@click="removeLink(currentDispatchId, a.dispatchId)">
                                        取消
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- 新增併單 -->
                <div class="form-group" style="margin-top:10px;">
                    <label>新增併單</label>
                    <div class="row">
                        <div class="col">
                            <select v-model.number="newChildDispatchId" class="form-control" :disabled="remainingSeats <= 0">
                                <option :value="null" disabled>該時段無派車資料</option>
                                <option v-for="a in filteredDispatchOptions"
                                        :key="a.dispatchId"
                                        :value="a.dispatchId"
                                        :disabled="a.seats > remainingSeats">
                                    {{ a.dispatchId }}｜{{ a.text }}
                                    <span v-if="a.seats > remainingSeats">（人數超過剩餘座位）</span>
                                </option>
                            </select>
                            <div class="text-muted mt-1">
                                剩餘座位：{{ remainingSeats > 0 ? remainingSeats : '已滿' }}
                            </div>
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-primary"
                                    :disabled="remainingSeats <= 0 || !newChildDispatchId"
                                    @@click="addLink">
                                併入
                            </button>
                        </div>
                    </div>
                </div>

                <div class="text-end" style="margin-top:12px;">
                    <button class="btn btn-secondary" @@click="showMergeModal=false">關閉</button>
                </div>
            </div>
        </div>
    


        <div v-if="viewing" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">派車單詳細資料</h3>
                <p class="modal-subtitle">#{{ viewing.dispatchId }}</p>
                <div><b>申請人：</b>{{ viewing.applicant }}</div>
                <div><b>駕駛人：</b>{{ viewing.driver || '未指派' }}</div>
                <div><b>車輛：</b>{{ viewing.plateNo || '未指派' }}</div>
                <div><b>事由：</b>{{ viewing.reason }}</div>
                <div><b>狀態：</b>{{ viewing.status }}</div>
                <div class="modal-actions">
                    <button class="btn btn-primary" @@click="closeView">關閉</button>
                </div>
            </div>
        </div>
    </main>


    <script>
        window.addEventListener('DOMContentLoaded', () => {
          const { createApp, ref, computed, onMounted, watch } = Vue

          createApp({
            setup() {
              // === Debug helpers ===
              const DBG = true;
              const j = (x) => {
                try { return JSON.stringify(x, null, 2); } catch { return String(x); }
              };
              function httpErr(err) {
                const res = err?.response;
                return {
                  message: err?.message,
                  status: res?.status,
                  url: res?.config?.url,
                  method: res?.config?.method,
                  params: res?.config?.params,
                  data: res?.data
                };
              }
              //有子單的話母單才顯示箭頭
              function hasChildren(dispatchId) {
                return rows.value.filter(r => r.dispatchId === dispatchId).length > 1;
              }


              // 查詢條件
              const q = ref({ dateFrom: '', dateTo: '', driver: '', applicant: '', plateNo: '' })
              function getMonthRange() {
                const now = new Date();
                const y = now.getFullYear(), m = now.getMonth();
                const first = new Date(y, m, 2);
                const last = new Date(y, m + 1, 1);
                const f = d => d.toISOString().slice(0, 10);
                return { start: f(first), end: f(last) };
              }

              // === 核心資料 ===
              const rows = ref([])
              const records = ref([]);
              const lastUpdated = ref(new Date().toLocaleString())
              // 把 ApiResponse 包裝拆掉：優先取 res.data.data，否則取 res.data
              const apiData = (res) => (res?.data && typeof res.data === 'object' && 'data' in res.data)
              ? res.data.data
              : res.data;

              // === 共乘併單相關 state ===
              const showMergeModal = ref(false);
              const currentDispatchId = ref(null);
              const mergedApps = ref([]);
              const applicantOptions = ref([]);
              const newChildDispatchId = ref(null)
              const remainingSeats = ref(0);


              // === 群組收合控制 ===
              const collapsed = ref(new Set());

              // 判斷是否母單：前一列沒有相同 dispatchId
              const isGroupHead = (i) =>
                i === 0 || shown.value[i - 1]?.dispatchId !== shown.value[i]?.dispatchId;

              // 判斷某個母單是否被收合
              const isCollapsed = (dispatchId) => collapsed.value.has(dispatchId);

              // 切換收合狀態
              function toggleGroup(dispatchId) {
                if (collapsed.value.has(dispatchId)) {
                  collapsed.value.delete(dispatchId);
                } else {
                  collapsed.value.add(dispatchId);
                }
              }

              // === 篩選後要顯示的 rows ===
              const shown = computed(() => {
                const df = q.value.dateFrom ? new Date(q.value.dateFrom) : null
                const dt = q.value.dateTo ? new Date(q.value.dateTo) : null
                const driver = (q.value.driver || '').trim()
                const applicant = (q.value.applicant || '').trim()
                const plateNo = (q.value.plateNo || '').trim()

                return rows.value.filter(r => {
                  const d = new Date(r.useStart)
                  if (df && d < df) return false
                  if (dt && d > endOfDay(dt)) return false
                  if (driver && r.driver !== driver) return false
                  if (applicant && !String(r.applicant).includes(applicant)) return false
                  if (plateNo && String(r.plate || '').trim() !== plateNo) return false
                  return true
                })
              })

              // === 母單下拉選單 ===
              const dispatchOptions = computed(() => {
                const arr = Array.isArray(shown.value) ? shown.value : [];
                const now = Date.now();
                const uniq = new Map();
                for (const r of arr) {
                  const id = Number(r?.dispatchId);
                  if (!Number.isFinite(id)) continue;
                  //超過現在時間不顯示
                  if (new Date(r.useStart) < now) continue;
                  //  沒有車輛就不顯示
                  if (!r.vehicleId && !r.plate) continue;
                  if (!uniq.has(id)) {
                    uniq.set(id, {
                      id,
                      useStart: r.useStart,
                      useEnd: r.useEnd,
                      route: r.route,
                      seats: r.seats ?? 0,
                      text: `${rocDate(r.useStart)} ${timeSpan(r.useStart, r.useEnd)}｜${r.route || ''}｜${r.seats ?? 0} 人`
                    });
                  }
                }
                return [...uniq.values()];
              });

              // 目前選擇母單的主申請 
              const currentMainDispatchId = computed(() => currentDispatchId.value || null);


              // === 新增併單下拉清單  ===(子單)
              const filteredDispatchOptions = computed(() => {
                  const mainId = currentMainDispatchId.value;
                  const now = Date.now();
                  const rem = Number(remainingSeats.value || 0);

                  return (applicantOptions.value || [])
                    .filter(a => {
                      // 1. 不是母單
                      if (a.dispatchId === mainId) return false;
                      // 2. 開始時間必須大於現在
                      if (new Date(a.useStart).getTime() < now) return false;
                        // 3. 沒剩座位就不顯示
                      if (rem <= 0) return false; 
                      //a. 座位數不能超過剩餘座位
                      if (Number(a.seats || 0) > rem) return false;          
                      return true;
                    })
                    .map(a => ({
                      ...a,

                      text: `${rocDate(a.useStart)} ${timeSpan(a.useStart, a.useEnd)}｜${a.origin}-${a.destination}｜${a.seats ?? 0} 人`
                    }));
                });



              // === 唯一清單 ===
              const uniqueDrivers = computed(() => {
                const s = new Set(rows.value.map(r => r.driver).filter(Boolean))
                return Array.from(s)
              });
              const uniqueApplicants = computed(() => {
                const set = new Set(rows.value.map(r => r.applicant).filter(Boolean));
                return [...set];
              });
              const uniquePlates = computed(() => {
                const set = new Set(rows.value.map(r => r.plate).filter(Boolean));
                return [...set];
              });

              // === 共乘模窗 ===
              function openMergeModal(id) {
                console.groupCollapsed("🟦 openMergeModal");
                console.log("input id=", id);
                showMergeModal.value = true;
                currentDispatchId.value = Number.isInteger(id) ? id : (dispatchOptions.value[0]?.id || null);
                console.log("✔ currentDispatchId =>", currentDispatchId.value);
                console.groupEnd();

                if (currentDispatchId.value) {
                  loadLinks();
                  loadDispatchOptions();
                }
              }

              async function loadLinks() {
                console.groupCollapsed("🟩 loadLinks");
                if (!currentDispatchId.value) {
                  console.warn("❎ 沒有 currentDispatchId，清空 mergedApps");
                  mergedApps.value = [];
                  console.groupEnd();
                  return;
                }
                const url = `/api/dispatch/${currentDispatchId.value}/links`;
                console.log("GET", url);
                try {
                  const res = await axios.get(url);
                  mergedApps.value = res.data || [];
                  console.log("✅ mergedApps length=", mergedApps.value.length);
                  if (DBG && mergedApps.value.length) console.log("mergedApps[0]=", mergedApps.value[0]);
                } catch (err) {
                  console.error("❌ loadLinks", httpErr(err));
                  alert("載入併單清單失敗");
                } finally {
                  console.groupEnd();
                }
              }

              async function openMergeFor(row) {
                console.groupCollapsed(" openMergeFor");
                console.log("row keys=", Object.keys(row));
                console.log("row.id=", row?.id, "row.dispatchId=", row?.dispatchId);
                currentDispatchId.value = Number(row?.dispatchId || row?.id) || null;
                console.log("✔ set currentDispatchId =>", currentDispatchId.value);
                console.groupEnd();

                if (currentDispatchId.value) {
                  await Promise.all([loadLinks(), loadDispatchOptions()]);
                } else {
                  console.warn("⚠ 無法設定 currentDispatchId，停止載入");
                }
              }

                      async function loadDispatchOptions() {
          if (!currentDispatchId.value) {
            applicantOptions.value = [];
            remainingSeats.value = 0;
            return;
          }
          const url = `/api/dispatch/${currentDispatchId.value}/available-apps`;
          try {
            const res = await axios.get(url);
            const payload = res.data || {};
            remainingSeats.value = payload.remainingSeats ?? 0;

            const list = payload.apps ?? [];
            applicantOptions.value = list.map(a => ({
              dispatchId: a.dispatchId,
              applyId: a.applyId,
              origin: a.origin,
              destination: a.destination,
              useStart: a.useStart,
              useEnd: a.useEnd,
              seats: a.seats,
              text: `${rocDate(a.useStart)} ${timeSpan(a.useStart, a.useEnd)}｜${a.origin || ''}-${a.destination || ''}｜${a.seats ?? 0} 人`
            }));
          } catch (err) {
            applicantOptions.value = [];
            remainingSeats.value = 0;
          }
        }



        async function addLink() {
          if (!currentDispatchId.value || !newChildDispatchId.value) { alert('請先選好母單與子單'); return; }
          const url = `/api/dispatch/${currentDispatchId.value}/links`;
          await axios.post(url, newChildDispatchId.value, { headers: { 'Content-Type': 'application/json' } });
          await Promise.all([loadLinks(), loadDispatchOptions(), reload()]);
          newChildDispatchId.value = null;
        }

              async function removeLink(dispatchId, applyId) {
                console.groupCollapsed("🟪 removeLink");
                console.log("dispatchId=", dispatchId, "applyId=", applyId);
                if (!dispatchId || !applyId) { console.warn("❎ 參數不足"); console.groupEnd(); return; }
                if (!confirm(`確定要取消申請 #${applyId} 的併單嗎？`)) { console.log("使用者取消"); console.groupEnd(); return; }

                const url = `/api/dispatch/${dispatchId}/links/${applyId}`;
                console.log("DELETE", url);
                try {
                  await axios.delete(url);
                  console.log("✅ removeLink OK");
                  await loadLinks();
                  await reload();
                } catch (err) {
                  console.error("❌ removeLink", httpErr(err));
                  alert("取消併單失敗");
                } finally {
                  console.groupEnd();
                }
              }

              // 工具
              const fmtNum = v => (v == null || v === '') ? '-' : String(v);
              const pad = n => String(n).padStart(2, '0')
              const rocDate = (d) => {
                const x = new Date(d); if (isNaN(x)) return ''
                const roc = x.getFullYear() - 1911
                return `${roc}/${pad(x.getMonth() + 1)}/${pad(x.getDate())}`
              }
              const timeSpan = (s, e) => {
                const a = new Date(s), b = new Date(e)
                if (isNaN(a) || isNaN(b)) return ''
                return `${pad(a.getHours())}:${pad(a.getMinutes())}~${pad(b.getHours())}:${pad(b.getMinutes())}`
              }
              const fmtKm = v => (v ?? '-') + (v != null ? '' : '')
              const endOfDay = d => new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59, 999)

              // 檢視與編輯
              const viewing = ref(null);
              const editing = ref(null);
              const drivers = ref([]);
              const vehicles = ref([]);
              const currentDriver = ref(null);
              const currentVehicle = ref(null);
              const selectedDriverId = ref(null);
              const selectedVehicleId = ref(null);
              const availDrivers = ref([]);
              const availVehicles = ref([]);

              const viewRow = async (r) => {
                try {
                  const res = await axios.get(`/api/dispatch/${r.dispatchId}`);
                  viewing.value = res.data;
                } catch (err) {
                  console.error(err);
                  alert("讀取失敗");
                }
              };
              const closeView = () => { viewing.value = null; };

              function canEdit(r) {
                if (!r.driverId) return true;
                if (!r.useStart) return false;
                const start = new Date(r.useStart);
                if (isNaN(start)) return false;
                return start > new Date();
              }

              const editRow = async (r) => {
                try {
                  viewing.value = null;
                  editing.value = r;
                  const appRes = await axios.get(`/api/carapplications/${r.applyId}`);
                  const app = appRes.data || {};

                  let drv = app.driverId ?? app.DriverId ?? r.driverId ?? null;
                  let veh = app.vehicleId ?? app.VehicleId ?? r.vehicleId ?? null;

                  selectedDriverId.value = drv !== null ? Number(drv) : null;
                  selectedVehicleId.value = veh !== null ? Number(veh) : null;

                  currentDriver.value = drv
                    ? { driverId: Number(drv), driverName: app.driverName ?? r.driver ?? '(未知駕駛)' }
                    : null;

                  currentVehicle.value = veh
                    ? {
                      vehicleId: Number(veh),
                      plateNo: app.plateNo ?? r.plate ?? '(未知車輛)',
                      capacity: app.capacity ?? r.capacity ?? '(未知載客量)'
                    }
                    : null;

                  const from = isoLocal(app.useStart ?? r.useStart);
                  const to = isoLocal(app.useEnd ?? r.useEnd);
                  const cap = Number(app.passengerCount ?? r.seats );

                  const fromIso = isoLocal(app.useStart ?? r.useStart);
                  const toIso   = isoLocal(app.useEnd ?? r.useEnd);

                  const [driversRes, vehiclesRes] = await Promise.all([
                       axios.get('/api/drivers-available', { params: { useStart: fromIso, useEnd: toIso } }),
                       axios.get('/api/vehicles-available', { params: { from: fromIso, to: toIso, capacity: cap || undefined } })
                     ]);

                        availDrivers.value = Array.isArray(apiData(driversRes)) ? apiData(driversRes) : [];
                        availVehicles.value = Array.isArray(apiData(vehiclesRes)) ? apiData(vehiclesRes) : [];
                        await reload();
                } catch (err) {
                  console.error("讀取可用人車失敗：", err);
                  alert("讀取可用人車失敗");
                  editing.value = null;
                }
              };

              function isoLocal(date) {
                if (!date) return "";
                const d = new Date(date);
                if (isNaN(d)) return "";
                const pad = n => String(n).padStart(2, "0");
                return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}T${pad(d.getHours())}:${d.getMinutes().toString().padStart(2,"0")}`;
              }

              //指派司機和車輛
            const confirmEdit = async () => {
              try {
                if (!editing.value) return; 

                await axios.put(`/api/dispatch/${editing.value.dispatchId}`, {
                  driverId: selectedDriverId.value,
                  vehicleId: selectedVehicleId.value
                }); 

                alert("✅ 已派車");
                editing.value = null;
                await reload();
              } catch (err) {
                console.error("更新派車失敗：", err);
                alert(err?.response?.data?.message || "更新派車失敗");
              }
            };



              const cancelEdit = () => { editing.value = null };

              const removeRow = async (r) => {
                if (!confirm(`確定刪除派車單 #${r.dispatchId} ?`)) return;
                try {
                  await axios.delete(`/api/dispatch/${r.dispatchId}`);
                  alert("刪除成功");
                  rows.value = rows.value.filter(x => x.dispatchId !== r.dispatchId);
                } catch (err) {
                  alert("刪除失敗");
                }
              };
              //載入所有紀錄
              async function loadRecords() {
               try {
                 const res = await axios.get("/api/carapplications");
                 records.value = res.data;
               } catch (err) {
                 console.error("讀取紀錄失敗：", err);
               }
             }

              const exportCsv = () => {
              const headers = ['用車日期','用車時間','目的地','事由','申請人','人數','里程','出發里程','回場里程','狀態','駕駛','車牌','長短差'];
              const rowsForCsv = Array.isArray(shown.value) ? shown.value : [];
                const Q = s => `"${String(s ?? '').replaceAll('"', '""')}"`;
                const lines = rowsForCsv.map(r => [
                  rocDate(r.useStart),
                  timeSpan(r.useStart, r.useEnd),
                  r.route || ((r.origin || '') + ' - ' + (r.destination || '')),
                  r.reasonType ? `(${r.reasonType}) ${r.reason || ''}` : (r.reason || ''),
                  r.applicant ?? '',
                  r.seats ?? '',
                  r.km ?? '',
                  r.odometerStart ?? '',
                  r.odometerEnd ?? '',
                  statusText(r.status),
                  r.driver ?? '',
                  r.plate ?? '',
                  r.longShort ?? ''
                ].map(Q).join(','));

                const bom = '\uFEFF';
                const csv = [headers.join(','), ...lines].join('\r\n');
                const blob = new Blob([bom + csv], { type: 'text/csv;charset=utf-8;' });

                const fileName = '派車紀錄.csv';
                if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                  window.navigator.msSaveOrOpenBlob(blob, fileName);
                } else {
                  const url = URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url; a.download = fileName;
                  document.body.appendChild(a);
                  a.click();
                  document.body.removeChild(a);
                  URL.revokeObjectURL(url);
                }
              };

              async function reload() {
                console.groupCollapsed("🟨 reload");
                const params = {
                  dateFrom: q.value.dateFrom || undefined,
                  dateTo: q.value.dateTo || undefined,
                  driver: q.value.driver || undefined,
                  applicant: q.value.applicant || undefined,
                  plateNo: q.value.plateNo || undefined,
                  order: 'id_desc'
                };
                console.log("GET /api/dispatch/records", params);
                try {
                  const res = await axios.get('/api/dispatch/records', { params });
                  console.log("✅ rows raw length=", (res.data || []).length);
                  rows.value = (res.data || []).map(normalize);
                  console.log("✅ rows normalized length=", rows.value.length);
                  if (DBG && rows.value.length) console.log("rows[0]=", rows.value[0]);
                } catch (err) {
                  console.error("❌ reload", httpErr(err));
                  rows.value = [];
                } finally {
                  lastUpdated.value = new Date().toLocaleString();
                  console.log("lastUpdated=", lastUpdated.value);
                  console.groupEnd();
                }
              }

              onMounted(() => {
                const { start, end } = getMonthRange();
                q.value.dateFrom = start;
                q.value.dateTo = end;
                reload();
                loadDispatchOptions();
              });

              function normalize(x) {
                const did = x.dispatchId ?? x.id ?? Math.random().toString(16).slice(2);
                return {
                  dispatchId: did,
                  applyId: x.applyId ?? x.ApplyId ?? null,
                  useStart: x.useStart ?? x.start ?? new Date(),
                  useEnd: x.useEnd ?? x.end ?? new Date(Date.now() + 60 * 60 * 1000),
                  route: x.route ?? `${x.origin ?? ''} - ${x.destination ?? ''}`,
                  tripType: x.tripType || "",
                  reasonType: x.reasonType ?? '',
                  reason: x.reason ?? x.applyReason ?? '',
                  applicant: x.applicant ?? x.applicantName ?? '',
                  seats: Number(x.seats ?? x.passengerCount ?? 0),
                  km: Number(x.km ?? x.tripDistance ?? 0),
                  status: x.status ?? x.dispatchStatus ?? '待指派',
                  driver: x.driver ?? x.driverName ?? '',
                  driverId: x.driverId ?? null,
                  plate: x.plate ?? x.plateNo ?? x.PlateNo ?? '',
                  vehicleId: x.vehicleId ?? null,
                  longShort: x.longShort ?? (Math.random() > 0.5 ? '長差' : '短差'),
                  odometerStart: x.odometerStart ?? x.OdometerStart ?? null,
                  odometerEnd:   x.odometerEnd   ?? x.OdometerEnd   ?? null,
                }
              }

              const statusText = (s) => {
                const k = String(s || "").trim();
                if (k === "已派車" || k.toLowerCase() === "approved") return "已派車";
                return "待指派";
              };
              const statusClass = (s) => {
                const k = String(s || "").trim();
                if (k === "已派車" || k.toLowerCase() === "approved") return "s-approved";
                return "s-wait";
              };

              watch(currentDispatchId, async (id, old) => {
                console.groupCollapsed("🟧 currentDispatchId changed");
                console.log("old =>", old, "new =>", id);
                if (!id) {
                  mergedApps.value = [];
                  applicantOptions.value = [];
                  console.warn("清空子清單（未選主派車單）");
                  console.groupEnd();
                  return;
                }
                await Promise.all([loadLinks(), loadDispatchOptions()]);
                console.groupEnd();
              });

              // === Return ===
              return {
                q, rows, shown,
                drivers, vehicles,
                // group 收合
                isGroupHead, isCollapsed, toggleGroup,
                // 下拉清單
                uniqueDrivers, uniqueApplicants, uniquePlates, dispatchOptions,
                // 更新時間
                lastUpdated,
                // 工具
                fmtNum,rocDate, timeSpan, fmtKm, statusText, statusClass, canEdit,
                // 狀態
                viewing, editing, currentDriver, currentVehicle,
                selectedDriverId, selectedVehicleId, availDrivers, availVehicles,
                // 併單
                showMergeModal, currentDispatchId, mergedApps, newChildDispatchId, 
                applicantOptions, currentMainDispatchId, filteredDispatchOptions,hasChildren,remainingSeats,
                // 方法
                openMergeFor, reload, viewRow, closeView, editRow, confirmEdit, cancelEdit,
                removeRow, openMergeModal, loadLinks, addLink, removeLink, exportCsv
              };
            }
          }).mount('#app')
        })
    </script>
</body>
