@{
    ViewData["Title"] = "車輛維護";
}
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;600;700&display=swap">
<link href="/css/Vehicle/Maintenance.css" rel="stylesheet" />


<div id="app" class="wrap" v-cloak>
    <div class="topbar">
        <h2 style="margin:0; color:#fff">車輛管理 ＞ 車輛維護</h2>
        <div class="vehicle-info">
            <span class="plate">{{ vehicleDetail.plate || '未選擇車輛' }}</span>
            <span class="status" :class="vehicleDetail.status">{{ vehicleDetail.status || '—' }}</span>
            <button v-if="vehicleDetail.status==='維修中'" class="btn-success" @@click="setAvailable">維修完成</button>
        </div>
    </div>

    <div class="grid">
        <!-- 左：車籍卡 -->
        <section class="card left">
            <div class="card-hd">
                <div class="title">汽車車歷登記卡</div>
                <div class="toolbar">
                    <select v-model="selectedVehicleId" class="select" @@change="onVehicleChanged">
                        <option v-for="v in vehicles" :key="v.vehicleId" :value="v.vehicleId">{{ v.plate }} ({{ v.status }})</option>
                    </select>
                </div>
            </div>
            <div class="card-bd">
                <div class="field"><label>來源</label><div class="fake">{{ vehicleDetail.source || '—' }}</div></div>
                <div class="field"><label>核准文號</label><div class="fake">{{ vehicleDetail.approvalNo || '—' }}</div></div>
                <div class="field"><label>購置日期</label><div class="fake">{{ vehicleDetail.purchaseDate?.slice(0,10) || '—' }}</div></div>
                <div class="field"><label>價值</label><div class="fake">{{ vehicleDetail.value || '—' }}</div></div>
                <div class="field"><label>請領牌照日期</label><div class="fake">{{ vehicleDetail.licenseDate?.slice(0,10) || '—' }}</div></div>
                <div class="field"><label>開始使用日期</label><div class="fake">{{ vehicleDetail.startUseDate?.slice(0,10) || '—' }}</div></div>
                <div class="field"><label>定期檢驗日期</label><div class="fake">{{ vehicleDetail.inspectionDate?.slice(0,10) || '—' }}</div></div>
                <div class="field"><label>排氣量</label><div class="fake">{{ vehicleDetail.engineCC || '—' }}</div></div>
                <div class="field"><label>引擎號碼</label><div class="fake">{{ vehicleDetail.engineNo || '—' }}</div></div>
                <div class="field"><label>廠牌</label><div class="fake">{{ vehicleDetail.brand || '—' }}</div></div>
                <div class="field"><label>年份</label><div class="fake">{{ vehicleDetail.year || '—' }}</div></div>
                <div class="field"><label>型式</label><div class="fake">{{ vehicleDetail.type || '—' }}</div></div>
                <div class="field"><label>(移轉)報停報廢</label><div class="fake">{{ vehicleDetail.retired ? '已報廢' : '—' }}</div></div>
            </div>
        </section>

        <!-- 右：保養/維修/驗車/違規/總覽 -->
        <section class="card">
            <div class="tabs">
                <div class="tab" :class="{active:tab==='record'}" @@click="tab='record'">紀錄總覽</div>
                <div class="tab" :class="{active:tab==='maint'}" @@click="tab='maint'">保養修配</div>
                <div class="tab" :class="{active:tab==='repair'}" @@click="tab='repair'">維修紀錄</div>
                <div class="tab" :class="{active:tab==='inspection'}" @@click="tab='inspection'">驗車紀錄</div>
                <div class="tab" :class="{active:tab==='violation'}" @@click="tab='violation'">違規紀錄</div>
            </div>
            <div v-if="tab==='record'">
                <div class="card-hd">
                    <div class="title">紀錄總覽</div>
                </div>
                <div class="card-bd table-wrap">
                    <table>
                        <thead>
                            <tr>
                                <th style="width:120px">日期</th>
                                <th style="width:80px">類別</th>
                                <th style="width:200px">項目/描述</th>
                                <th style="width:300px">細節</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="r in recordRows" :key="r.type+'-'+r.id">
                                <td class="mono">{{ (r.date??'').slice(0,10) }}</td>
                                <td>{{ r.type }}</td>
                                <td>{{ r.title }}</td>
                                <td>{{ r.detail }}</td>
                            </tr>
                            <tr v-if="!recordRows.length">
                                <td colspan="4" style="text-align:center;color:#64748b">尚無紀錄</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <!-- 保養紀錄 -->
            <div v-if="tab==='maint'">
                <div class="card-hd">
                    <div class="title">保養修配零件紀錄</div>
                    <div class="toolbar">
                        <button class="btn btn-primary" @@click="toggleMaintForm">{{ showMaintAdd ? '取消' : (editingMaintId ? '取消編輯' : '新增') }}</button>
                    </div>
                </div>

                <!-- 表單 -->
                <div class="card-bd" v-if="showMaintAdd">
                    <div class="form-row">
                        <input type="date" v-model="maintForm.date" />
                        <input type="number" v-model.number="maintForm.odometer" placeholder="里程" />
                        <input type="text" v-model="maintForm.item" placeholder="保養項目" />
                        <input type="text" v-model="maintForm.unit" placeholder="單位" />
                        <input type="number" v-model.number="maintForm.qty" step="0.1" placeholder="數量" />
                        <input type="number" v-model.number="maintForm.amount" step="0.1" placeholder="單價" />
                        <input type="text" v-model="maintForm.vendor" placeholder="承修廠商" />
                        <input type="text" v-model="maintForm.note" placeholder="備註" />
                        <input id="nextDueDate" type="date" class="form-control" v-model="maintForm.nextDueDate" placeholder="下次保養日期" />

                    </div>
                    <div style="text-align:right">
                        <button class="btn" @@click="cancelMaint">取消</button>
                        <button class="btn btn-primary" style="margin-left:8px" @@click="saveMaint">{{ editingMaintId ? '更新' : '儲存' }}</button>
                    </div>
                </div>

                <div class="card-bd table-wrap">
                    <table>
                        <thead>
                            <tr>
                                <th style="width:120px">保養日期</th>
                                <th style="width:80px">里程</th>
                                <th style="width:220px">保養項目</th>
                                <th class="nowrap" style="width:60px">單位</th>
                                <th class="nowrap" style="width:70px">數量</th>
                                <th style="width:90px">單價</th>
                                <th style="width:100px">金額</th>
                                <th style="width:160px">承修廠商</th>
                                <th style="width:120px">備註</th>
                                <th class="nowrap" style="width:120px">下次保養日期</th>
                                <th style="width:80px">功能</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="r in maintenance" :key="r.id">
                                <td class="mono nowrap">{{ r?.date || '—' }}</td>
                                <td class="mono">{{ r.odometer ?? '' }}</td>
                                <td>{{ r.item }}</td>
                                <td>{{ r.unit || '' }}</td>
                                <td class="mono">{{ fmtNum(r.qty) }}</td>
                                <td class="mono">{{ fmtMoney(r.amount) }}</td>
                                <td class="mono">{{ fmtMoney(r.subtotal) }}</td>
                                <td>{{ r.vendor || '' }}</td>
                                <td>{{ r.note || '' }}</td>
                                <td>
                                    <span v-if="r && r.nextDueDate">{{ toISODate(r.nextDueDate) }}</span>
                                    <span v-else>—</span>
                                    <span v-if="r && r.nextDueDate && isDueSoon(r.nextDueDate)" class="badge bg-warning ms-1">即將到期</span>
                                </td>
                                <td class="row-actions">
                                    <button class="icon-btn" title="編輯" @@click="startEditMaint(r)">✏️</button>
                                    <button class="icon-btn" title="刪除" @@click="removeMaint(r)">🗑️</button>
                                </td>
                            </tr>
                            <tr v-if="!maintenance.length"><td colspan="11" style="text-align:center; color:#64748b">尚無資料</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- 維修紀錄 -->
            <div v-if="tab==='repair'">
                <div class="card-hd">
                    <div class="title">維修紀錄</div>
                    <div class="toolbar">
                        <button class="btn btn-primary" @@click="toggleRepairForm">{{ showRepairAdd ? '取消' : (editingRepairId ? '取消編輯' : '新增') }}</button>
                    </div>
                </div>

                <!-- 表單 -->
                <div class="card-bd" v-if="showRepairAdd">
                    <div class="form-row" style="grid-template-columns:repeat(6,1fr);">
                        <input type="date" v-model="repairForm.date" />
                        <input type="text" v-model="repairForm.place" placeholder="送修地點" />
                        <input type="text" v-model="repairForm.issue" placeholder="故障描述" />
                        <input type="number" v-model.number="repairForm.costEstimate" step="0.01" placeholder="費用" />
                        <input type="text" v-model="repairForm.vendor" placeholder="廠商" />
                        <input type="text" v-model="repairForm.note" placeholder="聯絡人/電話（備註）" />
                    </div>
                    <div style="text-align:right">
                        <button class="btn" @@click="cancelRepair">取消</button>
                        <button class="btn btn-primary" style="margin-left:8px" @@click="saveRepair">{{ editingRepairId ? '更新' : '儲存' }}</button>
                    </div>
                </div>

                <!-- 清單 -->
                <div class="card-bd table-wrap" style="margin-top:16px">
                    <table>
                        <thead>
                            <tr>
                                <th style="width:80px">日期</th>
                                <th style="width:100px">地點</th>
                                <th style="width:160px">故障描述</th>
                                <th style="width:100px">狀態</th>
                                <th style="width:100px">費用</th>
                                <th style="width:100px">廠商</th>
                                <th style="width:160px">備註</th>
                                <th style="width:80px">功能</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="r in repairRows" :key="r.id">
                                <td class="mono nowrap">{{ r.date || '—' }}</td>
                                <td>{{ r.place }}</td>
                                <td>{{ r.issue }}</td>
                                <td>{{ r.status }}</td>
                                <td class="mono">{{ fmtMoney(r.costEstimate) }}</td>
                                <td>{{ r.vendor || '' }}</td>
                                <td>{{ r.note || '' }}</td>
                                <td class="row-actions">
                                    <button class="icon-btn" title="編輯" @@click="startEditRepair(r)">✏️</button>
                                    <button class="icon-btn" title="刪除" @@click="removeRepair(r.id)">🗑️</button>
                                </td>
                            </tr>
                            <tr v-if="!repairRows.length"><td colspan="8" style="text-align:center;color:#64748b">尚無維修資料</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- 驗車紀錄 -->
            <div v-if="tab==='inspection'">
                <div class="card-hd">
                    <div class="title">驗車紀錄</div>
                    <div class="toolbar">
                        <button class="btn btn-primary" @@click="toggleInspectionForm">{{ showInspectionAdd ? '取消' : (inspectionEditId ? '取消編輯' : '新增') }}</button>
                    </div>
                </div>
                <div class="card-bd" v-if="showInspectionAdd">
                    <div class="form-row" style="grid-template-columns: repeat(6,1fr);">
                        <input type="date" v-model="inspectionForm.date" />
                        <input type="text" v-model="inspectionForm.station" placeholder="驗車站 / 監理站" />
                        <select v-model="inspectionForm.result"><option value="合格">合格</option><option value="不合格">不合格</option></select>
                        <input type="date" v-model="inspectionForm.nextDueDate" />
                        <input type="number" v-model.number="inspectionForm.odometerKm" placeholder="里程(KM)" />
                        <input type="text" v-model="inspectionForm.notes" placeholder="備註" />
                    </div>
                    <div style="text-align:right"><button class="btn" @@click="cancelInspection">取消</button><button class="btn btn-primary" style="margin-left:8px" @@click="saveInspection">{{ inspectionEditId ? '更新' : '儲存' }}</button></div>
                </div>
                <div class="card-bd table-wrap">
                    <table>
                        <thead>
                            <tr>
                                <th style="width:120px">驗車日期</th>
                                <th style="width:160px">驗車站</th>
                                <th style="width:80px">結果</th>
                                <th style="width:100px">里程</th>
                                <th style="width:200px">備註</th>
                                <th style="width:120px">下次到期</th>
                                <th style="width:90px">功能</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="r in inspectionRows" :key="r.id">
                                <td class="mono">{{ (r.date ?? '').slice(0,10) }}</td>
                                <td>{{ r.station || '' }}</td>
                                <td>{{ r.result || '' }}</td>
                                <td class="mono">{{ r.odometerKm ?? '' }}</td>
                                <td>{{ r.notes || '' }}</td>
                                <td>
                                    <span v-if="r && r.nextDueDate">{{ toISODate(r.nextDueDate) }}</span>
                                    <span v-else>—</span>
                                    <span v-if="r && r.nextDueDate && isDueSoon(r.nextDueDate)" class="badge bg-warning ms-1">即將到期</span>
                                </td>
                                <td class="row-actions"><button class="icon-btn" title="編輯" @@click="startEditInspection(r)">✏️</button><button class="icon-btn" title="刪除" @@click="removeInspection(r.id)">🗑️</button></td>
                            </tr>
                            <tr v-if="!inspectionRows.length"><td colspan="7" style="text-align:center; color:#64748b">尚無驗車紀錄</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- 違規紀錄 -->
            <div v-if="tab==='violation'">
                <div class="card-hd">
                    <div class="title">違規紀錄</div>
                    <div class="toolbar">
                        <button class="btn btn-primary" @@click="toggleViolationForm">{{ showViolationAdd ? '取消' : (violationEditId ? '取消編輯' : '新增') }}</button>
                    </div>
                </div>
                <div class="card-bd" v-if="showViolationAdd">
                    <div class="form-row" style="grid-template-columns:repeat(7,1fr);">
                        <input type="date" v-model="violationForm.date" />
                        <input type="text" v-model="violationForm.location" placeholder="地點" />
                        <input type="text" v-model="violationForm.category" placeholder="類別(如：超速)" />
                        <input type="number" v-model.number="violationForm.fineAmount" placeholder="罰鍰(元)" />
                        <select v-model="violationForm.status"><option value="未繳">未繳</option><option value="已繳">已繳</option><option value="申訴中">申訴中</option></select>
                        <input type="text" v-model="violationForm.notes" placeholder="備註" />
                    </div>
                    <div class="form-row" style="grid-template-columns:repeat(2,1fr);">
                        <input type="date" v-model="violationForm.dueDate" placeholder="繳費期限" />
                        <input type="date" v-model="violationForm.paidDate" placeholder="繳費日期" />
                    </div>
                    <div style="text-align:right"><button class="btn" @@click="cancelViolation">取消</button><button class="btn btn-primary" style="margin-left:8px" @@click="saveViolation">{{ violationEditId ? '更新' : '儲存' }}</button></div>
                </div>
                <div class="card-bd table-wrap">
                    <table>
                        <thead>
                            <tr>
                                <th style="width:120px">違規日期</th>
                                <th style="width:160px">地點</th>
                                <th style="width:120px">類別</th>
                                <th style="width:100px">罰鍰</th>
                                <th style="width:100px">狀態</th>
                                <th style="width:120px">期限</th>
                                <th style="width:120px">繳費日</th>
                                <th style="width:200px">備註</th>
                                <th style="width:90px">功能</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="r in violationRows" :key="r.id">
                                <td class="mono nowrap">{{ (r.date ?? '').slice(0,10) }}</td>
                                <td>{{ r.location || '' }}</td>
                                <td>{{ r.category || '' }}</td>
                                <td class="mono">{{ fmtMoney(r.fineAmount) }}</td>
                                <td>{{ r.status || '' }}</td>
                                <td class="mono nowrap">{{ r.dueDate || '' }}</td>
                                <td class="mono nowrap">{{ r.paidDate || '' }}</td>
                                <td>{{ r.notes || '' }}</td>
                                <td class="row-actions"><button class="icon-btn" title="編輯" @@click="startEditViolation(r)">✏️</button><button class="icon-btn" title="刪除" @@click="removeViolation(r.id)">🗑️</button></td>
                            </tr>
                            <tr v-if="!violationRows.length"><td colspan="10" style="text-align:center; color:#64748b">尚無違規紀錄</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
           

        </section>
    </div>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    const { createApp, ref, computed, onMounted } = Vue;
    createApp({
      setup(){
        // 工具
    const toISODate = (val) => {
      if (!val) return '';
      // API 多半回字串；字串直接切 'T' 最穩，不涉入時區
      if (typeof val === 'string') return val.split('T')[0].slice(0, 10);
      // 其餘（Date 或數值時間戳）
      const d = new Date(val);
      if (isNaN(d)) return '';
      // 把本地時間挪回「本地日」零點，避免 UTC 造成跨日
      d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
      return d.toISOString().slice(0, 10);
    };
       const fmtNum = v => (v==null || v==='') ? '' : Number(v).toString();
      const fmtMoney = v => (v==null || v==='') ? '' : Number(v).toLocaleString('zh-TW', {minimumFractionDigits:0});
     function isDueSoon(d){
      const today = new Date();
      const due = new Date(toISODate(d) || today);
      const diff = (due - today) / (1000*60*60*24);
      return diff >= 0 &&  diff <= 30; // 30天內到期
    }

        // 狀態
        const vehicles = ref([]);
        const selectedVehicleId = ref(0);
        const vehicleDetail = ref({});
        const tab = ref('record');

        // 保養
        const maintenance = ref([]);
        const showMaintAdd = ref(false);
        const editingMaintId = ref(null);
        const maintForm = ref({ 
            date: toISODate(new Date()), 
            odometer:null, 
            item:'', 
            unit:'', 
            qty:null,
            amount:null, 
            vendor:'',
            note:'', 
            nextDueDate:''
        });

        function toggleMaintForm(){
          if(!showMaintAdd.value){ // 打開時重置
            editingMaintId.value = null;
            maintForm.value = { 
                date: toISODate(new Date()), 
                odometer:null, 
                item:'', 
                unit:'', 
                qty:null, 
                amount:null, 
                vendor:'', 
                note:'',
                nextDueDate:'' 
            };
          }
          showMaintAdd.value = !showMaintAdd.value;
        }
        function startEditMaint(r){
          editingMaintId.value = r.id;
          showMaintAdd.value = true;
          maintForm.value = {
            date: (r.date||'').slice(0,10), 
            odometer:r.odometer??null, 
            item:r.item, 
            unit:r.unit||'', 
            qty:r.qty??null,
            amount:r.amount??null, 
            vendor:r.vendor||'', 
            note:r.note||'',
            nextDueDate: toISODate(r.nextDueDate
            )
          };
        }
        function cancelMaint(){ showMaintAdd.value=false; editingMaintId.value=null; }
        async function saveMaint(){
          if(!selectedVehicleId.value){ alert('請先選擇車輛'); return; }
          if(!maintForm.value.item?.trim()){ alert('請輸入保養項目'); return; }
          const plate = (vehicles.value.find(v=>v.vehicleId===selectedVehicleId.value)||{}).plate || null;
          const payload = { 
              vehicleId:selectedVehicleId.value, 
              vehiclePlate:plate, 
              date:maintForm.value.date,
            odometer:maintForm.value.odometer, 
            item:maintForm.value.item.trim(), 
            unit:maintForm.value.unit||null,
            qty:maintForm.value.qty, 
            amount:maintForm.value.amount, 
            vendor:maintForm.value.vendor||null,
            note:(maintForm.value.note||'').trim()||null,
            nextDueDate: maintForm.value.nextDueDate 
        };
          if(editingMaintId.value)
          { 
              await axios.put(`/api/maintenance/${editingMaintId.value}`, 
              payload, 
              { 
                  withCredentials:true 
              }); 
          }else{ 
              await axios.post('/api/maintenance', 
              payload, { 
                  withCredentials:true 
              }); 
          }
          editingMaintId.value=null; showMaintAdd.value=false; await loadMaintenance();
        }
        async function removeMaint(r){ if(!confirm('確定刪除這筆保養紀錄？')) return; await axios.delete(`/api/maintenance/${r.id}`, { withCredentials:true }); await loadMaintenance(); }

        // 維修
        const repairs = ref([]);
        const showRepairAdd = ref(false);
        const editingRepairId = ref(null);
        const repairForm = ref({ 
            date: toISODate(new Date()),
            place:'', 
            issue:'', 
            costEstimate:null, 
            vendor:'',
            note:'', 
            odometer:null 
        });

        function toggleRepairForm(){
          if(!showRepairAdd.value){ // 打開時重置
            editingRepairId.value = null;
            repairForm.value = { 
                date: toISODate(new Date()),
                place:'', 
                issue:'', 
                costEstimate:null, 
                vendor:'', 
                note:'', 
                odometer:null 
            };
          }
          showRepairAdd.value = !showRepairAdd.value;
        }
        function startEditRepair(r){
          editingRepairId.value = r.id;
          showRepairAdd.value = true;
          repairForm.value = { 
              date:r.date||toISODate(new Date()),
              place:r.place||'', 
              issue:r.issue||'', 
              costEstimate:r.costEstimate??null,
              vendor:r.vendor||'',
              note:r.note||'', 
              odometer:null };
        }
        function cancelRepair(){ showRepairAdd.value=false; editingRepairId.value=null; }
        async function saveRepair(){
          if(!selectedVehicleId.value){ alert('請先選擇車輛'); return; }
          if(!repairForm.value.issue?.trim()){ alert('請輸入故障描述'); return; }
          const plate = (vehicles.value.find(v=>v.vehicleId===selectedVehicleId.value)||{}).plate || null;
          const payload = { 
              vehicleId:selectedVehicleId.value, 
              plateNo:plate, 
              date:repairForm.value.date, 
              place:repairForm.value.place||null,
              odometer:repairForm.value.odometer??null,
              issue:repairForm.value.issue.trim(), 
              vendor:repairForm.value.vendor||null,
              costEstimate:repairForm.value.costEstimate??null, 
              note:(repairForm.value.note||'').trim()||null 
          };
          if(editingRepairId.value)
          { 
              await axios.put(`/api/maintenance/repair/${editingRepairId.value}`, 
          payload,
          { 
              withCredentials:true 
          }); 
          }else{
            await axios.post('/api/maintenance/repair', 
            payload, { 
                withCredentials:true 
            });
            // 新報修 → 狀態調為維修中
            await axios.put(`/api/maintenance/vehicle/${selectedVehicleId.value}/status`, JSON.stringify('維修中'), 
            { 
                withCredentials:true, headers:{'Content-Type':'application/json'} 
            });
            const idx = vehicles.value.findIndex(v=>v.vehicleId===selectedVehicleId.value); 
            if(idx>=0) vehicles.value[idx].status='維修中';
          }
          editingRepairId.value=null; 
          showRepairAdd.value=false; 
          await loadVehicleDetail();
          await loadRepairs();
        }
        async function removeRepair(id){ 
            if(!confirm('確定刪除此筆報修紀錄？')) 
            return; await axios.delete(`/api/maintenance/repair/${id}`, 
            { withCredentials:true }); 
            await loadRepairs(); }

        // 驗車
        const inspections = ref([]);
        const showInspectionAdd = ref(false);
        const inspectionEditId = ref(null);
        const inspectionForm = ref({ date: toISODate(new Date()), station:"", result:"合格", nextDueDate:"", odometerKm:null, notes:"" });
        //違規
        const violations = ref([]);
        const showViolationAdd = ref(false);
        const violationEditId = ref(null);
        const violationForm = ref({ date: toISODate(new Date()), location:"", category:"", points:null, fineAmount:null, status:"未繳", dueDate:"", paidDate:"", notes:"" });

        // 計算欄位
        const repairRows = computed(()=> (Array.isArray(repairs.value)?repairs.value:[]).map((x, i)=>({
          id: x.repairRequestId ?? x.id ?? i,
          date: x.date || '', 
          place: x.place || '',
          issue: x.issue || '', 
          status: x.status || '',
          costEstimate: x.costEstimate ?? null, 
          vendor: x.vendor || '', 
          note: x.note || ''
        })));
        const inspectionRows = computed(()=> (Array.isArray(inspections.value)?inspections.value:[]).map(x=>({
          id: x.inspectionId ?? x.id,
          date: (x.inspectionDate ?? x.date) || '',
          station: x.station || '', 
          result: x.result || '',
          nextDueDate: (x.nextDueDate||'') && (x.nextDueDate||'').slice(0,10), 
          odometerKm: x.odometerKm ?? x.odometer ?? null, 
          notes: x.notes || ''
        })));
        const violationRows = computed(()=> (Array.isArray(violations.value)?violations.value:[]).map(x=>({
          id: x.violationId ?? x.id,
          date: (x.violationDate ?? x.date) || '', 
          location: x.location || '', 
          category: x.category || '',
          points: x.points ?? null, 
          fineAmount: x.fineAmount ?? null, 
          status: x.status || '',
          dueDate: (x.dueDate||'') && (x.dueDate||'').slice(0,10),
          paidDate: (x.paidDate||'') && (x.paidDate||'').slice(0,10), 
          notes: x.notes || ''
        })));
        //紀錄總覽
                const recordRows = computed(() => [
      ...(maintenance.value || []).map(m => ({
        id: m.id,
        date: m.date,
        type: '保養',
        title: m.item,
        detail: m.note || ''   
      })),
      ...(repairs.value || []).map(r => ({
        id: r.id,
        date: r.date,
        type: '維修',
        title: r.issue,
        detail: r.note || ''   
      })),
      ...(inspections.value || []).map(i => ({
        id: i.id,
        date: i.date,
        type: '驗車',
        title: i.station,
        detail: i.notes || ''  
      })),
      ...(violations.value || []).map(v => ({
        id: v.id,
        date: v.date,
        type: '違規',
        title: v.category,
        detail: v.notes || ''  
      }))
    ].sort((a,b)=> new Date(b.date) - new Date(a.date)));



        // 請求
        async function loadVehicles(){ 
            const res = await axios.get('/api/maintenance/vehicles', { withCredentials:true }); 
            vehicles.value = res.data || []; 
            if(vehicles.value.length && !selectedVehicleId.value){ 
                selectedVehicleId.value = vehicles.value[0].vehicleId; 
            } }
        async function loadVehicleDetail(){ 
            if(!selectedVehicleId.value){ 
            vehicleDetail.value={}; return;} 
        const res = await axios.get(`/api/maintenance/vehicle/${selectedVehicleId.value}`, { withCredentials:true });
        vehicleDetail.value = res.data || {}; }
    async function setAvailable() {
      if (!selectedVehicleId.value) return;

      try {
        // 1) 取出目前清單中最新一筆「待處理」維修
        const latest = (repairs.value || [])
          .filter(r => r.status === "待處理")
          .sort((a, b) => new Date(b.date) - new Date(a.date))[0];

        // 2) 若有找到待處理，就把那一筆狀態改「完成」
        if (latest) {
          const id = latest.repairRequestId ?? latest.id; // 後端回的是 repairRequestId
          await axios.put(
            `/api/maintenance/repair/${id}/status`,
            JSON.stringify("完成"),
            { withCredentials: true, headers: { "Content-Type": "application/json" } }
          );
        }

        // 3) 車輛狀態改「可用」
        await axios.put(
          `/api/maintenance/vehicle/${selectedVehicleId.value}/status`,
          JSON.stringify("可用"),
          { withCredentials:true, headers:{ 'Content-Type':'application/json' } }
        );

        // 4) 重新載入資料
        await loadRepairs();
        await loadVehicleDetail();
        await loadVehicles();

        alert(latest ? " 已將最新一筆維修改為完成，車輛已可用" : " 車輛已可用（沒有待處理維修）");
      } catch (err) {
        console.error("更新失敗", err?.response?.data || err);
        alert(" 更新失敗");
      }
    }

        async function loadMaintenance(){ 
            if(!selectedVehicleId.value) return; 
            const res = await axios.get('/api/maintenance', { params:{ vehicleId:selectedVehicleId.value }, withCredentials:true });
            maintenance.value = res.data || []; }
        async function loadRepairs(){ 
            if(!selectedVehicleId.value){ repairs.value=[]; return;} 
            const res = await axios.get('/api/maintenance/repairs', { params:{ vehicleId:selectedVehicleId.value }, withCredentials:true }); 
            repairs.value = Array.isArray(res.data)? res.data: []; }
        async function loadInspections(){ 
            if(!selectedVehicleId.value){ inspections.value=[]; return;} 
            const res = await axios.get('/api/maintenance/inspections', { params:{ vehicleId:selectedVehicleId.value }, withCredentials:true }); 
            inspections.value = Array.isArray(res.data)? res.data: []; }
        async function loadViolations(){ 
            if(!selectedVehicleId.value){ violations.value=[]; return;} 
            const res = await axios.get('/api/maintenance/violations', { params:{ vehicleId:selectedVehicleId.value }, withCredentials:true }); 
            violations.value = Array.isArray(res.data)? res.data: []; }

        function onVehicleChanged(){ 
            loadMaintenance(); 
            loadVehicleDetail(); 
            loadRepairs(); 
            loadInspections(); 
            loadViolations(); 
        }

        // 驗車/違規：
        function toggleInspectionForm(){ 
            if(!showInspectionAdd.value){ inspectionEditId.value=null; 
                inspectionForm.value={ date:toISODate(
                    new Date()), 
                    station:"", 
                    result:"合格", 
                    nextDueDate:"", 
                    odometerKm:null, 
                    notes:"" 
                }; } showInspectionAdd.value=!showInspectionAdd.value; }
        function cancelInspection(){ 
            showInspectionAdd.value=false; inspectionEditId.value=null; 
        }
        function startEditInspection(r){ 
            inspectionEditId.value=r.id; showInspectionAdd.value=true; 
            inspectionForm.value={ date:r.date||toISODate(
                new Date()), 
                station:r.station||"", 
                result:r.result||"合格", 
                nextDueDate:r.nextDueDate||"",
                odometerKm:r.odometerKm??null, 
                notes:r.notes||"" }; 
        }
        async function saveInspection(){ 
            if(!selectedVehicleId.value){ alert('請先選擇車輛'); return;} 
            const payload={ 
                vehicleId:selectedVehicleId.value, 
                inspectionDate:inspectionForm.value.date, 
                station:inspectionForm.value.station||null, 
                result:inspectionForm.value.result||'合格', 
                nextDueDate:inspectionForm.value.nextDueDate||null, 
                odometerKm:inspectionForm.value.odometerKm??null, 
                notes:inspectionForm.value.notes||null }; 
                if(!inspectionEditId.value){ await axios.post('/api/maintenance/inspections', payload, { withCredentials:true, headers:{'Content-Type':'application/json'} }); 
                } else { 
                    await axios.put(`/api/maintenance/inspections/${inspectionEditId.value}`, payload, { withCredentials:true, headers:{'Content-Type':'application/json'} }); } showInspectionAdd.value=false; inspectionEditId.value=null; await loadInspections(); }
        async function removeInspection(id){ 
            if(!confirm('確定刪除此筆驗車紀錄？')) return; 
            await axios.delete(`/api/maintenance/inspections/${id}`, { withCredentials:true }); 
            await loadInspections(); }
        //違規：
        function toggleViolationForm(){ 
            if(!showViolationAdd.value){ 
                violationEditId.value=null; 
                violationForm.value={ date:toISODate
                    (new Date()), 
                    location:"",
                    category:"", 
                    points:null, 
                    fineAmount:null, 
                    status:"未繳", 
                    dueDate:"", 
                    paidDate:"", 
                    notes:"" }; } 
                    showViolationAdd.value=!showViolationAdd.value; }
        function cancelViolation(){ 
            showViolationAdd.value=false; 
            violationEditId.value=null; 
        }
        function startEditViolation(r){ 
            violationEditId.value=r.id; 
            showViolationAdd.value=true; 
            violationForm.value={ 
                date:r.date||toISODate(
                    new Date()), 
                    location:r.location||"", 
                    category:r.category||"", 
                    points:r.points??null, 
                    fineAmount:r.fineAmount??null, 
                    status:r.status||"未繳", 
                    dueDate:r.dueDate||"", 
                    paidDate:r.paidDate||"", 
                    notes:r.notes||"" }; 
                }
        async function saveViolation(){
            if(!selectedVehicleId.value){ 
                alert('請先選擇車輛'); return;} 
                const payload={ 
                    vehicleId:selectedVehicleId.value, 
                    violationDate:violationForm.value.date, 
                    location:violationForm.value.location||null, 
                    category:violationForm.value.category||null, 
                    points:violationForm.value.points??null, 
                    fineAmount:violationForm.value.fineAmount??null, 
                    status:violationForm.value.status||'未繳', 
                    dueDate:violationForm.value.dueDate||null, 
                    paidDate:violationForm.value.paidDate||null, 
                    notes:violationForm.value.notes||null }; 
                    if(!violationEditId.value){ 
                        await axios.post('/api/maintenance/violations', payload, { 
                            withCredentials:true, 
                            headers:{'Content-Type':'application/json'} }); 
                    } else { await axios.put(`/api/maintenance/violations/${violationEditId.value}`, payload, { withCredentials:true, headers:{'Content-Type':'application/json'} }); } 
                    showViolationAdd.value=false; violationEditId.value=null; await loadViolations(); 
                }
        async function removeViolation(id){ 
            if(!confirm('確定刪除此筆違規紀錄？')) return; 
            await axios.delete(`/api/maintenance/violations/${id}`, { withCredentials:true }); 
            await loadViolations(); }

        onMounted(async()=>{ 
            await loadVehicles(); 
            await loadMaintenance(); 
            await loadVehicleDetail(); 
            await loadRepairs(); 
            await loadInspections(); 
            await loadViolations(); 
        });

       

        return { 
          vehicles, selectedVehicleId, vehicleDetail, tab, fmtNum, fmtMoney,recordRows,toISODate,
          // 車況
          setAvailable, onVehicleChanged,
          // 保養
          maintenance, showMaintAdd, editingMaintId, maintForm, toggleMaintForm, startEditMaint, cancelMaint, saveMaint, removeMaint,isDueSoon,
          // 維修
          repairs, repairRows, showRepairAdd, editingRepairId, repairForm, toggleRepairForm, startEditRepair, cancelRepair, saveRepair, removeRepair,
          // 驗車
          inspections, inspectionRows, showInspectionAdd, inspectionEditId, inspectionForm, toggleInspectionForm, cancelInspection, startEditInspection, saveInspection, removeInspection,
          // 違規
          violations, violationRows, showViolationAdd, violationEditId, violationForm, toggleViolationForm, cancelViolation, startEditViolation, saveViolation, removeViolation
        };
      }
    }).mount('#app');
</script>
