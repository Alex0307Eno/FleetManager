@{
    ViewData["Title"] = "用車申請";
}
<head>
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link href="/css/Dispatch/CarApply.css" rel="stylesheet" />
</head>


<body>
    <div id="app" class="container" v-cloak>
        <form id="car-form">
            <!-- 🚗 查詢區 (永遠顯示) -->
            <div class="section">
                <div class="section-hd">
                    <div>用車申請</div>
                    <small>
                        <label style="margin-right:12px"><input type="radio" value="self" v-model="applyFor" /> 本人申請</label>
                        <label><input type="radio" value="other" v-model="applyFor" /> 代他人申請</label>
                    </small>
                    <div v-if="applyFor==='other'" class="form-row" style="margin-top:8px;">
                        <label style="width:100px;">選擇申請人</label>
                        <select v-model.number="selectedApplicantId" class="form-control" style="flex:1;">
                            <option disabled :value="null">請選擇申請人</option>
                            <option v-for="a in applicants" :key="a.applicantId" :value="a.applicantId">
                                {{ a.name }}（{{ a.dept || '—' }}）
                            </option>
                        </select>
                    </div>
                </div>
                <div>
                    <label>起始時間 *</label>
                    <input type="datetime-local" class="form-control" v-model="useStart" />
                </div>
                <div class="section">
                    <!-- 標題列 -->
                    <div class="row mb-2 bg-primary text-white text-center" style="padding:8px 0;">
                        <div class="col-3">出發地</div>
                        <div class="col-3">目的地</div>
                        <div class="col-3">來回 | 單程</div>
                        <div class="col-2">動作</div>
                    </div>
                </div>

                <div class="section-bd">
                    <div class="row align-items-center mb-2">
                        <div class="col-3">
                            <input id="orig" class="form-control" placeholder="請輸入出發地" v-model="origin" required />
                            <div class="ac-dropdown" id="ac-orig"></div>
                        </div>
                       

                        <input type="hidden" name="StopsJson" id="StopsJson">

                        <div class="col-3">
                            <input id="dest" class="form-control" placeholder="請輸入目的地" v-model="destination" required />
                            <div class="ac-dropdown" id="ac-dest"></div>
                        </div>



                        <div class="col-3">
                            <select class="form-control" v-model="tripType">
                                <option value="round">來回</option>
                                <option value="single">單程</option>
                            </select>
                        </div>

                        <div class="col-2 text-center">
                            <button type="button" class="btn btn-primary" @@click="calcDistance">查詢</button>
                        </div>
                    </div>
                   

                    <!-- 查詢結果 -->
                    <div v-if="singleDistance && singleDuration" class="row mt-3">
                        <div class="col">
                            <div class="metric">
                                🚗 單程距離：約 <b>{{ singleDistance }}</b>
                                ⏱ 單程時間：約 <b>{{ singleDuration }}</b>
                            </div>
                        </div>
                        <div class="col">
                            <div class="metric">
                                🔁 來回距離：約 <b>{{ roundTripDistance }}</b>
                                ⏱ 來回時間：約 <b>{{ roundTripDuration }}</b>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 其他表單內容 (查詢後才顯示) -->
            <div v-show="showForm">
                <!-- 用車申請（申請人 + 車輛卡） -->
                <div class="section-bd">
                    <div class="grid-2">
                        <!-- 左側：申請人卡 + 欄位 -->
                        <div>
                            <div class="card profile" style="margin-bottom:12px">
                                <div class="avatar">👤</div>
                                <div>
                                    <div style="font-weight:700; font-size:18px">
                                        {{ applicant.name }}
                                        <span class="muted" style="font-weight:500">
                                            ({{ applicant.birth ? applicant.birth.substring(0,10) : '' }})
                                        </span>
                                    </div>
                                    <div class="kv"><span class="label">單位</span><span class="val">{{ applicant.dept }}</span></div>
                                    <div class="kv"><span class="label">分機</span><span class="val">{{ applicant.ext }}</span></div>
                                    <div class="kv"><span class="label">Email</span><span class="val">{{ applicant.email }}</span></div>
                                </div>
                            </div>

                            <div class="grid-3">
                                <div>
                                    <label>車輛類別 *</label>
                                    <select v-model="vehicleType">
                                        <option value="汽車">汽車</option>
                                    </select>
                                </div>
                                <div>
                                    <label>事由 *</label>
                                    <select v-model="purposeType">
                                        <option value="公務車(不可選車)">公務車(不可選車)</option>
                                        @* <option value="公務車(可選車)">公務車(可選車)</option> *@
                                    </select>
                                </div>

                                <!-- 只有選「公務車(可選車)」時才出現車輛下拉 -->
                                <div v-if="purposeType === '公務車(可選車)'">
                                    <label>車輛 *</label>
                                    <select v-model="assign.vehicleId">
                                        <option :value="null">（未選擇）</option>
                                        <option v-for="v in availableVehicles"
                                                :key="v.vehicleId"
                                                :value="v.vehicleId">
                                            {{ v.plateNo }} ({{ v.capacity }}人座)
                                        </option>
                                    </select>
                                    <small class="muted">駕駛依班表自動指派，車輛由你挑選</small>
                                </div>
                            </div>

                            <div class="grid-equal-2" style="margin-top:12px">
                                
                                <div>
                                    <label>結束時間 *</label>
                                    <input type="datetime-local" class="form-control" v-model="useEnd" readonly />
                                </div>
                            </div>

                            <div class="grid-1" style="margin-top:12px">
                                <div class="row-combined">
                                    <div style="flex:0 0 180px;">
                                        <label>事由類型</label>
                                        <select v-model="reasonType" style="width:100%">
                                            <option value="公務用">公務用</option>
                                        </select>
                                    </div>
                                    <div style="flex:1; margin-left:12px;">
                                        <label>用車事由</label>
                                        <input type="text" placeholder="簡述申請原因" v-model="applyReason" style="width:100%" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 右側：車輛資訊摘要卡 -->
                        <div class="vehicle-card">
                            <div class="vehicle-icon">🚗</div>
                            <div>
                                <div style="font-weight:700">{{ vehicleType }}<br>{{ purposeType }}</div>
                                <div class="muted" style="margin-top:6px">
                                    將於 <b>{{ fmtDateTimeLocal(useStart) }}</b> 出車，<br />
                                    預計 <b>{{ fmtDateTimeLocal(useEnd) }}</b> 歸還。
                                </div>
                                <div style="margin-top:8px"><a href="javascript:void(0)">more →</a></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 人員與單位 -->
                <div class="section" v-show="showForm">
                    <!-- 標題列 -->
                    <div class="row mb-2 bg-primary text-white text-center" style="padding:8px 0;">
                        <div class="col-2"><div>搭乘人數 *</div></div>
                        <div class="col-3"><div>搭乘人員 *</div></div>
                        <div class="col-4"><div>所屬單位與職稱 *</div></div>
                        <div class="col-2 text-center"><div>動作</div></div>
                    </div>

                    <!-- 輸入列 -->
                    <div class="section-bd">
                        <div v-for="(p, x) in passengers" :key="x" class="row mb-2">
                            <div class="col-1 text-center">
                                <span>{{ x + 1 }}</span>
                            </div>
                            <div class="col-4">
                                <input type="text" v-model="p.name" class="form-control" placeholder="姓名">
                            </div>
                            <div class="col-4">
                                <input type="text" v-model="p.deptTitle" class="form-control" placeholder="單位與職稱">
                            </div>
                            <div class="col-2 text-center">
                                <button type="button" class="btn btn-danger" @@click="removePassenger(x)">刪除</button>
                            </div>
                        </div>

                        <div class="row mb-2 align-items-end">
                            <div class="col-3">
                                <label>搭乘人數 *</label>
                                <input type="number" class="form-control" :value="passengers.length" readonly>
                            </div>
                            <div class="col-auto">
                                <button type="button" class="btn btn-primary" @@click="addPassenger">新增乘客</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 動作列 -->
                <div class="actions" style="margin-top:16px" v-show="showForm">
                    <a asp-action="Dispatch" asp-controller="Dispatches"
                       class="btn"
                       style="background:#6b7280; color:#fff; border-color:#6b7280;">
                        返回清單
                    </a>
                    <button type="button" class="btn btn-primary" @@click="onSubmit">送出申請</button>
                </div>
            </div>
        </form>
    </div>

    <script>
        // 產生 Places Per-Session token
        function createPlacesSessionToken(){
          if (window.crypto?.randomUUID) return crypto.randomUUID();
          return Date.now().toString(36) + Math.random().toString(36).slice(2);
        }
                const placeSessionTokens = { orig: null, dest: null };
        function getOrCreateToken(which){
          // 需要現代瀏覽器；若要兼容可換簡單 GUID 產生器
          if (!placeSessionTokens[which]) placeSessionTokens[which] = crypto.randomUUID();
          return placeSessionTokens[which];
        }
        function endToken(which){ placeSessionTokens[which] = null; }
    </script>
    <script>
        // 解析 "(lat,lng)" 或 "lat,lng"
        function parseLatLngText(text){
          if (!text) return null;
          const s = String(text).trim().replace(/[()]/g, "").replace(/[，\s]+/g, ",");
          const parts = s.split(",");
          if (parts.length !== 2) return null;
          const lat = Number(parts[0]), lng = Number(parts[1]);
          if (!isFinite(lat) || !isFinite(lng)) return null;
          if (lat < -90 || lat > 90 || lng < -180 || lng > 180) return null;
          return { lat, lng };
        }
           //sessionToken 每次新的輸入流程時更新
        let sessionToken = null;
        function newSessionToken() {
          sessionToken = crypto.randomUUID(); // 產生唯一 token
        }
        // 下拉選單（1 秒防抖、含鍵盤操作）
        function attachPlacesAutocomplete(inputId, dropdownId, callback, idleMs = 1000) {
          const input = document.getElementById(inputId);
          const drop  = document.getElementById(dropdownId);
          if (!input || !drop) return;

          document.body.appendChild(drop);

          // === 新增：Session Token 管理 ===
          let sessionToken = null;
          const ensureToken = () => (sessionToken ??= (crypto?.randomUUID?.() || String(Date.now())+Math.random()));
          const endSession = () => { sessionToken = null; }; // 選取完成或長時間不操作後重置

          function positionDropdown() {
            const rect = input.getBoundingClientRect();
            drop.style.position = "absolute";
            drop.style.top  = rect.bottom + window.scrollY + "px";
            drop.style.left = rect.left + window.scrollX + "px";
            drop.style.width = rect.width + "px";
          }

          let timer = null;
          function showLoading(){ drop.innerHTML = '<div class="ac-empty">搜尋中…</div>'; drop.style.display='block'; positionDropdown(); }
          function showEmpty(msg='找不到建議'){ drop.innerHTML = `<div class="ac-empty">${msg}</div>`; drop.style.display='block'; positionDropdown(); }
          function hide(){ drop.style.display='none'; drop.innerHTML=''; }

          function render(items, onPick){
            drop.innerHTML = '';
            if (!items || !items.length){ showEmpty(); return; }
            items.forEach((it, idx)=>{
              const div = document.createElement('div');
              div.className = 'ac-item' + (idx===0? ' active' : '');
              div.textContent = it.text;
              div.dataset.id = it.id || '';
              div.addEventListener('mousedown', (e)=>{ e.preventDefault(); onPick(it); });
              drop.appendChild(div);
            });
            drop.style.display = 'block';
            positionDropdown();
          }

          function moveActive(dir){
            const items = Array.from(drop.querySelectorAll('.ac-item'));
            if (!items.length) return;
            let idx = items.findIndex(x=>x.classList.contains('active'));
            idx = (idx + dir + items.length) % items.length;
            items.forEach(x=>x.classList.remove('active'));
            items[idx].classList.add('active');
          }

          async function pick(item){
            // === 新增：選取後打 Place Details（同一個 sessionToken）===
            try{
              if (item.id) {
                const url = `/api/places/details/${encodeURIComponent(item.id)}?sessionToken=${encodeURIComponent(sessionToken||'')}`;
                const res = await fetch(url);
                const data = await res.json();

                const name = data?.displayName?.text || item.text || '';
                input.value = name; // 寫回輸入框
                hide();
                console.log('token', sessionToken)
                // 把座標與顯示文字回傳給外面（Vue v-model）
                const lat = data?.location?.latitude ?? data?.location?.lat ?? null;
                const lng = data?.location?.longitude ?? data?.location?.lng ?? null;
                if (typeof callback === 'function') {
                  callback({ id: data?.id || item.id, text: name, lat, lng, raw: data });
                }
              } else {
                // 沒 placeId（例如是「(lat,lng)」輸入），直接回傳
                input.value = item.text;
                hide();
                if (typeof callback === 'function') callback(item);
              }
            } finally {
              // 重要：這次 session 結束，重置 token
              endSession();
              // 讓 v-model 也收到 change
              input.dispatchEvent(new Event('change', { bubbles:true }));
            }
          }

          function pickActive(){ const el = drop.querySelector('.ac-item.active'); if (!el) return; pick({ id: el.dataset.id || '', text: el.textContent }); }

          input.addEventListener('focus', ()=>{ ensureToken(); positionDropdown(); });

          input.addEventListener('input', ()=>{
            const q = input.value.trim();
            clearTimeout(timer);
            hide();
            if (!q || q.length < 3) return; // 至少 3 字
            timer = setTimeout(async ()=>{
              // 允許輸入 "(lat,lng)" 直填
              const parsed = parseLatLngText(q);
              if (parsed){ hide(); if (typeof callback==='function'){ callback({ id:'', text:q, lat:parsed.lat, lng:parsed.lng }); } return; }

              showLoading();
              try {
                ensureToken();
             if (!window.sessionToken) {
             window.sessionToken = crypto.randomUUID(); // 或其他方式產生唯一字串
             }

             console.log('token', window.sessionToken);
                const res = await fetch('/api/places/autocomplete', {
                  method:'POST',
                  headers:{ 'Content-Type':'application/json' },
                            body: JSON.stringify({ input: q, sessionToken, regionCode: "TW","locationRestriction": {
                   "rectangle": {
                     "low": { "latitude": 21.8, "longitude": 119.3 },   // 台灣西南角
                     "high": { "latitude": 25.3, "longitude": 122.1 }   // 台灣東北角
                   }
                 } })
                });
                const raw = await res.text();
                let data; try { data = JSON.parse(raw); } catch{ data = null; }

                if (!res.ok){
                  drop.innerHTML = `<div class='ac-empty'>⚠ 服務錯誤：HTTP ${res.status}</div>`;
                  drop.style.display = 'block'; positionDropdown(); return;
                }

                const items = (data?.suggestions||[]).map(s=>{
                  const pp = s.placePrediction;
                  const text = pp?.text?.text || '';
                  const id   = pp?.placeId || '';
                  return text ? { id, text } : null;
                }).filter(Boolean);

                render(items, pick);
              } catch(err){
                console.error('[places autocomplete] 例外：', err);
                showEmpty('⚠ 連線異常，請稍後再試');
              }
            }, idleMs);
          });

          input.addEventListener('keydown', (e)=>{
            if (e.key==='Enter'){ e.preventDefault(); if (drop.style.display==='block'){ pickActive(); } return false; }
            if (e.key==='ArrowDown'){ e.preventDefault(); moveActive(+1); }
            else if (e.key==='ArrowUp'){ e.preventDefault(); moveActive(-1); }
            else if (e.key==='Escape'){ hide(); }
          });

          document.addEventListener('click', (e)=>{ if (!drop.contains(e.target) && e.target!==input) hide(); });

          input.addEventListener('blur', ()=>{ /* 也可加個延遲再 endSession()，看 UX 需求 */ });
          window.addEventListener('resize', positionDropdown);
          window.addEventListener('scroll', positionDropdown);
        }
    
    let singleDurationSec = 0;       // 單程秒數
                let roundTripDurationSec = 0;    // 來回秒數 ＝ 單程 * 2

                function toLocalDateTimeString(date) {
          const pad = n => String(n).padStart(2, "0");
          return `${date.getFullYear()}-${pad(date.getMonth()+1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
        }

        //日期正規化
                function fmtDateTimeLocal(dtStr) {
          if (!dtStr) return "—";
          const d = new Date(dtStr);
          if (isNaN(d.getTime())) return "—";
          const pad = n => String(n).padStart(2, "0");
          return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
        }

        function recalcArrival() {
          const startInput = document.getElementById("UseStart").value;
          if (!startInput) return;

          const start = new Date(startInput);
          if (isNaN(start.getTime())) return;

          const tripType = document.getElementById("TripType").value;
          const secs = (tripType === "來回") ? roundTripDurationSec : singleDurationSec;
          if (!secs || secs <= 0) return;
        }
        // 初始化：避免重複綁定
        function initPlacesAutocompleteDebounced(bindings = {}, opts = {}){
          if (window.__AC_DEBOUNCED_INITED__) return; window.__AC_DEBOUNCED_INITED__ = true;
          const idleMs = Number.isFinite(opts.idleMs) ? opts.idleMs : 1000;
          const safeAttach = (inputId, dropdownId, onPick)=>{
            const input = document.getElementById(inputId), drop = document.getElementById(dropdownId);
            if (!input || !drop) return;
            attachPlacesAutocomplete(inputId, dropdownId, onPick, idleMs);
          };
          safeAttach('orig','ac-orig', (p)=>{ if (typeof bindings.onOrigin==='function') bindings.onOrigin(p); else { const el=document.getElementById('orig'); if (el) el.value=p.text; window.origin=p.text; } });
          safeAttach('dest','ac-dest', (p)=>{ if (typeof bindings.onDestination==='function') bindings.onDestination(p); else { const el=document.getElementById('dest'); if (el) el.value=p.text; window.destination=p.text; } });
        }
    </script>
    <script>
        console.log("✅ JS 載入測試：檔案已執行");
        window.addEventListener('error', e => console.error('🌋 WindowError:', e.message, e.error));
        window.addEventListener('unhandledrejection', e => console.error('🌋 UnhandledRejection:', e.reason));
    </script>

    <script>
        const { createApp, ref, reactive, onMounted, computed, watch } = Vue;

        createApp({
          setup() {
            // ----- 小工具 -----
            const pad = n => String(n).padStart(2, "0");
            function toLocalDateTimeString(date) {                    // ← 補上你原本呼叫但沒定義的工具
              return `${date.getFullYear()}-${pad(date.getMonth()+1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
            }
            function toLocalISOString(date) {
              const tzOffset = date.getTimezoneOffset() * 60000;
              return new Date(date.getTime() - tzOffset).toISOString().slice(0, -1);
            }
            function toLocalNaive(dtLike) {
              const d = new Date(dtLike);
              return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
            }
            function fmtDateTimeLocal(dtStr) {
              if (!dtStr) return "—";
              const d = new Date(dtStr);
              if (isNaN(d)) return "—";
              return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
            }
            function problemDetailsToText(pd) {
              if (pd && pd.errors) {
                return Object.entries(pd.errors).map(([k, arr]) => `${k}: ${arr.join('；')}`).join('\n');
              }
              if (pd && (pd.title || pd.detail)) {
                return `${pd.title || ''} ${pd.detail || ''}`.trim();
              }
              return '未知錯誤';
            }
            // 把任意距離字串轉成 number（decimal）或 null
            function toDecimalOrNull(s) {
              if (s == null) return null;
              const t = String(s)
                .replace(/[,，]/g, ".")
                .replace(/[^\d.\-]/g, "")
                .trim();
              if (t === "" || t === "." || t === "-" || t === "-.") return null;
              const n = Number(t);
              return Number.isFinite(n) ? n : null;
            }

            // ---- 行程秒數（由 calcDistance 計算後更新）----
            let singleDurationSec = 0;
            let roundTripDurationSec = 0;

            // ----- 狀態 -----
            const now = new Date();
            const showForm = ref(false);

            // 申請人模式 & 下拉
            const applyFor = ref("self"); // self / other
            const applicants = ref([]);
            const selectedApplicantId = ref(null);
            const chosenName = computed(() => {
              if (applyFor.value !== 'other') return null;
              const a = applicants.value.find(x => x.applicantId === selectedApplicantId.value);
              return a ? a.name : null;
            });

            // 表單欄位
            const vehicleType  = ref("汽車");
            const purposeType  = ref("公務車(不可選車)");
            const passengerCount = ref(1);
            const reasonType = ref("公務用");
            const applyReason = ref("");
            const origin = ref("");
            const destination = ref("");
            const tripType = ref("round"); // single / round

            // 申請者（本人）資訊
            const applicant = reactive({ name:'', birth:'', dept:'', ext:'', email:'' });

            // 時間
            const useStart = ref(toLocalDateTimeString(now));
            const useEnd   = ref(toLocalDateTimeString(new Date(now.getTime() + 60*60*1000)));

            const arrivalDisplay = computed(() => {
              if (!useStart.value) return "";
              const start = new Date(useStart.value);
              if (isNaN(start)) return "";
              const secs = (tripType.value === "round") ? roundTripDurationSec : singleDurationSec;
              if (!secs) return "";
              const arrival = new Date(start.getTime() + secs * 1000);
              useEnd.value = toLocalDateTimeString(arrival); // 同步後端用結束時間
              return `${arrival.getFullYear()}/${pad(arrival.getMonth()+1)}/${pad(arrival.getDate())} ${pad(arrival.getHours())}:${pad(arrival.getMinutes())}`;
            });

            // 車輛
            const vehicles = ref([]);
            const assign   = reactive({ vehicleId: null });
            const availableVehicles = computed(() =>
              (vehicles.value || []).filter(v => {
                const status = (v.status ?? '').trim();
                const busy   = !!v.busy;
                return status !== '使用中' && !busy;
              })
            );

            // 乘客名單
            const passengers = ref([{ name: "", deptTitle: "" }]);
            const syncPassengerCount = () => { passengerCount.value = passengers.value.length; };
            const addPassenger    = () => { passengers.value.push({ name: "", deptTitle: "" }); syncPassengerCount(); };
            const removePassenger = (i) => { passengers.value.splice(i, 1); syncPassengerCount(); };

            // 站點：改由 RouteStops 編輯器管理（不要在這裡放 ref）
            // 取值：RouteStops.get()；如需預設值可用 RouteStops.set([...])

            // ----- 載入 API -----
            async function loadApplicant(){
              try{
                const res = await axios.get('/api/applicants/me', { withCredentials: true });
                Object.assign(applicant, res.data || {});
              }catch(err){
                console.error('載入申請人失敗', err);
              }
            }

            async function loadApplicants(){
              try{
                const res = await axios.get('/api/carapplications/applicants', { withCredentials: true });
                applicants.value = Array.isArray(res.data) ? res.data : [];
                if (!selectedApplicantId.value && applicants.value.length) {
                  selectedApplicantId.value = applicants.value[0].applicantId;
                }
              }catch(e){
                console.error('載入申請者清單失敗', e);
                applicants.value = [];
              }
            }

            async function loadVehicles() {
              if (!useStart.value || !useEnd.value) return;
              try {
                const fromStr = useStart.value;             // datetime-local 是本地無 Z
                const toStr   = toLocalNaive(useEnd.value); // 轉成本地無 Z

                const res = await axios.get('/api/vehicles/available', {
                  params: {
                    from: fromStr,
                    to:   toStr,
                    capacity: passengers.value.length || undefined
                  },
                  withCredentials: true
                });

                if (!res.data || res.data.length === 0) {
                  alert("⚠ 當下沒有可用車輛，請調整時間或人數");
                }

                vehicles.value = res.data.map(v => ({
                  vehicleId: v.vehicleId,
                  plateNo:   v.plateNo ?? '',
                  brand:     v.brand ?? '',
                  model:     v.model ?? '',
                  capacity:  v.capacity ?? 0,
                  status:    v.status ?? '',
                  busy:      false
                }));

                if (purposeType.value === '公務車(可選車)') {
                  assign.vehicleId = vehicles.value[0]?.vehicleId ?? null;
                } else {
                  assign.vehicleId = null;
                }
              } catch (err) {
                console.error("❌ 載入可用車失敗", err);
                vehicles.value = [];
              }
            }

            // ----- 監聽 -----
            watch(purposeType, (val) => {
              if (val === '公務車(可選車)') {
                const stillOk = availableVehicles.value.find(v => v.vehicleId === assign.vehicleId);
                if (!stillOk) assign.vehicleId = availableVehicles.value[0]?.vehicleId ?? null;
              } else {
                assign.vehicleId = null;
              }
            });

            watch(availableVehicles, (list) => {
              if (purposeType.value !== '公務車(可選車)') return;
              const ok = list.find(v => v.vehicleId === assign.vehicleId);
              if (!ok) assign.vehicleId = list[0]?.vehicleId ?? null;
            });

            watch(applyFor, (val) => {
              if (val === 'other' && applicants.value.length === 0) loadApplicants();
              if (val === 'self') selectedApplicantId.value = null;
            });

            // ----- 動作：計算距離/時間 -----
        // ----- 動作：計算距離/時間 -----
        async function calcDistance() {
          if (!origin.value || !destination.value) {
            alert('請輸入出發地與目的地'); return;
          }

          // 從 RouteStops 取站點 → 組成 waypoints（優先 lat,lng；其次 address）
          const stops = (window.RouteStops ? window.RouteStops.get() : []);
          const waypoints = (stops || [])
            .map(s => (s && (s.lat != null && s.lng != null))
              ? `${s.lat},${s.lng}`
              : (s && s.address ? s.address : null))
            .filter(Boolean)
            .join('|');

          try {
            const url = `/api/distance?origin=${encodeURIComponent(origin.value)}&destination=${encodeURIComponent(destination.value)}${waypoints ? `&waypoints=${encodeURIComponent(waypoints)}` : ''}`;
            const res = await fetch(url);
            const data = await res.json();

            let distMeters = null, durSecs = null;

            // ★ 優先支援 Directions（routes/legs）— 可含中途站點
            if (data?.routes?.[0]?.legs?.length) {
              const legs = data.routes[0].legs;
              distMeters = legs.reduce((sum, l) => sum + (l.distance?.value || 0), 0);
              durSecs    = legs.reduce((sum, l) => sum + (l.duration?.value || 0), 0);
            }
            // 次選：Distance Matrix（不含多站點）
            else if (data?.rows?.[0]?.elements?.[0]?.status === 'OK') {
              distMeters = data.rows[0].elements[0].distance.value;
              durSecs    = data.rows[0].elements[0].duration.value;
            } else {
              alert('⚠️ 查無路線'); return;
            }

            // 更新內部秒數（供到站時間與來回計算用）
            singleDurationSec    = durSecs;
            roundTripDurationSec = durSecs * 2;

            // 顯示用格式化
            const km = (m) => (m/1000).toFixed(1) + ' 公里';
            const fmt = (seconds) => {
              let h = Math.floor(seconds/3600);
              let m = Math.round((seconds%3600)/60);
              if (m === 60){ h += 1; m = 0; }
              let t=''; if (h>0) t += h+' 小時'; if (m>0) t += (h>0?' ':'')+m+' 分鐘'; return t || '0 分鐘';
            };

            // 綁定到既有的顯示欄位
            singleDistance.value    = km(distMeters);
            singleDuration.value    = fmt(durSecs);
            roundTripDistance.value = km(distMeters*2);
            roundTripDuration.value = fmt(durSecs*2);

            // 推估結束時間 + 載入可用車輛
            const start = new Date(useStart.value);
            if (!isNaN(start)) {
              const secs = (tripType.value === 'round') ? roundTripDurationSec : singleDurationSec;
              const arrival = new Date(start.getTime() + secs*1000);
              useEnd.value = toLocalDateTimeString(arrival);
              showForm.value = true;
              await loadVehicles();
            }
          } catch (err) {
            console.error('❌ 取得距離失敗', err);
          }
        }

            // ----- 其他顯示用欄位 -----
            const singleDistance    = ref(null);
            const singleDuration    = ref(null);
            const roundTripDistance = ref(null);
            const roundTripDuration = ref(null);

            // ----- 送出 -----
        async function onSubmit() {
          if (!origin.value || !destination.value) {
            alert('請輸入出發地與目的地');
            return;
          }
          if (purposeType.value === '公務車(可選車)' && !assign.vehicleId) {
            alert('請選擇車輛');
            return;
          }

          const startDt = new Date(useStart.value);
          let endDt = useEnd.value ? new Date(useEnd.value) : null;

          if (!endDt || isNaN(endDt.getTime())) {
            const secs = (tripType.value === 'round')
              ? (roundTripDurationSec || 7200)
              : (singleDurationSec || 3600);
            endDt = new Date(startDt.getTime() + secs * 1000);
          }

          const normUseStart = toLocalISOString(startDt);
          const normUseEnd   = toLocalISOString(endDt);

          if (endDt <= startDt) {
            alert('結束時間必須晚於起始時間');
            return;
          }

          const pax = (passengers.value || []).filter(p => p && p.name && p.name.trim());
          console.log("👥 passengers:", pax);

          // 從 RouteStops 取資料並轉換成後端要的格式
          const stopsDto = (window.RouteStops ? window.RouteStops.get() : [])
            .map(s => ({
              place:   (s.name || s.place || '').trim(),
              address: (s.address || '').trim(),
              lat:     (s.lat ?? null),
              lng:     (s.lng ?? null)
            }))
            .filter(s => s.address || (s.lat != null && s.lng != null));

          console.log("🛑 stopsDto (送到後端的停靠點):", stopsDto);

          const payload = {
            applyFor: applyFor.value,
            vehicleType: vehicleType.value,
            purposeType: purposeType.value,
            passengerCount: pax.length,
            useStart: normUseStart,
            useEnd: normUseEnd,
            reasonType: reasonType.value,
            applyReason: applyReason.value,
            origin: origin.value,
            destination: destination.value,
            tripType: tripType.value,
            singleDistance: toDecimalOrNull(singleDistance.value),
            singleDuration: String(singleDuration.value ?? ''),
            roundTripDistance: toDecimalOrNull(roundTripDistance.value),
            roundTripDuration: String(roundTripDuration.value ?? ''),
            vehicleId: (purposeType.value === '公務車(可選車)') ? (Number(assign.vehicleId) || null) : null,
            status: '待審核'
          };
          if (applyFor.value === 'other' && selectedApplicantId.value) {
            payload.applicantId = selectedApplicantId.value;
          }

          console.log("📦 payload (application):", payload);

          const dto = {
            application: payload,
            passengers: pax.map(p => ({
              name: p.name.trim(),
              deptTitle: p.deptTitle || null
            })),
            stops: stopsDto
          };

          console.log("🚚 DTO 最終送出內容:", dto);

          try {
            const res = await axios.post('/api/CarApplications', dto, {
              withCredentials: true,
              headers: { 'Content-Type': 'application/json' }
            });
            console.log("✅ 後端回應:", res);
            alert(res.data?.message || "申請成功");
            window.location.href = '/Dispatches/Dispatch';
          } catch (err) {
            if (err.response) {
              console.error('❌ 狀態：', err.response.status, '❌ 內容：', err.response.data);
              const msg = problemDetailsToText(err.response.data);
              alert(`❌ 送出失敗\n${msg}`);
            } else {
              console.error('❌ 網路錯誤：', err.message);
              alert('❌ 無法連線伺服器');
            }
          }
        }

            // ----- 初始化 -----
            onMounted(() => {
              attachPlacesAutocomplete("orig", "ac-orig", (p)=>{ origin.value = p.text; }, 800, 'orig');
              attachPlacesAutocomplete("dest", "ac-dest", (p)=>{ destination.value = p.text; }, 800, 'dest');

              loadApplicant();
              loadVehicles();
              if (applyFor.value === "other") loadApplicants();

            
            });

            // ----- 對外暴露 -----
            return {
              // 基本
              applyFor, vehicleType, purposeType,
              passengerCount, useStart, useEnd, reasonType, applyReason,
              origin, destination, tripType, applicant, showForm,

              // 申請者下拉
              applicants, selectedApplicantId, chosenName, loadApplicants,

              // 車輛
              vehicles, availableVehicles, assign, loadVehicles,

              // 行程/距離
              singleDistance, singleDuration, roundTripDistance, roundTripDuration,
              arrivalDisplay, fmtDateTimeLocal, calcDistance,

              // 乘客
              passengers, addPassenger, removePassenger,

              // 送出
              onSubmit
            };
          }
        }).mount('#app');
    </script>
    <script>
        (function() {
          console.log("🧭 RouteStops editor init");
          const listEl   = document.getElementById('stopsList');
          const emptyEl  = document.getElementById('stopsEmpty');
          const hiddenEl = document.getElementById('StopsJson');
          const btnAdd   = document.getElementById('btnAddStop');

          if (!listEl || !emptyEl || !btnAdd) { console.warn('RouteStops: 必要的 DOM 元素不存在'); return; }

          /** stops: { name, address, lat, lng }[] */
          let stops = [];

          function syncHidden(){ if (hiddenEl) hiddenEl.value = JSON.stringify(stops); }

          function render(){
            listEl.innerHTML = '';
            if (!stops.length){
              listEl.style.display='none'; emptyEl.style.display='block'; syncHidden(); return;
            }
            listEl.style.display='block'; emptyEl.style.display='none';

            stops.forEach((it, idx) => {
              const row = document.createElement('div');
              row.className = 'list-group-item';
              row.innerHTML = `
                <div class="row g-2 align-items-center">
                  <div class="col-4">
                    <input type="text" class="form-control stop-name" placeholder="站點名稱(可不填)" value="${it.name || ''}">
                  </div>
                  <div class="col-6 position-relative">
                    <input type="text" class="form-control stop-address" id="stop-addr-${idx}" placeholder="輸入地址或地點" value="${it.address || ''}">
                    <div class="ac-dropdown" id="ac-stop-${idx}"></div>
                  </div>
                  <div class="col-2 text-end">
                    <button type="button" class="btn btn-outline-danger btn-sm" data-act="remove" data-idx="${idx}">刪除</button>
                  </div>
                </div>`;
              listEl.appendChild(row);

              const nameInput = row.querySelector('.stop-name');
              const addrInput = row.querySelector('.stop-address');
              nameInput.addEventListener('input', () => { stops[idx].name = nameInput.value; syncHidden(); });
              addrInput.addEventListener('input', () => { stops[idx].address = addrInput.value; syncHidden(); });

              // 使用你頁面已存在的 attachPlacesAutocomplete
              if (typeof attachPlacesAutocomplete === 'function') {
                attachPlacesAutocomplete(`stop-addr-${idx}`, `ac-stop-${idx}`, (p) => {
                  const lat = (typeof p?.geometry?.location?.lat === 'function') ? p.geometry.location.lat() : (p.lat ?? null);
                  const lng = (typeof p?.geometry?.location?.lng === 'function') ? p.geometry.location.lng() : (p.lng ?? null);
                  stops[idx].address = p.text || p.address || p.description || addrInput.value || '';
                  stops[idx].lat = lat; stops[idx].lng = lng;
                  syncHidden();
                }, 800);
              } else {
                console.warn('attachPlacesAutocomplete 未定義，站點地址將無自動完成');
              }
            });

            syncHidden();
          }

          function add(){ stops.push({ name:'', address:'', lat:null, lng:null }); render(); }
          function remove(i){ stops.splice(i,1); render(); }

          // 事件
          btnAdd.addEventListener('click', add);
          listEl.addEventListener('click', (e) => {
            const btn = e.target.closest('[data-act="remove"]');
            if (btn){ const i = parseInt(btn.dataset.idx,10); if(!isNaN(i)) remove(i); }
          });

          // 對外 API（供你已存在的 onSubmit 讀取）
          window.RouteStops = {
            get: () => stops.map(({ name, address, lat, lng }) => ({ name, address, lat, lng })),
            set: (arr) => {
              stops = Array.isArray(arr) ? arr.map(x => ({
                name: x.name || x.place || '',
                address: x.address || '',
                lat: x.lat ?? null,
                lng: x.lng ?? null
              })) : [];
              render();
            },
            add, remove, render
          };

          // 初始載入（若 #StopsJson 已有資料，編輯模式可還原）
          try {
            const init = (hiddenEl && hiddenEl.value && hiddenEl.value.trim()) ? JSON.parse(hiddenEl.value) : null;
            if (init) window.RouteStops.set(init); else render();
          } catch { render(); }
        })();
    </script>


</body>