@{
    ViewData["Title"] = "用車申請";
}
<head>
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <style>
        :root {
            --primary: #1e6fb8; /* 深藍 */
            --primary-600: #2b83d4;
            --bg: #f4f6f8;
            --border: #dfe3e8;
            --text: #1f2937;
            --muted: #6b7280;
            --danger: #d9534f;
        }

        * {
            box-sizing: border-box
        }

        html, body {
            height: 100%
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, "Noto Sans TC", "PingFang TC", "Microsoft JhengHei", sans-serif;
            background: var(--bg);
            color: var(--text);
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 1080px;
            margin: 0 auto
        }

        /* Section (與截圖相同的藍色標題條) */
        .section {
            background: #fff;
            border: 1px solid var(--border);
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(16,24,40,.06);
            margin-bottom: 16px;
            overflow: hidden
        }

        .section-hd {
            background: var(--primary);
            color: #fff;
            padding: 10px 14px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 12px
        }

            .section-hd small {
                opacity: .9;
                font-weight: 500
            }

        .section-bd {
            padding: 16px
        }

        /* Grid helpers */
        .grid-2 {
            display: grid;
            grid-template-columns: 1.2fr .8fr;
            gap: 16px
        }

        .grid-3 {
            display: grid;
            grid-template-columns: repeat(3,1fr);
            gap: 12px
        }

        .row {
            display: flex;
            gap: 12px;
            flex-wrap: wrap
        }

            .row > .col {
                flex: 1 1 260px
            }

        /* Cards */
        .card {
            background: #fff;
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 12px
        }

        .profile {
            display: grid;
            grid-template-columns: 84px 1fr;
            gap: 12px;
            align-items: center
        }

        .avatar {
            width: 84px;
            height: 84px;
            border-radius: 10px;
            background: linear-gradient(135deg,#e5e7eb,#f3f4f6);
            display: flex;
            align-items: center;
            justify-content: center;
            color: #9ca3af;
            font-weight: 700
        }

        .kv {
            margin: 2px 0;
            color: #334155
        }

            .kv .label {
                color: var(--muted);
                width: 72px;
                display: inline-block
            }

            .kv .val {
                font-weight: 500
            }

        .vehicle-card {
            display: grid;
            grid-template-columns: 72px 1fr;
            gap: 12px;
            align-items: center;
            border: 1px dashed var(--border);
            border-radius: 8px;
            padding: 12px
        }

        .vehicle-icon {
            width: 72px;
            height: 72px;
            border-radius: 10px;
            background: #f1f5f9;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 34px
        }

        .muted {
            color: var(--muted)
        }

        /* Inputs */
        label {
            font-size: 13px;
            color: #374151;
            margin-bottom: 4px;
            display: block
        }

        input[type="text"], input[type="datetime-local"], input[type="number"], select, textarea {
            width: 100%;
            padding: 4px 10px;
            border: 1px solid #cbd5e1;
            border-radius: 6px;
            background: #fff;
            outline: none;
        }

            input:focus, select:focus, textarea:focus {
                border-color: var(--primary-600);
                box-shadow: 0 0 0 3px rgba(30,111,184,.12)
            }

        textarea {
            min-height: 72px
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            border: 1px solid #cbd5e1;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            background: #fff
        }

        .btn-primary {
            background: var(--primary);
            color: #fff;
            border-color: var(--primary)
        }

        .btn-ghost {
            background: #fff
        }

        .btn-danger {
            background: var(--danger);
            border-color: var(--danger);
            color: #fff
        }

        .btn-icon {
            width: 32px;
            height: 32px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%
        }

        .actions {
            display: flex;
            gap: 8px;
            justify-content: flex-end
        }

        /* Autocomplete dropdown */
        .ac-wrap {
            position: relative
        }

        .ac-dropdown {
            position: absolute;
            left: 0;
            right: 0;
            top: calc(100% + 4px);
            background: #fff;
            border: 1px solid var(--border);
            border-radius: 8px;
            box-shadow: 0 6px 24px rgba(16,24,40,.12);
            z-index: 1000;
            display: none;
            max-height: 280px;
            overflow: auto
        }

        .ac-item {
            padding: 10px 12px;
            cursor: pointer
        }

            .ac-item:hover, .ac-item.active {
                background: #eef5ff
            }

        .ac-empty {
            padding: 10px 12px;
            color: #6b7280;
            font-size: 13px
        }

        /* Result chips */
        .metric {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 10px;
            background: #f1f5f9;
            border: 1px solid var(--border);
            border-radius: 8px
        }

            .metric b {
                font-size: 15px
            }

        /* Minus row button */
        .row-actions {
            display: flex;
            align-items: flex-end
        }

        .grid-1 {
            display: grid;
            grid-template-columns: 1fr;
            gap: 12px;
        }

        .row-combined {
            display: flex;
            align-items: center;
            gap: 12px;
        }


        .form-row {
            display: flex;
            gap: 16px;
            margin-bottom: 16px;
            align-items: flex-end; /* 讓按鈕跟輸入框底線對齊 */
        }

        .form-group {
            position: relative;
            margin-bottom: 16px;
            width: 100%; /* 重要：確保 form-group 本身撐滿 */
        }

            .form-group input,
            .form-group select {
                width: 100%; /* 讓輸入框或下拉框吃滿 */
                box-sizing: border-box;
            }

        .ac-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%; /* 和 input 一樣寬 */
            background: #fff;
            border: 1px solid #ccc;
            border-top: none;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
        }

        .ac-dropdown {
            position: absolute;
            background: #fff;
            border: 1px solid #ccc;
            border-radius: 6px;
            box-shadow: 0 6px 24px rgba(16,24,40,.12);
            max-height: 280px;
            overflow-y: auto;
            z-index: 99999; /* 保證浮在最上層 */
        }



            .ac-dropdown div:hover {
                background: #f0f0f0;
            }

        .grid-equal-2 {
            display: grid;
            grid-template-columns: 1fr 1fr; /* 🔥 兩欄各佔一半 */
            gap: 16px; /* 保持和 grid-2 一樣的間距 */
        }
    </style>
</head>

<body>
    <div id="app" class="container" v-cloak>
        <form id="car-form">
            <!-- 用車申請（藍條標題 + 兩欄布局，左：申請人/欄位 右：車輛卡） -->
            <div class="section">
                <div class="section-hd">
                    <div>用車申請</div>
                    <small>
                        <label style="margin-right:12px"><input type="radio" value="self" v-model="applyFor" /> 本人申請</label>
                        <label><input type="radio" value="other" v-model="applyFor" /> 代他人申請</label>
                    </small>
                </div>
                <div class="section-bd">
                    <div class="grid-2">
                        <!-- 左側：申請人卡 + 欄位 -->
                        <div>
                            <div class="card profile" style="margin-bottom:12px">
                                <div class="avatar">👤</div>
                                <div>
                                    <div style="font-weight:700; font-size:18px">{{ applicant.name }} <span class="muted" style="font-weight:500">({{ applicant.empId }})</span></div>
                                    <div class="kv"><span class="label">單位</span><span class="val">{{ applicant.dept }}</span></div>
                                    <div class="kv"><span class="label">分機</span><span class="val">{{ applicant.ext }}</span></div>
                                    <div class="kv"><span class="label">Email</span><span class="val">{{ applicant.email }}</span></div>
                                </div>
                            </div>

                            <div class="grid-3">
                                <div>
                                    <label>車輛類別 *</label>
                                    <select v-model="vehicleType">
                                        <option value="汽車">汽車</option>
                                        
                                    </select>
                                </div>
                                <div>
                                    <label>事由 *</label>
                                    <select v-model="purposeType">
                                        <option value="公務車(不可選車)">公務車(不可選車)</option>
                                        <option value="公務車(可選車)">公務車(可選車)</option>
                                    </select>
                                </div>

                                <!-- 只有選「公務車(可選車)」時才出現車輛下拉 -->
                                <div v-if="purposeType === '公務車(可選車)'">
                                    <label>車輛 *</label>
                                    <select v-model="assign.vehicleId">
                                        <option :value="null">（未選擇）</option>
                                        <option v-for="v in availableVehicles"
                                                :key="v.vehicleId"
                                                :value="v.vehicleId">
                                            {{ v.plateNo }} ({{ v.brand }} {{ v.model }})
                                        </option>
                                    </select>
                                    <small class="muted">駕駛依班表自動指派，車輛由你挑選</small>
                                </div>


                            </div>

                            <div class="grid-equal-2" style="margin-top:12px">
                                <div>
                                    <label>起始時間 *</label>
                                    <input type="datetime-local" class="form-control"  v-model="useStart" />
                                </div>
                                <div>
                                    <label>結束時間 *</label>
                                    <input type="text" id="ArrivalDisplay" class="form-control" readonly>
                                    <input type="hidden" id="useEnd" name="useEnd">
                                </div>


                            </div>
                            <div class="grid-1" style="margin-top:12px">
                                <div class="row-combined">
                                    <div style="flex:0 0 180px;">
                                        <label>事由類型</label>
                                        <select v-model="reasonType" style="width:100%">
                                            <option value="公務用">公務用</option>
                                            
                                        </select>
                                    </div>
                                    <div style="flex:1; margin-left:12px;">
                                        <label>用車事由</label>
                                        <input type="text" placeholder="簡述申請原因" v-model="applyReason" style="width:100%" />
                                    </div>
                                </div>
                            </div>


                        </div>

                        <!-- 右側：車輛資訊摘要卡 -->
                        <div class="vehicle-card">
                            <div class="vehicle-icon">🚗</div>
                            <div>
                                <div style="font-weight:700">{{ vehicleType }}<br>{{ purposeType }}</div>
                                <div class="muted" style="margin-top:6px">將於 <b>{{ useStart || '—' }}</b> 出車，<br />預計 <b>{{ useEnd || '—' }}</b> 歸還。</div>
                                <div style="margin-top:8px"><a href="javascript:void(0)">more →</a></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 出發與目的地（藍條 + 內有三欄：出發地、目的地、動作） -->
            <div class="section">
                <!-- 標題列 (整條藍底白字) -->
                <div class="row mb-2 bg-primary text-white text-center" style="padding:8px 0;">
                    <div class="col-3">出發地</div>
                    <div class="col-3">目的地</div>
                    <div class="col-3">來回 | 單程</div>
                    <div class="col-2">動作</div>
                </div>

                <!-- 內容列 -->
                <div class="section-bd">
                    <div class="row align-items-center mb-2">
                        <div class="col-3">
                            <input id="orig" class="form-control" placeholder="請輸入出發地" v-model="origin" required />
                            <div class="ac-dropdown" id="ac-orig"></div>
                        </div>

                        <div class="col-3">
                            <input id="dest" class="form-control" placeholder="請輸入目的地" v-model="destination" required />
                            <div class="ac-dropdown" id="ac-dest"></div>
                        </div>

                        <div class="col-3">
                            <select class="form-control" v-model="tripType">
                                <option value="round">來回</option>
                                <option value="single">單程</option>
                            </select>
                        </div>

                        <div class="col-2 text-center">
                            <button type="button" class="btn btn-primary" @@click="calcDistance">查詢</button>
                        </div>
                    </div>


                    <!-- 查詢結果 -->
                    <div v-if="singleDistance && singleDuration" class="row mt-3">
                        <div class="col">
                            <div class="metric">
                                🚗 單程距離：約 <b>{{ singleDistance }}</b>
                                ⏱ 單程時間：約 <b>{{ singleDuration }}</b>
                            </div>
                        </div>
                        <div class="col">
                            <div class="metric">
                                🔁 來回距離：約 <b>{{ roundTripDistance }}</b>
                                ⏱ 來回時間：約 <b>{{ roundTripDuration }}</b>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 人員與單位（含加減按鈕樣式） -->
            <div class="section">
                <!-- 標題列 -->
                <div class="row mb-2 bg-primary text-white text-center" style="padding:8px 0;">

                    <div class="row mb-2">
                        <div class="col-2">
                            <div>搭乘人數 *</div>
                        </div>
                        <div class="col-3">
                            <div>搭乘人員 *</div>
                        </div>
                        <div class="col-4">
                            <div>所屬單位與職稱 *</div>
                        </div>
                        <div class="col-2 text-center">
                            <div>動作</div>
                        </div>
                    </div>
                </div>


                <!-- 輸入列 -->
                <div class="section-bd">

                    <div v-for="(p, x) in passengers" :key="x" class="row mb-2">
                        <div class="col-1 text-center">
                            <span>{{ x + 1 }}</span>
                        </div>
                        <div class="col-4">
                            <input type="text" v-model="p.name" class="form-control" placeholder="姓名">
                        </div>
                        <div class="col-4">
                            <input type="text" v-model="p.deptTitle" class="form-control" placeholder="單位與職稱">
                        </div>
                        <div class="col-2 text-center">
                            <button type="button" class="btn btn-danger" @@click ="removePassenger(x)">刪除</button>
                        </div>
                    </div>
                    <div class="row mb-2 align-items-end">
                        <!-- 搭乘人數 -->
                        <div class="col-3">
                            <label>搭乘人數 *</label>
                            <input type="number" class="form-control" :value="passengers.length" readonly>
                        </div>

                        <!-- 新增乘客按鈕 -->
                        <div class="col-auto">
                            <button type="button" class="btn btn-primary" @@click="addPassenger">新增乘客</button>
                        </div>
                    </div>

                </div>
            </div>

            <!-- 動作列 -->
            <div class="actions" style="margin-top:16px">
                <a asp-action="Dispatch" asp-controller="Dispatches"
                   class="btn"
                   style="background:#6b7280; color:#fff; border-color:#6b7280;">
                    返回清單
                </a>
                <form id="car-form">
                    <!-- 其他欄位 -->
                    <button type="button" class="btn btn-primary" @@click="onSubmit">送出申請</button>
                </form>
            </div>
        </form>
    </div>


    <script>
        // 解析 "(lat,lng)" 或 "lat,lng"
        function parseLatLngText(text){
          if (!text) return null;
          const s = String(text).trim().replace(/[()]/g, "").replace(/[，\s]+/g, ",");
          const parts = s.split(",");
          if (parts.length !== 2) return null;
          const lat = Number(parts[0]), lng = Number(parts[1]);
          if (!isFinite(lat) || !isFinite(lng)) return null;
          if (lat < -90 || lat > 90 || lng < -180 || lng > 180) return null;
          return { lat, lng };
        }

        // 下拉選單（1 秒防抖、含鍵盤操作）
        function attachPlacesAutocomplete(inputId, dropdownId, callback, idleMs = 1000) {
          const input = document.getElementById(inputId);
          const drop  = document.getElementById(dropdownId);
          if (!input || !drop) return;

          // 🔥 把 dropdown 移到 <body>
          document.body.appendChild(drop);

          // 🔥 動態定位 dropdown
          function positionDropdown() {
            const rect = input.getBoundingClientRect();
            drop.style.position = "absolute";
            drop.style.top  = rect.bottom + window.scrollY + "px";
            drop.style.left = rect.left + window.scrollX + "px";
            drop.style.width = rect.width + "px"; // 和輸入框等寬
          }

          let timer = null;
          function showLoading(){ drop.innerHTML = '<div class="ac-empty">搜尋中…</div>'; drop.style.display = 'block'; positionDropdown(); }
          function showEmpty(msg = '找不到建議'){ drop.innerHTML = `<div class="ac-empty">${msg}</div>`; drop.style.display='block'; positionDropdown(); }
          function hide(){ drop.style.display='none'; drop.innerHTML=''; }
          function render(items, onPick){
            drop.innerHTML = '';
            if (!items || !items.length){ showEmpty(); return; }
            items.forEach((it, idx)=>{
              const div = document.createElement('div');
              div.className = 'ac-item' + (idx===0? ' active' : '');
              div.textContent = it.text;
              div.dataset.id = it.id || '';
              div.addEventListener('mousedown', (e)=>{ e.preventDefault(); onPick(it); });
              drop.appendChild(div);
            });
            drop.style.display = 'block';
            positionDropdown();
          }
          function moveActive(dir){
            const items = Array.from(drop.querySelectorAll('.ac-item'));
            if (!items.length) return;
            let idx = items.findIndex(x=>x.classList.contains('active'));
            idx = (idx + dir + items.length) % items.length;
            items.forEach(x=>x.classList.remove('active'));
            items[idx].classList.add('active');
          }
          function pickActive(onPick){
            const el = drop.querySelector('.ac-item.active');
            if (!el) return;
            onPick({ id: el.dataset.id || '', text: el.textContent });
          }
          function pick(item){
            input.value = item.text;
            hide();
            if (typeof callback === 'function') callback({ id:item.id||'', text:item.text });
            input.dispatchEvent(new Event('change', { bubbles:true }));
          }

          input.addEventListener('input', ()=>{
            const q = input.value.trim();
            clearTimeout(timer);
            hide();
            if (!q || q.length < 2) return; // 至少 2 字才查
            timer = setTimeout(async ()=>{
              const parsed = parseLatLngText(q);
              if (parsed){ hide(); if (typeof callback==='function'){ callback({ id:'', text:q, lat:parsed.lat, lng:parsed.lng }); } return; }
              showLoading();
              let data = null;
              try {
                const res = await fetch('/api/places/autocomplete', { method:'POST', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify({ input:q }) });
                const raw = await res.text();
                try { data = JSON.parse(raw); } catch { data = null; }
                if (!res.ok){ drop.innerHTML = `<div class='ac-empty'>⚠ 服務錯誤：HTTP ${res.status}</div>`; drop.style.display='block'; positionDropdown(); return; }
                const items = (data?.suggestions||[]).map(s=>{
                  const pp = s.placePrediction;
                  const text = pp?.text?.text || '';
                  const id   = pp?.placeId || '';
                  return text ? { id, text } : null;
                }).filter(Boolean);
                render(items, pick);
              } catch(err){ console.error('[places autocomplete] 例外：', err); showEmpty('⚠ 連線異常，請稍後再試'); }
            }, idleMs);
          });

          input.addEventListener('keydown', (e)=>{
            if (e.key==='Enter'){ e.preventDefault(); if (drop.style.display==='block'){ pickActive(pick); } return false; }
            if (e.key==='ArrowDown'){ e.preventDefault(); moveActive(+1); }
            else if (e.key==='ArrowUp'){ e.preventDefault(); moveActive(-1); }
            else if (e.key==='Escape'){ hide(); }
          });

          document.addEventListener('click', (e)=>{ if (!drop.contains(e.target) && e.target!==input) hide(); });

          // 🔥 當 input 聚焦 / 視窗移動時重算位置
          input.addEventListener("focus", positionDropdown);
          window.addEventListener("resize", positionDropdown);
          window.addEventListener("scroll", positionDropdown);
        }
              let singleDurationSec = 0;       // 單程秒數  e.g. data.rows[0].elements[0].duration.value
        let roundTripDurationSec = 0;    // 來回秒數 ＝ 單程 * 2

        function formatDateTime(dt) {
          // 輸出 yyyy/M/d HH:mm（或要含秒可自行調整）
          const pad = n => (n < 10 ? "0" + n : "" + n);
          return dt.getFullYear() + "/" + (dt.getMonth() + 1) + "/" + dt.getDate() +
                 " " + pad(dt.getHours()) + ":" + pad(dt.getMinutes()) + ":" + pad(dt.getSeconds());
        }

        function recalcArrival() {
          const startInput = document.getElementById("UseStart").value;
          if (!startInput) return;

          const start = new Date(startInput);
          if (isNaN(start.getTime())) return;

          const tripType = document.getElementById("TripType").value;
          const secs = (tripType === "來回") ? roundTripDurationSec : singleDurationSec;
          if (!secs || secs <= 0) return;

          const arrival = new Date(start.getTime() + secs * 1000);

          // 顯示用
          document.getElementById("ArrivalDisplay").value = formatDateTime(arrival);

          // 送後端用（用 ISO 格式避免時區問題；後端用 DateTime 解析）
          document.getElementById("useEnd").value = arrival.toISOString();
        }

       

        // 初始化：避免重複綁定
        function initPlacesAutocompleteDebounced(bindings = {}, opts = {}){
          if (window.__AC_DEBOUNCED_INITED__) return; window.__AC_DEBOUNCED_INITED__ = true;
          const idleMs = Number.isFinite(opts.idleMs) ? opts.idleMs : 1000;
          const safeAttach = (inputId, dropdownId, onPick)=>{
            const input = document.getElementById(inputId), drop = document.getElementById(dropdownId);
            if (!input || !drop) return;
            attachPlacesAutocomplete(inputId, dropdownId, onPick, idleMs);
          };
          safeAttach('orig','ac-orig', (p)=>{ if (typeof bindings.onOrigin==='function') bindings.onOrigin(p); else { const el=document.getElementById('orig'); if (el) el.value=p.text; window.origin=p.text; } });
          safeAttach('dest','ac-dest', (p)=>{ if (typeof bindings.onDestination==='function') bindings.onDestination(p); else { const el=document.getElementById('dest'); if (el) el.value=p.text; window.destination=p.text; } });
        }
    </script>
    <script>
        console.log("✅ JS 載入測試：檔案已執行");
        window.addEventListener('error', e => console.error('🌋 WindowError:', e.message, e.error));
        window.addEventListener('unhandledrejection', e => console.error('🌋 UnhandledRejection:', e.reason));
    </script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
        const { createApp, ref, reactive, onMounted, computed, watch } = Vue;

        createApp({
          setup() {
            // 取當下時間 (ISO 格式、去掉秒數方便輸入欄位)
            function getLocalDateTimeString(date) {
              const pad = (n) => n.toString().padStart(2, "0");
              const year = date.getFullYear();
              const month = pad(date.getMonth() + 1);
              const day = pad(date.getDate());
              const hour = pad(date.getHours());
              const minute = pad(date.getMinutes());
              return `${year}-${month}-${day}T${hour}:${minute}`;
            }

            const now = new Date();

            // 表單資料
            const applyFor     = ref("self");
            const vehicleType  = ref("汽車");

            // 車輛
            const vehicles = ref([]);                   // 從 /api/vehicles/list 載入
            const assign   = reactive({ vehicleId: null });

            const purposeType = ref('公務車(不可選車)');

            // 只顯示可用車：Status ≠ '使用中' 且非 busy
            const availableVehicles = computed(() =>
              (vehicles.value || []).filter(v => {
                const status = (v.status ?? '').trim();
                const busy   = !!v.busy;
                return status !== '使用中' && !busy;
              })
            );

            const passengerCount = ref(1);
            const reasonType = ref("公務用");
            const applyReason = ref("");
            const origin = ref("");
            const destination = ref("");
            const tripType = ref("round");

            // 其他 reactive 物件
            const applicant = reactive({
              name: 'XXX',
              empId: 'XXXX.XX.X',
              dept: '臺東分署 / 森林管理處 / 休憩管理科',
              ext: '212',
              email: 'XXXXX@forest.gov.tw'
            });
                    const useStart = ref(getLocalDateTimeString(now));
        const useEnd   = ref("");   // 真正送到後端的值

        // 自動算到達時間（出發時間 + 路程時間）
        const arrivalDisplay = computed(() => {
          if (!useStart.value) return "";
          const start = new Date(useStart.value);
          if (isNaN(start.getTime())) return "";

          // 根據單程 / 來回選擇秒數
          const secs = (tripType.value === "round")
            ? roundTripDurationSec
            : singleDurationSec;

          if (!secs) return "";

          const arrival = new Date(start.getTime() + secs * 1000);

          // 同步更新 useEnd（後端用）
          useEnd.value = arrival.toISOString();

          // 顯示格式
          const pad = n => (n < 10 ? "0" + n : n);
          return `${arrival.getFullYear()}/${arrival.getMonth() + 1}/${arrival.getDate()} `
               + `${pad(arrival.getHours())}:${pad(arrival.getMinutes())}:${pad(arrival.getSeconds())}`;
        });

           
        // 車輛清單（改呼叫 /api/vehicles/available）
        async function loadVehicles() {
          try {
            const res = await axios.get('/api/vehicles/available', {
              params: {
                from: useStart.value,
                to: useEnd.value,
                capacity: passengerCount.value
              }
            });
                    if (!res.data || res.data.length === 0) {
          alert("⚠ 當下沒有可用車輛，請調整時間或人數");
          window.location.href = "/Dispatches/Dispatch";
          return;
        }

            vehicles.value = (res.data || []).map(v => ({
              vehicleId: v.vehicleId,
              plateNo:   v.plateNo ?? '',
              brand:     v.brand ?? '',
              model:     v.model ?? '',
              capacity:  v.capacity ?? 0,
              status:    v.status ?? '',
              busy:      false   // 因為後端已經只回傳可用車，所以這裡都設成 false
            }));
          } catch (err) {
            console.error("❌ 載入可用車失敗", err);
            vehicles.value = [];
          }
        }

            // 距離顯示
            const singleDistance    = ref("");
            const singleDuration    = ref("");
            const roundTripDistance = ref("");
            const roundTripDuration = ref("");

            // 搭乘人員
            const passengers = ref([{ name: "", deptTitle: "" }]);
            function syncPassengerCount() { passengerCount.value = passengers.value.length; }
            function addPassenger()       { passengers.value.push({ name: "", deptTitle: "" }); syncPassengerCount(); }
            function removePassenger(i)   { passengers.value.splice(i, 1); syncPassengerCount(); }

            // 監聽事由：可選車 → 自動帶第一台；非可選 → 清空
            watch(purposeType, (val) => {
              if (val === '公務車(可選車)') {
                const stillOk = availableVehicles.value.find(v => v.vehicleId === assign.vehicleId);
                if (!stillOk) {
                  assign.vehicleId = availableVehicles.value[0]?.vehicleId ?? null;
                }
              } else {
                assign.vehicleId = null;
              }
            });

            // 監聽可用車清單：目前選到的車若不再可用，就改帶第一台或清空
            watch(availableVehicles, (list) => {
              if (purposeType.value !== '公務車(可選車)') return;
              const ok = list.find(v => v.vehicleId === assign.vehicleId);
              if (!ok) assign.vehicleId = list[0]?.vehicleId ?? null;
            });

            async function onSubmit() {
              if (!origin.value || !destination.value) {
                alert('請輸入出發地與目的地');
                return;
              }
              if (purposeType.value === '公務車(可選車)' && !assign.vehicleId) {
                alert('請選擇車輛');
                return;
              }
                     if (!passengers.value.length) {
          alert('請至少輸入一位乘客');
          return;
        }
        for (const [i, p] of passengers.value.entries()) {
          if (!p.name?.trim() || !p.deptTitle?.trim()) {
            alert(`第 ${i + 1} 位乘客：姓名與單位職稱都必填`);
            return;
          }
        }

              try {
                const payload = {
                  applicantName:  applicant.name,
                  applicantEmpId: applicant.empId,
                  applicantDept:  applicant.dept,
                  applicantExt:   applicant.ext,
                  applicantEmail: applicant.email,
                  applyFor:       applyFor.value,
                  vehicleType:    vehicleType.value,
                  purposeType:    purposeType.value,
                  passengerCount: passengers.value.length,
                  useStart:       useStart.value,
                  useEnd:         useEnd.value,
                  reasonType:     reasonType.value,
                  applyReason:    applyReason.value,
                  origin:         origin.value,
                  destination:    destination.value,
                  tripType:       tripType.value,
                  singleDistance: singleDistance.value,
                  singleDuration: singleDuration.value,
                  roundTripDistance: roundTripDistance.value,
                  roundTripDuration: roundTripDuration.value,
                  // 送車輛編號：可選車 → 車號；其他 → null
                  vehicleId: (purposeType.value === '公務車(可選車)') ? (assign.vehicleId ?? null) : null
                };

                const dto = {
                  application: payload,
                  passengers: (passengers.value || []).map(p => ({
                    name: p.name, deptTitle: p.deptTitle
                  }))
                };

                console.log("📤 準備送出資料：", dto);

                const res = await fetch('/api/CarApplications', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(dto)

                });

                console.log("📥 Response 狀態：", res.status);
                window.location.href = "/Dispatches/Dispatch";
                let data = null;
                try { data = await res.json(); } catch { data = null; }

                console.log("📥 Response 內容：", data);
                alert((data && data.message) || "送出成功");
              } catch (err) {
                console.error("❌ 送出失敗", err);
                alert("❌ 送出失敗，請檢查後端 API");
              }
            }

        async function calcDistance() {
          if (!origin.value || !destination.value) {
            alert('請輸入出發地與目的地');
            return;
          }
          try {
            const res = await fetch(`/api/distance?origin=${encodeURIComponent(origin.value)}&destination=${encodeURIComponent(destination.value)}`);
            const data = await res.json();

                   if (data?.rows?.[0]?.elements?.[0]?.status === 'OK') {
          const distMeters = data.rows[0].elements[0].distance.value;
          const durSecs = data.rows[0].elements[0].duration.value;

          // 原本就有的顯示邏輯
          singleDurationSec = durSecs;
          roundTripDurationSec = durSecs * 2;

          function formatDuration(seconds){
            let hours=Math.floor(seconds/3600), mins=Math.round((seconds%3600)/60);
            if (mins===60){ hours+=1; mins=0; }
            let t=''; if (hours>0) t+=hours+' 小時'; if (mins>0) t+=(hours>0?' ':'')+mins+' 分鐘';
            return t;
          }
          singleDistance.value    = (distMeters/1000).toFixed(1)+ ' 公里';
          singleDuration.value    = formatDuration(durSecs);
          roundTripDistance.value = (distMeters*2/1000).toFixed(1)+' 公里';
          roundTripDuration.value = formatDuration(durSecs*2);

          // 🔻 新增區塊：按完「查詢」就計算並顯示結束時間
          const start = new Date(useStart.value);
          if (!isNaN(start.getTime())) {
            const secs = (tripType.value === 'round') ? roundTripDurationSec : singleDurationSec;
            if (secs > 0) {
              const arrival = new Date(start.getTime() + secs * 1000);

              // 更新 Vue 變數（右側卡片會跟著變）
              useEnd.value = arrival.toISOString();

              // 更新頁面上的結束時間輸入框
              const pad = n => (n < 10 ? '0' + n : '' + n);
                      let hours = arrival.getHours();
        const minutes = pad(arrival.getMinutes());
        const seconds = pad(arrival.getSeconds());
        const ampm = hours >= 12 ? '下午' : '上午';
        hours = hours % 12;
        hours = hours ? hours : 12; // 0 轉成 12

        const show = `${arrival.getFullYear()}/${arrival.getMonth() + 1}/${arrival.getDate()} ` +
                     `${ampm} ${pad(hours)}:${minutes}:${seconds}`;

              const disp = document.getElementById('ArrivalDisplay');
              if (disp) disp.value = show;

              // 若後端還會讀 hidden 欄位，就同步它
              const hidden = document.getElementById('useEnd');
              if (hidden) hidden.value = useEnd.value;
            }
          }
        } else {
          alert('⚠️ 查無路線');
        }

          } catch(err){
            console.error('❌ 取得距離失敗', err);
          }
        }

            onMounted(() => {
              // 地點自動完成
              initPlacesAutocompleteDebounced(
                { onOrigin: (p) => { origin.value = p.text; }, onDestination: (p) => { destination.value = p.text; } },
                { idleMs: 1000 }
              );
              // 載入車輛
              loadVehicles();
            });
            
            return {
              applyFor, vehicleType, purposeType,arrivalDisplay,
              passengerCount, useStart, useEnd, reasonType, applyReason,
              origin, destination, tripType, applicant,
              singleDistance, singleDuration, roundTripDistance, roundTripDuration,
              passengers, addPassenger, removePassenger,
              // 車輛相關（給 template 綁定）
              vehicles, availableVehicles, assign,
              onSubmit, calcDistance
            };
          }
        }).mount('#app');
    </script>

</body>