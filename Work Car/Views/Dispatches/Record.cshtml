@* Views/Dispatch/Index.cshtml *@

<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>派車紀錄</title>

    <!-- Icons / Vue / axios -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <style>
        :root {
            --bg1: #e8f0fb;
            --bg2: #f6f9fe;
            --panel: #fff;
            --border: #dbeafe;
            --border-2: #e8eefc;
            --muted: #64748b;
            --text: #0f172a;
            --primary: #2563eb;
            --primary-600: #1d4ed8;
            --row-alt: #fffdf7;
            --shadow: 0 1px 3px rgba(16,24,40,.08);
            /* ✅ 補上狀態用色 */
            --ok: #16a34a;
            --ok-bg: #ecfdf5;
            --ok-br: #a7f3d0;
            --danger: #b91c1c;
            --danger-bg: #fef2f2;
            --danger-br: #fecaca;
            --info: #1e3a8a;
            --info-bg: #eef2ff;
            --info-br: #c7d2fe;
            --warn: #92400e;
            --warn-bg: #fffbeb;
            --warn-br: #fde68a;
        }


        * {
            box-sizing: border-box
        }

        html, body {
            height: 100%
        }

        body {
            margin: 0;
            font-family: "Noto Sans TC","PingFang TC","Microsoft JhengHei",system-ui,Arial,sans-serif;
            color: var(--text);
            background: linear-gradient(180deg,var(--bg1) 0,var(--bg2) 1200px);
        }

        button.btn.btn-primary {
            background-color: #2563eb !important; /* 藍色底 */
            border-color: #2563eb !important;
            color: #fff !important;
        }

            button.btn.btn-primary:hover {
                background-color: #1d4ed8 !important; /* 深藍 hover */
                border-color: #1d4ed8 !important;
            }

        .topbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 12px 16px
        }

            .topbar .wrap {
                max-width: 1200px;
                margin: 0 auto;
                padding: 0 16px;
            }

        /* 頁首條 */
        .page-bar {
            color: #fff;
            padding: 14px 0;
            box-shadow: 0 2px 10px rgba(0,0,0,.06);
        }

            .page-bar .wrap {
                max-width: 1200px;
                margin: 0 auto;
                padding: 0 16px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .page-bar .title {
                color: #95B6D1;
                font-size: 20px;
                font-weight: 800;
                letter-spacing: .5px;
            }

        /* 通用按鈕 */
        .btn {
            border: 1px solid var(--border);
            background: #fff;
            padding: 8px 12px;
            border-radius: 10px;
            cursor: pointer;
        }

            .btn i {
                margin-right: 6px;
            }

        .btn-warning {
            background: #ffb020;
            border-color: #ffb020;
            color: #111827;
            font-weight: 700;
        }

        .btn-success {
            background: #22c55e;
            border-color: #22c55e;
            color: #fff;
            font-weight: 700;
        }

        .btn-outline {
            background: #fff;
            border-color: #c7d2fe;
            color: #4338ca;
        }

        /* 外框與卡片 */
        .wrap {
            max-width: 1200px;
            margin: 18px auto;
            padding: 0 16px;
        }

        .card {
            background: var(--panel);
            border: 1px solid var(--border);
            border-radius: 14px;
            box-shadow: var(--shadow);
        }

        /* === 工具列（像設計圖那條） === */
        .filters-bar {
            margin: 12px 0 10px;
            padding: 10px;
            border: 1px solid var(--border);
            background: linear-gradient(180deg,#f5f8ff,#eef4ff);
            border-radius: 12px;
            display: flex;
            align-items: center;
            gap: 6px;
            overflow: hidden;
            box-sizing: border-box;
        }

        .filters-chip {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 10px;
            height: 36px;
            border: 1px solid #dbeafe;
            background: #f7faff;
            color: #1e3a8a;
            border-radius: 999px;
            white-space: nowrap;
        }

            .filters-chip label {
                font-size: 12px;
                color: #1e3a8a;
            }

            .filters-chip input, .filters-chip select {
                border: 0;
                outline: 0;
                background: transparent;
                font-size: 14px;
                min-width: 120px;
            }

                .filters-chip input[type="date"] {
                    min-width: 150px;
                }

        .filters-spacer {
            flex: 1 1 auto;
        }
        /* 右推搜尋 */

        .filters-search {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 6px 10px;
            height: 36px;
            border: 1px solid #c7d2fe;
            background: #fff;
            border-radius: 999px;
            
        }

            .filters-search input {
                border: 0;
                outline: 0;
                background: transparent;
                font-size: 14px;
                min-width: 220px;
            }

        .icon-btn-ghost {
            width: 28px;
            height: 28px;
            border-radius: 8px;
            border: 1px solid #c7d2fe;
            background: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #1e40af;
        }

        /* 表格卡片 */
        .card.records {
            padding: 6px 0 10px;
        }

        .table-wrap {
            padding: 0 12px 12px;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        th {
            white-space: nowrap; /* 不換行 */
            overflow: hidden; /* 超出隱藏 */
            text-overflow: ellipsis; /* 超出顯示省略號，可選 */
        }


        thead th {
            text-align: left;
            padding: 12px;
            font-size: 13px;
            color: #334155;
            background: #eaf1ff;
            border-bottom: 1px solid var(--border);
            position: sticky;
            top: 0;
            z-index: 2;
        }

        tbody tr {
            border-bottom: 1px solid var(--border-2);
        }

            tbody tr:nth-child(2n) {
                background: var(--row-alt);
            }

            tbody tr:hover {
                background: #fff7e5;
            }

        tbody td {
            padding: 12px;
            vertical-align: top;
            font-size: 14px;
        }

        .mono {
            font-variant-numeric: tabular-nums;
        }

        /* 小膠囊 / 狀態 */
        .pill {
            display: inline-block;
            padding: 2px 10px;
            border-radius: 999px;
            font-size: 12px;
            border: 1px solid #c7d2fe;
            background: #eef2ff;
            color: #3730a3;
            font-weight: 600;
        }

            .pill.blue {
                background: #eff6ff;
                border-color: #bfdbfe;
                color: #1e40af;
            }

        .chip {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 999px;
            font-size: 12px;
            border: 1px solid #e5e7eb;
            background: #f8fafc;
            color: #0f172a;
        }

            .chip.approved {
                background: #ecfdf5;
                border-color: #a7f3d0;
                color: #065f46;
            }

            

        /* 列操作鈕 */
        .actions {
            display: flex;
            gap: 10px;
        }

        .icon-btn {
            width: 28px;
            height: 28px;
            border-radius: 8px;
            border: 1px solid var(--border);
            display: flex;
            align-items: center;
            justify-content: center;
            background: #fff;
            cursor: pointer;
        }

            .icon-btn:hover {
                box-shadow: 0 1px 6px rgba(0,0,0,.08);
            }

            .icon-btn.view {
                color: #0ea5e9;
            }

            .icon-btn.clone {
                color: #6366f1;
            }

            .icon-btn.edit {
                color: #22c55e;
            }

            .icon-btn.delete {
                color: #ef4444;
            }

        .hint {
            color: #94a3b8;
            text-align: right;
            font-size: 12px;
            padding: 6px 2px 0;
        }

        @@media (max-width:980px) {
            .filters-bar

        {
            overflow-x: auto;
        }

        .filters-chip input, .filters-chip select {
            min-width: 110px;
        }

        .filters-search input {
            min-width: 160px;
        }

        }
        /* 卡片標題與內容區塊，確保一致內距與分隔線 */
        .card-hd {
            padding: 12px 16px;
            border-bottom: 1px solid var(--border);
            background: #fff;
        }

        .card-bd {
            padding: 12px 0px;
        }

        /* 搜尋欄與表格在同張卡片內，間距微調 */
        .records .filters-bar {
            margin: 0 0 10px; /* 貼齊卡片邊，底下留空隙 */
        }

        .badge.s-approved {
            background: var(--ok-bg);
            border-color: var(--ok-br);
            color: var(--ok)
        }

        .badge.s-reject {
            background: var(--danger-bg);
            border-color: var(--danger-br);
            color: var(--danger);
        }
        .badge.s-review {
            background: var(--info-bg);
            border-color: var(--info-br);
            color: var(--info)
        }

        .badge.s-wait {
            background: var(--warn-bg);
            border-color: var(--warn-br);
            color: var(--warn)
        }

        .badge.s-muted {
            background: #f1f5f9;
            border-color: #e5e7eb;
            color: #6b7280
        }

        .modal-mask {
            position: fixed;
            inset: 0; /* top:0; right:0; bottom:0; left:0 */
            background: rgba(0,0,0,.45);
            display: grid;
            place-items: center;
            z-index: 9999;
        }
        .modal-container {
            background: #fff;
            border-radius: 10px;
            padding: 20px 24px;
            width: 360px;
            max-width: 90%;
            box-shadow: 0 4px 12px rgba(0,0,0,.15);
            animation: fadeIn .2s ease-out;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 700;
            margin: 0 0 4px;
        }

        .modal-subtitle {
            font-size: 14px;
            color: #6b7280;
            margin: 0 0 16px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 6px;
            margin-bottom: 16px;
        }

            .form-group label {
                font-size: 14px;
                font-weight: 500;
                color: #374151;
            }

            .form-group select {
                border: 1px solid #d1d5db;
                border-radius: 6px;
                padding: 6px 10px;
                font-size: 14px;
            }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-6px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        /* 全欄位不換行 + 超出省略 */
        table th, table td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* 只有路線可換行 */
        td.col-route {
            white-space: normal;
            overflow: visible;
            text-overflow: clip;
        }

    </style>
</head>
<body>
    <main id="app" class="wrap" v-cloak>
        <div class="card records">
            <!-- 卡片標題列：左標題、右按鈕 -->
            <div class=" topbar d-flex align-items-center justify-content-between">
                <h5 class="mb-0 fw-bold">派車紀錄</h5>
                <div class="d-flex gap-2">
                    <a class="btn btn-warning fw-bold" asp-controller="Dispatches" asp-action="Dispatch">
                        用車申請
                    </a>
                    <a class="btn btn-success fw-bold" asp-controller="Dispatches" asp-action="Dispatch">
                        共乘併單
                    </a>
                    <button class="btn btn-outline" @@click="exportCsv">
                        <i class="fa-solid fa-file-export"></i> 匯出
                    </button>
                </div>
            </div>

            <!-- 卡片內容：搜尋欄 + 表格，同寬 -->
            <div class="card-bd">
                <!-- 搜尋欄 -->
                <div class="filters-bar">
                    <div class="filters-chip q">
                        <label>用車日期</label>
                        <input type="date" v-model="q.dateFrom">
                        <span style="color:#64748b;">–</span>
                        <input type="date" v-model="q.dateTo">
                    </div>

                    <div class="filters-chip">
                        <label>駕駛員</label>
                        <select v-model="q.driver">
                            <option value="">全部</option>
                            <option v-for="d in uniqueDrivers" :key="d" :value="d">{{ d }}</option>
                        </select>
                    </div>

                    <div class="filters-chip">
                        <label>申請人</label>
                        <input type="text" placeholder="輸入姓名…" v-model.trim="q.applicant">
                    </div>


                    <div class="filters-search">
                        <input type="text" placeholder="車輛（輸入車牌…）" v-model.trim="q.plate" @@keyup.enter="reload">
                        <button class="icon-btn-ghost" title="搜尋" @@click="reload">
                            <i class="fa-solid fa-magnifying-glass"></i>
                        </button>
                    </div>
                </div>

                <!-- 表格 -->
                <div class="table-wrap">
                    <table>
                        <thead>
                            <tr>
                                <th style="width:120px">用車日期 <i class="fa-solid fa-caret-down" style="color:#9ca3af"></i></th>
                                <th style="width:130px">用車時間</th>
                                <th>目的地</th>
                                <th style="width:260px">事由</th>
                                <th style="width:120px">申請人</th>
                                <th style="width:70px">人數</th>
                                <th style="width:90px">行駛里程</th>
                                <th style="width:100px">審核狀態</th>
                                <th style="width:120px">駕駛員</th>
                                <th style="width:90px">車輛</th>
                                <th style="width:70px">長/短差</th>
                                <th style="width:140px">功能</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="r in shown" :key="r.dispatchId">
                                <td class="mono">{{ rocDate(r.useStart) }}</td>
                                <td class="mono">{{ timeSpan(r.useStart, r.useEnd) }}</td>
                                <td class="col-route"><div>{{ r.route }}</div></td>
                                <td>
                                    <span v-if="r.reasonType">({{ r.reasonType }}) </span>{{ r.reason }}
                                </td>
                                <td>{{ r.applicant }}</td>
                                <td class="mono">{{ r.seats }}</td>
                                <td class="mono">{{ fmtKm(r.km) }}</td>
                                <td><span class="badge" :class="statusClass(r.status)">{{ statusText(r.status) }}</span></td>
                                <td><span class="pill">{{ r.driver }}</span></td>
                                <td><span class="pill blue">{{ r.plate }}</span></td>
                                <td>
                                    <a href="javascript:;" @@click="toggleLongShort(r)"
                                       :style="{color: r.longShort==='長差' ? '#2563eb':'#64748b', textDecoration:'none', fontWeight:'600'}">
                                        {{ r.longShort || '—' }}
                                    </a>
                                </td>
                                <td>
                                    <div class="actions">
                                        <button class="icon-btn view" title="檢視" @@click="viewRow(r)"><i class="fa-solid fa-eye"></i></button>
                                        <button class="icon-btn edit" title="編輯" @@click="editRow(r)"><i class="fa-solid fa-pen-to-square"></i></button>
                                        <button class="icon-btn delete" title="刪除" @@click="removeRow(r)"><i class="fa-solid fa-trash"></i></button>
                                    </div>
                                </td>
                            </tr>
                            <tr v-if="!shown.length">
                                <td colspan="12" style="text-align:center;color:#94a3b8;padding:16px">目前沒有資料</td>
                            </tr>
                        </tbody>
                    </table>

                    <div class="hint">最後更新時間：{{ lastUpdated }}</div>
                </div>
            </div>
        </div>
        <!-- 編輯 Modal（只改駕駛/車輛） -->
        <div v-if="editing" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">更新指派</h3>
                <p class="modal-subtitle">派車單 #{{ editing.dispatchId }}</p>

                <div class="form-group">
                    <label>可用駕駛</label>
                    <select v-model.number="selectedDriverId" class="form-control"
                            :disabled="currentDriver && (!availDrivers || availDrivers.length === 0)">
                        <option :value="null">（不指定）</option>
                        <!-- 當下的駕駛 -->
                        <option v-if="currentDriver" :value="currentDriver.driverId">
                            ★ 當前指派：{{ currentDriver.driverName }}
                        </option>
                        <!-- 其他可用駕駛 -->
                        <option v-for="d in availDrivers" :key="d.driverId" :value="d.driverId">
                            {{ d.driverName }}
                        </option>
                    </select>
                    <div v-if="currentDriver && (!availDrivers || availDrivers.length === 0)"
                         style="color:#b91c1c; margin-top:6px;">
                        ⚠️ 當下沒有可用司機
                    </div>
                </div>

                <div class="form-group">
                    <label>可用車輛</label>
                    <select v-model.number="selectedVehicleId" class="form-control"
                            :disabled="currentVehicle && (!availVehicles || availVehicles.length === 0)">
                        <option :value="null">（不指定）</option>
                        <!-- 當下的車輛 -->
                        <option v-if="currentVehicle" :value="currentVehicle.vehicleId">
                            ★ 當前指派：{{ currentVehicle.plateNo }}({{ currentVehicle.capacity }}人座)
                        </option>
                        <!-- 其他可用車輛 -->
                        <option v-for="v in availVehicles" :key="v.vehicleId" :value="v.vehicleId">
                            {{ v.plateNo }}（{{ v.brand }} {{ v.model }} / 容量 {{ v.capacity }}）
                        </option>
                    </select>
                    <div v-if="currentVehicle && (!availVehicles || availVehicles.length === 0)"
                         style="color:#b91c1c; margin-top:6px;">
                        ⚠️ 當下沒有可用車輛
                    </div>
                </div>




                <div class="modal-actions">
                    <button class="btn" @@click="cancelEdit">取消</button>
                    <button class="btn btn-primary" @@click="confirmEdit">確認</button>
                </div>
            </div>
        </div>


        <div v-if="viewing" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">派車單詳細資料</h3>
                <p class="modal-subtitle">#{{ viewing.dispatchId }}</p>
                <div><b>申請人：</b>{{ viewing.applicant }}</div>
                <div><b>駕駛人：</b>{{ viewing.driver || '未指派' }}</div>
                <div><b>車輛：</b>{{ viewing.plateNo || '未指派' }}</div>
                <div><b>事由：</b>{{ viewing.reason }}</div>
                <div><b>狀態：</b>{{ viewing.status }}</div>
                <div class="modal-actions">
                    <button class="btn btn-primary" @@click="closeView">關閉</button>
                </div>
            </div>
        </div>
    </main>


    <script>
        window.addEventListener('DOMContentLoaded', () => {
          const { createApp, ref, computed, onMounted } = Vue

          createApp({

            setup(){
              
              // 查詢條件
              const q = ref({ dateFrom:'', dateTo:'', driver:'', applicant:'', plate:'' })
              // 當月 1~最後 1 日
            function getMonthRange(){
              const now = new Date();
              const y = now.getFullYear(), m = now.getMonth();
              const first = new Date(y, m, 2);
              const last  = new Date(y, m+1, 0);
              const f = d => d.toISOString().slice(0,10);
              return { start: f(first), end: f(last) };
            }
              // 資料
              const rows = ref([])
              const lastUpdated = ref(new Date().toLocaleString())

              // 唯一駕駛清單
              const uniqueDrivers = computed(()=>{
                const s = new Set(rows.value.map(r=>r.driver).filter(Boolean))
                return Array.from(s)
              })

              // 篩選 + 時間排序
              const shown = computed(()=>{
                const df = q.value.dateFrom ? new Date(q.value.dateFrom) : null
                const dt = q.value.dateTo   ? new Date(q.value.dateTo)   : null
                const driver = (q.value.driver || '').trim()
                const applicant = (q.value.applicant || '').trim()
                const plate = (q.value.plate || '').trim()

                return rows.value
                  .filter(r=>{
                    const d = new Date(r.useStart)
                    if (df && d < df) return false
                    if (dt && d > endOfDay(dt)) return false
                    if (driver && r.driver !== driver) return false
                    if (applicant && !String(r.applicant).includes(applicant)) return false
                    if (plate && !String(r.plate).includes(plate)) return false
                    return true
                  })
                  .sort((a,b)=> new Date(a.useStart) - new Date(b.useStart))
              })

              // 工具
              const pad = n => String(n).padStart(2,'0')
              const rocDate = (d)=>{
                const x = new Date(d); if (isNaN(x)) return ''
                const roc = x.getFullYear()-1911
                return `${roc}/${pad(x.getMonth()+1)}/${pad(x.getDate())}`
              }
              const timeSpan = (s,e)=>{
                const a = new Date(s), b = new Date(e)
                if (isNaN(a)||isNaN(b)) return ''
                return `${pad(a.getHours())}:${pad(a.getMinutes())}~${pad(b.getHours())}:${pad(b.getMinutes())}`
              }
              const fmtKm = v => (v ?? '-') + (v!=null ? '' : '')
              const endOfDay = d => new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23,59,59,999)

               const viewing = ref(null);

        // R: 檢視
           const viewRow = async (r) => {
          try {
            const res = await axios.get(`/api/dispatch/${r.dispatchId}`);
            viewing.value = res.data;   // 這裡觸發 modal 顯示
          } catch (err) {
            console.error(err);
            alert("讀取失敗");
          }
        };
        const closeView = () => {
          viewing.value = null;
        };



        // U: 編輯
          
          const selectedDriverId = ref(null); // ✅ 選擇的駕駛
          const selectedVehicleId = ref(null);// ✅ 選擇的車
          const availDrivers = ref([]);  // 可用駕駛清單
          const availVehicles = ref([]); // 可用車輛清單
          const editing = ref(null);   // 正在編輯的 row
          const drivers = ref([]);
          const vehicles = ref([]);
          const currentDriver  = ref(null);
          const currentVehicle = ref(null);

        const editRow = async (r) => {
          try {
            viewing.value = null;
            editing.value = r;

            const appRes = await axios.get(`/api/carapplications/${r.applyId}`);
            const app = appRes.data?.app ?? {};

            // 設定當下 driver/vehicle
            let drv = app.driverId ?? app.DriverId ?? r.driverId ?? null;
            let veh = app.vehicleId ?? app.VehicleId ?? r.vehicleId ?? null;

            selectedDriverId.value  = drv !== null ? Number(drv) : null;
            selectedVehicleId.value = veh !== null ? Number(veh) : null;

            // 存放當下駕駛/車輛（顯示在最上面）
            currentDriver.value = drv
              ? { driverId: Number(drv), driverName: app.driverName ?? r.driver ?? '(未知駕駛)' }
              : null;

            currentVehicle.value = veh
              ? {
            vehicleId: Number(veh),
            plateNo:   app.plateNo ?? r.plate ?? '(未知車輛)',
            capacity:  app.vehicle?.capacity ?? '(未知容量)'
              }
            : null;


            // 抓可用清單
            const from = isoLocal(app.useStart ?? r.useStart);
            const to   = isoLocal(app.useEnd   ?? r.useEnd);
            const cap  = Number(app.passengerCount ?? r.seats ?? 0);

            const [driversRes, vehiclesRes] = await Promise.all([
              axios.get(`/api/drivers/available`,  { params: { from, to } }),
              axios.get(`/api/vehicles/available`, { params: { from, to, capacity: cap || undefined } })
            ]);

            availDrivers.value  = driversRes.data || [];
            availVehicles.value = vehiclesRes.data || [];

          } catch (err) {
            console.error("讀取可用人車失敗：", err);
            alert("讀取可用人車失敗");
            editing.value = null;
          }
        };

                function isoLocal(date) {
          if (!date) return "";
          const d = new Date(date);
          if (isNaN(d)) return "";
          const pad = n => String(n).padStart(2, "0");
          return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;
        }


        // 確認更新
                       const confirmEdit = async () => {
          if (!editing.value) return;
          try {
            await axios.patch(`/api/carapplications/${editing.value.applyId}/assignment`, {
              driverId:  selectedDriverId.value ?? null,
              vehicleId: selectedVehicleId.value ?? null
            });
            alert("指派已更新");
            editing.value = null;
            await reload(); // 重新載入列表
          } catch (err) {
            console.error(err);
            alert("更新失敗");
          }
        };



        const cancelEdit = () => {
          editing.value = null
        }


        // D: 刪除
        const removeRow = async (r) => {
          if (!confirm(`確定刪除派車單 #${r.dispatchId} ?`)) return;

          try {
            await axios.delete(`/api/dispatch/${r.dispatchId}`);
            alert("刪除成功");
            rows.value = rows.value.filter(x => x.dispatchId !== r.dispatchId);
          } catch (err) {
            alert("刪除失敗");
          }
        };
              function exportCsv(){
                const headers = ['用車日期','用車時間','目的地','事由','申請人','人數','里程','狀態','駕駛','車牌','長短差']
                const lines = shown.value.map(r=>[
                  rocDate(r.useStart), timeSpan(r.useStart, r.useEnd),
                  r.route,r.reasonType, r.reason, r.applicant, r.seats, r.km ?? '',
                  r.status, r.driver, r.plate, r.longShort ?? ''
                ].map(s=>`"${String(s??'').replaceAll('"','""')}"`).join(','))
                const csv = [headers.join(','), ...lines].join('\r\n')
                const blob = new Blob([csv], {type:'text/csv;charset=utf-8;'})
                const url = URL.createObjectURL(blob)
                const a = document.createElement('a')
                a.href = url; a.download = '派車紀錄.csv'; a.click()
                URL.revokeObjectURL(url)
              }

              // 載入資料（有 API 就打，沒有就用 mock）
              async function reload(){
                try{
                  const params = {
                    dateFrom: q.value.dateFrom || undefined,
                    dateTo:   q.value.dateTo   || undefined,
                    driver:   q.value.driver   || undefined,
                    applicant:q.value.applicant|| undefined,
                    plate:    q.value.plate    || undefined
                  }
                  const res = await axios.get('/api/dispatch/records', { params })
                  rows.value = (res.data || []).map(normalize)
                }catch{
                  rows.value = mockRows().map(normalize)
                }
                lastUpdated.value = new Date().toLocaleString()
              }
                      onMounted(() => {
          const { start, end } = getMonthRange();
          q.value.dateFrom = start;   // ✅ 這裡要跟 q 定義一致
          q.value.dateTo   = end;
          reload();                  // ✅ 呼叫 reload()
        });

                      function normalize(x){
          const did = x.dispatchId ?? x.id ?? Math.random().toString(16).slice(2);
          return {
            dispatchId: did, 
            applyId:    x.applyId ?? x.ApplyId ?? null,
            useStart:   x.useStart ?? x.start ?? new Date(),
            useEnd:     x.useEnd   ?? x.end   ?? new Date(Date.now()+60*60*1000),
            route:      x.route ?? `${x.origin ?? ''} - ${x.destination ?? ''}`,
            reasonType: x.reasonType ?? '',
            reason:     x.reason ?? x.applyReason ?? '',
            applicant:  x.applicant ?? x.applicantName ?? '',
            seats:      Number(x.seats ?? x.passengerCount ?? 0),
            km:         Number(x.km ?? x.tripDistance ?? 0),
            status:     x.status ?? x.dispatchStatus ?? '待審核',
            driver:     x.driver ?? x.driverName ?? '',
            driverId:   x.driverId ?? null,
            plate:      x.plate ?? x.plateNo ?? '',
            vehicleId:  x.vehicleId ?? null,
            longShort:  x.longShort ?? (Math.random()>0.5 ? '長差':'短差')
          }
        }


              function mockRows(){
                const base = new Date(); base.setHours(0,0,0,0)
                const mk=(h1,m1,mins,o)=>({
                  useStart:new Date(base.getFullYear(),base.getMonth(),base.getDate(),h1,m1),
                  useEnd:new Date(base.getFullYear(),base.getMonth(),base.getDate(),h1,m1+mins),
                  ...o
                })

              }
               // 顯示文字/樣式
             const statusText = (s) => {
               const k = String(s || "").trim();
               if (k === "完成審核" || k.toLowerCase() === "approved") return "完成審核";
               if (k === "駁回" || k.toLowerCase() === "reject") return "駁回";
               return "待審核";
             };

             // 顯示樣式
             const statusClass = (s) => {
               const k = String(s || "").trim();
               if (k === "完成審核" || k.toLowerCase() === "approved") return "s-approved";
               if (k === "駁回" || k.toLowerCase() === "reject") return "s-reject";
               return "s-wait"; // 待審核
             };

              // init
              reload()

              return {
                q, rows, shown, uniqueDrivers, lastUpdated,
                rocDate, timeSpan, fmtKm,statusText,statusClass,
                reload, viewRow, closeView,viewing,editRow, confirmEdit, cancelEdit,removeRow,
                editing ,availDrivers, availVehicles,currentDriver,currentVehicle,
                selectedDriverId, selectedVehicleId, drivers, vehicles, exportCsv
              }
            }
          }).mount('#app')
        })
    </script>
</body>
</html>
