@{
    ViewData["Title"] = "派車紀錄";
}

<head>
    
    <title>派車紀錄</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="/css/Dispatch/Record.css" rel="stylesheet" />
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

</head>
<body>
    <main id="app" class="wrap" v-cloak>
        <div class="card records">
            <!-- 卡片標題列：左標題、右按鈕 -->
            <div class=" topbar d-flex align-items-center justify-content-between">
                <h5 class="mb-0 fw-bold">派車紀錄</h5>
                <div class="d-flex gap-2">
                    @if (User.IsInRole("Admin"))
                    {
                    <a class="btn btn-warning fw-bold" asp-controller="Dispatches" asp-action="Dispatch">
                        用車申請
                    </a>
                    <a class="btn btn-success fw-bold" asp-controller="Dispatches" asp-action="Dispatch">
                        共乘併單
                    </a>
                    <button class="btn btn-outline" @@click="exportCsv">
                        <i class="fa-solid fa-file-export"></i> 匯出
                    </button>
                    }
                </div>
            </div>

            <!-- 卡片內容：搜尋欄 + 表格，同寬 -->
            <div class="card-bd">
                <!-- 搜尋欄 -->
                <div class="filters-bar">
                    <div class="filters-chip q">
                        <label>用車日期</label>
                        <input type="date" v-model="q.dateFrom">
                        <span style="color:#64748b;">–</span>
                        <input type="date" v-model="q.dateTo">
                    </div>

                    <div class="filters-chip">
                        <label>駕駛員</label>
                        <select v-model="q.driver">
                            <option value="">全部</option>
                            <option v-for="d in uniqueDrivers" :key="d" :value="d">{{ d }}</option>
                        </select>
                    </div>

                    <div class="filters-chip">
                        <label>申請人</label>
                        <input type="text" placeholder="輸入姓名…" v-model.trim="q.applicant">
                    </div>


                    <div class="filters-search">
                        <input type="text" placeholder="車輛（輸入車牌…）" v-model.trim="q.plate" @@keyup.enter="reload">
                        <button class="icon-btn-ghost" title="搜尋" @@click="reload">
                            <i class="fa-solid fa-magnifying-glass"></i>
                        </button>
                    </div>
                </div>

                <!-- 表格 -->
                <div class="table-wrap">
                    <table>
                        <thead>
                            <tr>
                                <th style="width:120px">用車日期 <i class="fa-solid fa-caret-down" style="color:#9ca3af"></i></th>
                                <th style="width:130px">用車時間</th>
                                <th>目的地</th>
                                <th style="width:260px">事由</th>
                                <th style="width:120px">申請人</th>
                                <th style="width:70px">人數</th>
                                <th style="width:90px">行駛里程</th>
                                <th style="width:100px">審核狀態</th>
                                <th style="width:120px">駕駛員</th>
                                <th style="width:90px">車輛</th>
                                <th style="width:70px">長/短差</th>
                                @if (User.IsInRole("Admin"))
                                {
                                    <th style="width:140px">功能</th>
                                }
                                <tbody>
                            <tr v-for="r in shown" :key="r.dispatchId">
                                <td class="mono">{{ rocDate(r.useStart) }}</td>
                                <td class="mono">{{ timeSpan(r.useStart, r.useEnd) }}</td>
                                <td class="col-route"><div>{{ r.route }}</div></td>
                                <td>
                                    <span v-if="r.reasonType">({{ r.reasonType }}) </span>{{ r.reason }}
                                </td>
                                <td>{{ r.applicant }}</td>
                                <td class="mono">{{ r.seats }}</td>
                                <td class="mono">{{ fmtKm(r.km) }}</td>
                                <td><span class="badge" :class="statusClass(r.status)">{{ statusText(r.status) }}</span></td>
                                <td><span class="pill">{{ r.driver }}</span></td>
                                <td>
                                    <span class="pill blue" :class="r.plate ? '' : 's-muted'">
                                        {{ r.plate || '未指派' }}
                                    </span>
                                </td>
                                <td>
                                    <a href="javascript:;" @@click="toggleLongShort(r)"
                                       :style="{color: r.longShort==='長差' ? '#2563eb':'#64748b', textDecoration:'none', fontWeight:'600'}">
                                        {{ r.longShort || '—' }}
                                    </a>
                                </td>
                                <td>
                                            @if (User.IsInRole("Admin"))
                                            {
                                                <div class="actions">
                                                    <button class="icon-btn view" title="檢視" @@click="viewRow(r)"><i class="fa-solid fa-eye"></i></button>
                                                    <button v-if="canEdit(r)" class="icon-btn edit" title="編輯" @@click="editRow(r)"><i class="fa-solid fa-pen-to-square"></i></button>
                                                    <button class="icon-btn delete" title="刪除" @@click="removeRow(r)"><i class="fa-solid fa-trash"></i></button>
                                                </div>
                                            }
                                        </td>
                            </tr>
                            <tr v-if="!shown.length">
                                <td colspan="12" style="text-align:center;color:#94a3b8;padding:16px">目前沒有資料</td>
                            </tr>
                        </tbody>
                    </table>

                    <div class="hint">最後更新時間：{{ lastUpdated }}</div>
                </div>
            </div>
        </div>
        <!-- 編輯 Modal（只改駕駛/車輛） -->
        <div v-if="editing" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">更新指派</h3>
                <p class="modal-subtitle">派車單 #{{ editing.dispatchId }}</p>

                <div class="form-group">
                    <label>可用駕駛</label>
                    <select v-model.number="selectedDriverId" class="form-control"
                            :disabled="currentDriver && (!availDrivers || availDrivers.length === 0)">
                        <option :value="null">（不指定）</option>
                        <!-- 當下的駕駛 -->
                        <option v-if="currentDriver" :value="currentDriver.driverId">
                            ★ 當前指派：{{ currentDriver.driverName }}
                        </option>
                        <!-- 其他可用駕駛 -->
                        <option v-for="d in availDrivers" :key="d.driverId" :value="d.driverId">
                            {{ d.driverName }}
                        </option>
                    </select>
                    <div v-if="currentDriver && (!availDrivers || availDrivers.length === 0)"
                         style="color:#b91c1c; margin-top:6px;">
                        ⚠️ 當下沒有可用司機
                    </div>
                </div>

                <div class="form-group">
                    <label>可用車輛</label>
                    <select v-model.number="selectedVehicleId" class="form-control"
                            :disabled="currentVehicle && (!availVehicles || availVehicles.length === 0)">
                        <option :value="null">（不指定）</option>
                        <!-- 當下的車輛 -->
                        <option v-if="currentVehicle" :value="currentVehicle.vehicleId">
                            ★ 當前指派：{{ currentVehicle.plateNo }}(容量{{ currentVehicle.capacity }})
                        </option>
                        <!-- 其他可用車輛 -->
                        <option v-for="v in availVehicles" :key="v.vehicleId" :value="v.vehicleId">
                            {{ v.plateNo }}（{{ v.brand }} {{ v.model }} / 容量 {{ v.capacity }}）
                        </option>
                    </select>
                    <div v-if="currentVehicle && (!availVehicles || availVehicles.length === 0)"
                         style="color:#b91c1c; margin-top:6px;">
                        ⚠️ 當下沒有可用車輛
                    </div>
                </div>




                <div class="modal-actions">
                    <button class="btn" @@click="cancelEdit">取消</button>
                    <button class="btn btn-primary" @@click="confirmEdit">確認</button>
                </div>
            </div>
        </div>


        <div v-if="viewing" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">派車單詳細資料</h3>
                <p class="modal-subtitle">#{{ viewing.dispatchId }}</p>
                <div><b>申請人：</b>{{ viewing.applicant }}</div>
                <div><b>駕駛人：</b>{{ viewing.driver || '未指派' }}</div>
                <div><b>車輛：</b>{{ viewing.plateNo || '未指派' }}</div>
                <div><b>事由：</b>{{ viewing.reason }}</div>
                <div><b>狀態：</b>{{ viewing.status }}</div>
                <div class="modal-actions">
                    <button class="btn btn-primary" @@click="closeView">關閉</button>
                </div>
            </div>
        </div>
    </main>


    <script>
        window.addEventListener('DOMContentLoaded', () => {
          const { createApp, ref, computed, onMounted } = Vue

          createApp({

            setup(){
              
              // 查詢條件
              const q = ref({ dateFrom:'', dateTo:'', driver:'', applicant:'', plate:'' })
              // 當月 1~最後 1 日
            function getMonthRange(){
              const now = new Date();
              const y = now.getFullYear(), m = now.getMonth();
              const first = new Date(y, m, 2);
              const last  = new Date(y, m+1, 1);
              const f = d => d.toISOString().slice(0,10);
              return { start: f(first), end: f(last) };
            }
              // 資料
              const rows = ref([])
              const lastUpdated = ref(new Date().toLocaleString())

              // 唯一駕駛清單
              const uniqueDrivers = computed(()=>{
                const s = new Set(rows.value.map(r=>r.driver).filter(Boolean))
                return Array.from(s)
              })

              // 篩選 + 時間排序
              const shown = computed(()=>{
                const df = q.value.dateFrom ? new Date(q.value.dateFrom) : null
                const dt = q.value.dateTo   ? new Date(q.value.dateTo)   : null
                const driver = (q.value.driver || '').trim()
                const applicant = (q.value.applicant || '').trim()
                const plate = (q.value.plate || '').trim()

                return rows.value
                  .filter(r=>{
                    const d = new Date(r.useStart)
                    if (df && d < df) return false
                    if (dt && d > endOfDay(dt)) return false
                    if (driver && r.driver !== driver) return false
                    if (applicant && !String(r.applicant).includes(applicant)) return false
                    if (plate && !String(r.plate).includes(plate)) return false
                    return true
                  })
              })

              // 工具
              const pad = n => String(n).padStart(2,'0')
              const rocDate = (d)=>{
                const x = new Date(d); if (isNaN(x)) return ''
                const roc = x.getFullYear()-1911
                return `${roc}/${pad(x.getMonth()+1)}/${pad(x.getDate())}`
              }
              const timeSpan = (s,e)=>{
                const a = new Date(s), b = new Date(e)
                if (isNaN(a)||isNaN(b)) return ''
                return `${pad(a.getHours())}:${pad(a.getMinutes())}~${pad(b.getHours())}:${pad(b.getMinutes())}`
              }
              const fmtKm = v => (v ?? '-') + (v!=null ? '' : '')
              const endOfDay = d => new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23,59,59,999)

               const viewing = ref(null);

        // R: 檢視
           const viewRow = async (r) => {
          try {
            const res = await axios.get(`/api/dispatch/${r.dispatchId}`);
            viewing.value = res.data;   // 這裡觸發 modal 顯示
          } catch (err) {
            console.error(err);
            alert("讀取失敗");
          }
        };
        const closeView = () => {
          viewing.value = null;
        };
        //現在時間>出發時間不可編輯
         function canEdit(r) {
          // 沒駕駛 → 一律可編輯
          if (!r.driverId) return true;

          // 沒有出發時間 → 不可編輯
          if (!r.useStart) return false;

          const start = new Date(r.useStart);
          if (isNaN(start)) return false;

          // 有駕駛 → 只能在出發前編輯
          return start > new Date();
        }






        // U: 編輯
          
          const selectedDriverId = ref(null); // ✅ 選擇的駕駛
          const selectedVehicleId = ref(null);// ✅ 選擇的車
          const availDrivers = ref([]);  // 可用駕駛清單
          const availVehicles = ref([]); // 可用車輛清單
          const editing = ref(null);   // 正在編輯的 row
          const drivers = ref([]);
          const vehicles = ref([]);
          const currentDriver  = ref(null);
          const currentVehicle = ref(null);

        const editRow = async (r) => {
          try {
            viewing.value = null;
            editing.value = r;

            const appRes = await axios.get(`/api/carapplications/${r.applyId}`);
            const app = appRes.data || {};

            // 設定當下 driver/vehicle
            let drv = app.driverId ?? app.DriverId ?? r.driverId ?? null;
            let veh = app.vehicleId ?? app.VehicleId ?? r.vehicleId ?? null;

            selectedDriverId.value  = drv !== null ? Number(drv) : null;
            selectedVehicleId.value = veh !== null ? Number(veh) : null;

            // 存放當下駕駛/車輛（顯示在最上面）
            currentDriver.value = drv
              ? { driverId: Number(drv), driverName: app.driverName ?? r.driver ?? '(未知駕駛)' }
              : null;

            currentVehicle.value = veh
              ? {
            vehicleId: Number(veh),
            plateNo:   app.plateNo ?? r.plate ?? '(未知車輛)',
            capacity:  app.capacity ?? r.capacity ?? '(未知容量)'
              }
            : null;


            // 抓可用清單
            const from = isoLocal(app.useStart ?? r.useStart);
            const to   = isoLocal(app.useEnd   ?? r.useEnd);
            const cap  = Number(app.passengerCount ?? r.seats ?? 0);

            const [driversRes, vehiclesRes] = await Promise.all([
              axios.get(`/api/drivers/available`,  { params: { from, to } }),
              axios.get(`/api/vehicles/available`, { params: { from, to, capacity: cap || undefined } })
            ]);

            availDrivers.value  = driversRes.data || [];
            availVehicles.value = vehiclesRes.data || [];

          } catch (err) {
            console.error("讀取可用人車失敗：", err);
            alert("讀取可用人車失敗");
            editing.value = null;
          }
        };

                function isoLocal(date) {
          if (!date) return "";
          const d = new Date(date);
          if (isNaN(d)) return "";
          const pad = n => String(n).padStart(2, "0");
          return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;
        }


        // 確認更新
                       const confirmEdit = async () => {
          if (!editing.value) return;
          try {
            await axios.patch(`/api/carapplications/${editing.value.applyId}/assignment`, {
              driverId:  selectedDriverId.value ?? null,
              vehicleId: selectedVehicleId.value ?? null
            });
            alert("指派已更新");
            editing.value = null;
            await reload(); // 重新載入列表
          } catch (err) {
            console.error(err);
            alert("更新失敗");
          }
        };



        const cancelEdit = () => {
          editing.value = null
        }


        // D: 刪除
        const removeRow = async (r) => {
          if (!confirm(`確定刪除派車單 #${r.dispatchId} ?`)) return;

          try {
            await axios.delete(`/api/dispatch/${r.dispatchId}`);
            alert("刪除成功");
            rows.value = rows.value.filter(x => x.dispatchId !== r.dispatchId);
          } catch (err) {
            alert("刪除失敗");
          }
        };
              function exportCsv(){
                const headers = ['用車日期','用車時間','目的地','事由','申請人','人數','里程','狀態','駕駛','車牌','長短差']
                const lines = shown.value.map(r=>[
                  rocDate(r.useStart), timeSpan(r.useStart, r.useEnd),
                  r.route,r.reasonType, r.reason, r.applicant, r.seats, r.km ?? '',
                  r.status, r.driver, r.plate, r.longShort ?? ''
                ].map(s=>`"${String(s??'').replaceAll('"','""')}"`).join(','))
                const csv = [headers.join(','), ...lines].join('\r\n')
                const blob = new Blob([csv], {type:'text/csv;charset=utf-8;'})
                const url = URL.createObjectURL(blob)
                const a = document.createElement('a')
                a.href = url; a.download = '派車紀錄.csv'; a.click()
                URL.revokeObjectURL(url)
              }

              // 載入資料
              async function reload(){
                try{
                  const params = {
                    dateFrom: q.value.dateFrom || undefined,
                    dateTo:   q.value.dateTo   || undefined,
                    driver:   q.value.driver   || undefined,
                    applicant:q.value.applicant|| undefined,
                    plate:    q.value.plate    || undefined,
                    order:    'id_desc'
                  }
                  const res = await axios.get('/api/dispatch/records', { params: { order: 'id_desc' } })
                  rows.value = (res.data || []).map(normalize)
                }catch{
                  rows.value = mockRows().map(normalize)
                }
                lastUpdated.value = new Date().toLocaleString()
              }
                      onMounted(() => {
          const { start, end } = getMonthRange();
          q.value.dateFrom = start;   // ✅ 這裡要跟 q 定義一致
          q.value.dateTo   = end;
          reload();                  // ✅ 呼叫 reload()
        });

                      function normalize(x){
          const did = x.dispatchId ?? x.id ?? Math.random().toString(16).slice(2);
          return {
            dispatchId: did, 
            applyId:    x.applyId ?? x.ApplyId ?? null,
            useStart:   x.useStart ?? x.start ?? new Date(),
            useEnd:     x.useEnd   ?? x.end   ?? new Date(Date.now()+60*60*1000),
            route:      x.route ?? `${x.origin ?? ''} - ${x.destination ?? ''}`,
            reasonType: x.reasonType ?? '',
            reason:     x.reason ?? x.applyReason ?? '',
            applicant:  x.applicant ?? x.applicantName ?? '',
            seats:      Number(x.seats ?? x.passengerCount ?? 0),
            km:         Number(x.km ?? x.tripDistance ?? 0),
            status:     x.status ?? x.dispatchStatus ?? '待審核',
            driver:     x.driver ?? x.driverName ?? '',
            driverId:   x.driverId ?? null,
            plate:      x.plate ?? x.plateNo ?? '',
            vehicleId:  x.vehicleId ?? null,
            longShort:  x.longShort ?? (Math.random()>0.5 ? '長差':'短差')
          }
        }


              function mockRows(){
                const base = new Date(); base.setHours(0,0,0,0)
                const mk=(h1,m1,mins,o)=>({
                  useStart:new Date(base.getFullYear(),base.getMonth(),base.getDate(),h1,m1),
                  useEnd:new Date(base.getFullYear(),base.getMonth(),base.getDate(),h1,m1+mins),
                  ...o
                })

              }
               // 顯示文字/樣式
             const statusText = (s) => {
               const k = String(s || "").trim();
               if (k === "完成審核" || k.toLowerCase() === "approved") return "完成審核";
               if (k === "駁回" || k.toLowerCase() === "reject") return "駁回";
               return "待審核";
             };

             // 顯示樣式
             const statusClass = (s) => {
               const k = String(s || "").trim();
               if (k === "完成審核" || k.toLowerCase() === "approved") return "s-approved";
               if (k === "駁回" || k.toLowerCase() === "reject") return "s-reject";
               return "s-wait"; // 待審核
             };

              // init
              reload()

              return {
                q, rows, shown, uniqueDrivers, lastUpdated,
                rocDate, timeSpan, fmtKm,statusText,statusClass,canEdit,
                reload, viewRow, closeView,viewing,editRow, confirmEdit, cancelEdit,removeRow,
                editing ,availDrivers, availVehicles,currentDriver,currentVehicle,
                selectedDriverId, selectedVehicleId, drivers, vehicles, exportCsv
              }
            }
          }).mount('#app')
        })
    </script>
</body>
