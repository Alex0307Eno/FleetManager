@{
    ViewData["Title"] = "派車單";
}
<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>派車單</title>
    <style>
        :root {
            --bg: #f6f7fb;
            --card: #fff;
            --border: #e5e7eb;
            --text: #1f2937;
            --muted: #6b7280;
            --primary: #1e6fb8;
            --shadow: 0 1px 3px rgba(16,24,40,.08);
            --ok: #16a34a;
            --ok-bg: #ecfdf5;
            --ok-br: #a7f3d0;
            --info: #1e3a8a;
            --info-bg: #eef2ff;
            --info-br: #c7d2fe;
            --warn: #92400e;
            --warn-bg: #fffbeb;
            --warn-br: #fde68a;
            --danger: #b91c1c;
            --danger-bg: #fef2f2;
            --danger-br: #fecaca;
        }

        [v-cloak] {
            display: none
        }

        * {
            box-sizing: border-box
        }

        body {
            margin: 0;
            background: var(--bg);
            color: var(--text);
            font-family: "Noto Sans TC","PingFang TC","Microsoft JhengHei",system-ui,Arial,sans-serif
        }

        .wrap {
            max-width: 1200px;
            margin: 24px auto;
            padding: 0 16px
        }

        .card {
            background: var(--card);
            border: 1px solid var(--border);
            border-radius: 10px;
            box-shadow: var(--shadow)
        }

        .card-hd {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 16px;
            border-bottom: 1px solid var(--border)
        }

        .btn {
            border: 1px solid var(--border);
            background: #fff;
            border-radius: 8px;
            padding: 8px 12px;
            cursor: pointer
        }

        .btn-primary {
            background: var(--primary);
            border-color: var(--primary);
            color: #fff
        }

        .btn-warning {
            background: #facc15;
            border-color: #eab308
        }

        .filters {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            background: #f3f4f6;
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 10px
        }

        .f-item {
            display: flex;
            align-items: center;
            gap: 8px;
            background: #fff;
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 6px 8px
        }

            .f-item input, .f-item select {
                border: 1px solid #cbd5e1;
                border-radius: 6px;
                padding: 6px 8px;
                background: #fff
            }

       

        .table-wrap {
            overflow: auto
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0
        }

        .topbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 12px 16px
        }
        thead th {
            position: sticky;
            top: 0;
            background: #f9fafb;
            border-top: 1px solid var(--border);
            border-bottom: 1px solid var(--border);
            text-align: left;
            font-weight: 600;
            color: #374151;
            padding: 10px;
            white-space: nowrap
        }

        tbody td {
            background: #fff;
            border-bottom: 1px solid var(--border);
            padding: 10px;
            vertical-align: top
        }

            thead th:first-child, tbody td:first-child {
                border-left: 1px solid var(--border)
            }

            thead th:last-child, tbody td:last-child {
                border-right: 1px solid var(--border)
            }

        tbody tr:first-child td {
            border-top: 1px solid var(--border)
        }

        .mono {
            font-variant-numeric: tabular-nums
        }

        .pill {
            display: inline-block;
            padding: 2px 10px;
            border-radius: 999px;
            font-size: 12px;
            border: 1px solid #c7d2fe;
            background: #eef2ff;
            color: #3730a3;
            font-weight: 600;
        }

            .pill.blue {
                background: #eff6ff;
                border-color: #bfdbfe;
                color: #1e40af;
            }

        .badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            border: 1px solid var(--border);
            border-radius: 7px;
            padding: 2px 8px;
            font-size: 12px;
            background: #fff;
            color: #111
        }

            .badge.s-approved {
                background: var(--ok-bg);
                border-color: var(--ok-br);
                color: var(--ok)
            }

            .badge.s-reject {
                background: var(--danger-bg);
                border-color: var(--danger-br);
                color: var(--danger);
            }




            .badge.s-review {
                background: var(--warn-bg);
                border-color: var(--warn-br);
                color: var(--warn)
            }

            .badge.s-wait {
                background: var(--warn-bg);
                border-color: var(--warn-br);
                color: var(--warn)
            }

            .badge.s-muted {
                background: #f1f5f9;
                border-color: #e5e7eb;
                color: #6b7280
            }

        .row-actions {
            display: flex;
            gap: 6px
        }

        .icon-btn {
            border: 1px solid var(--border);
            background: #fff;
            border-radius: 8px;
            width: 32px;
            height: 32px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer
        }

            .icon-btn.danger {
                border-color: var(--danger-br);
                background: var(--danger-bg);
                color: var(--danger)
            }

        .icon {
            width: 16px;
            height: 16px;
            stroke: #334155
        }

        .footer-dots {
            display: grid;
            gap: 10px;
            margin: 18px 0
        }

            .footer-dots .dotline {
                height: 8px;
                border-radius: 999px;
                background: #eef2f7;
                border: 1px solid var(--border)
            }

        .modal-mask {
            position: fixed;
            z-index: 9998;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,.4);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-container {
            background: #fff;
            border-radius: 10px;
            padding: 20px 24px;
            width: 360px;
            max-width: 90%;
            box-shadow: 0 4px 12px rgba(0,0,0,.15);
            animation: fadeIn .2s ease-out;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 700;
            margin: 0 0 4px;
        }

        .modal-subtitle {
            font-size: 14px;
            color: #6b7280;
            margin: 0 0 16px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 6px;
            margin-bottom: 16px;
        }

            .form-group label {
                font-size: 14px;
                font-weight: 500;
                color: #374151;
            }

            .form-group select {
                border: 1px solid #d1d5db;
                border-radius: 6px;
                padding: 6px 10px;
                font-size: 14px;
            }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(-6px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        /* 全欄位不換行 + 超出省略 */
        table th, table td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        /* 只有路線可換行 */
        td.col-route {
            white-space: normal;
            overflow: visible;
            text-overflow: clip;
        }

    
    </style>
</head>
<body>
    <div id="app" class="wrap" v-cloak>
        <section class="card">
            <div class="card-hd topbar">
                <h5 class="mb-0" style="font-weight:700">派車申請</h5>
                <div style="display:flex;gap:8px">
                    <a class="btn btn-warning" asp-controller="Dispatches" asp-action="CarApply">新增</a>
                    <button class="btn btn-primary" @@click="exportCSV">匯出</button>
                </div>
            </div>

            <div class="card-bd">
                <div class="filters">
                    <div class="f-item">
                        <label>日期起</label>
                        <input type="date" v-model="filters.dateStart">
                        <label>日期迄</label>
                        <input type="date" v-model="filters.dateEnd">
                        <button class="btn" style="margin-left:6px" @@click="reloadByDate">搜尋</button>
                        <button class="btn" style="margin-left:6px" @@click="resetFilters">重置</button>
                    </div>
                    <div class="f-item">
                        <label>駕駛人</label>
                        <select v-model="filters.driver">
                            <option value="">全部</option>
                            <option v-for="d in drivers" :key="d" :value="d">{{ d }}</option>
                        </select>
                    </div>
                    <div class="f-item">
                        <label>申請人</label>
                        <select v-model="filters.applicant">
                            <option value="">全部</option>
                            <option v-for="a in applicants" :key="a" :value="a">{{ a }}</option>
                        </select>
                    </div>
                    <div class="f-item">
                        <label>車輛</label>
                        <select v-model="filters.car">
                            <option value="">全部</option>
                            <option v-for="c in cars" :key="c" :value="c">{{ c }}</option>
                        </select>
                    </div>
                    
                </div>
            </div>

            <div class="card-bd table-wrap">
                <table>
                    <thead>
                        <tr>
                            <th style="width:110px">用車日期</th>
                            <th style="width:120px">用車時間</th>
                            <th style="width:260px">目的地</th>
                            <th>事由</th>
                            <th style="width:80px">申請人</th>
                            <th style="width:60px">人數</th>
                            <th style="width:90px">行駛里程</th>
                            <th style="width:100px">審核狀態</th>
                            <th style="width:90px">駕駛人</th>
                            <th style="width:80px">車輛</th>
                            <th style="width:80px">共乘</th>
                            <th style="width:110px">功能</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="r in filtered" :key="r.applyId">
                            <td class="mono">{{ r.useDate }}</td>
                            <td class="mono">{{ r.useTime }}</td>
                            <td class="col-route">{{ r.route }}</td>
                            <td>
                                <span v-if="r.reasonType">({{ r.reasonType }}) </span>{{ r.reason }}
                            </td>
                            <td>{{ r.applicantName }}</td>
                            <td class="mono">{{ r.passengerCount }}</td>
                            <td class="mono">{{ r.tripDistance }}</td>
                            <td><span class="badge" :class="statusClass(r.status)">{{ statusText(r.status) }}</span></td>
                            <td><span class="pill" :class="r.driverName ? '' : 's-muted'">{{ r.driverName || '未指派' }}</span></td>
                            <td><span class="pill blue" :class="r.plateNo ? '' : 's-muted'">{{ r.plateNo || '未指派' }}</span></td>
                            <td class="text-center">
                                <span v-if="r.passengerCount > 1" class="text-success fw-bold">✔</span>
                                <span v-else>-</span>
                            </td>
                            <td class="row-actions">
                                <button class="icon-btn" title="檢視" @@click="viewRow(r)">
                                    <svg class="icon" viewBox="0 0 24 24" fill="none">
                                        <path d="M2 12s4-7 10-7 10 7 10 7-4 7-10 7-10-7-10-7z" stroke-width="2" />
                                        <circle cx="12" cy="12" r="3" stroke-width="2" />
                                    </svg>
                                </button>
                                <button class="icon-btn" title="編輯" @@click="editRow(r)">
                                    <svg class="icon" viewBox="0 0 24 24" fill="none">
                                        <path d="M15 3l6 6M4 20l4-1 11-11-3-3L5 16l-1 4z" stroke-width="2" stroke-linejoin="round" />
                                    </svg>
                                </button>
                                <button class="icon-btn danger" title="刪除" @@click="removeRow(r)">
                                    <svg class="icon" viewBox="0 0 24 24" fill="none">
                                        <path d="M3 6h18M8 6l1-2h6l1 2M6 6l1 14h10l1-14" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                    </svg>
                                </button>
                            </td>
                        </tr>
                        <tr v-if="!loading && filtered.length===0">
                            <td colspan="11" style="text-align:center;color:#6b7280">沒有符合條件的資料</td>
                        </tr>
                    </tbody>
                </table>

                <div class="footer-dots">
                    <div class="dotline"></div><div class="dotline"></div><div class="dotline"></div><div class="dotline"></div><div class="dotline"></div>
                </div>
            </div>
        </section>
        <!-- 檢視狀態 Modal -->
        <div v-if="viewing" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">派車單詳細資料</h3>
                <p class="modal-subtitle">#{{ viewing.app.applyId }}</p>

                <div class="form-group">
                    <label>申請人</label>
                    <div>{{ viewing.app.applicantName }}</div>
                </div>

                <div class="form-group">
                    <label>駕駛人</label>
                    <div>{{ viewing.driverName || '未指派' }}</div>
                </div>

                <div class="form-group">
                    <label>車輛</label>
                    <div>{{ viewing.plateNo || '未指派' }}</div>
                </div>

                <div class="form-group">
                    <label>事由</label>
                    <div>
                        <span v-if="viewing.app.reasonType">({{ viewing.app.reasonType }})</span>
                        {{ viewing.app.applyReason }}
                    </div>
                </div>

                <div class="form-group">
                    <label>狀態</label>
                    <div>{{ viewing.app.status }}</div>
                </div>

                <div class="modal-actions">
                    <button class="btn btn-primary" @@click="closeView">關閉</button>
                </div>
            </div>
        </div>

        <!-- 編輯狀態 Modal -->
        <div v-if="editing" class="modal-mask">
            <div class="modal-container">
                <h3 class="modal-title">編輯審核狀態</h3>
                <p class="modal-subtitle">派車單 #{{ editing.applyId }}</p>

                <div class="form-group">
                    <label for="statusSelect">審核狀態</label>
                    <select id="statusSelect" v-model="newStatus">
                        <option value="待審核">待審核</option>
                        <option value="完成審核">完成審核</option>
                        <option value="駁回">駁回</option>
                    </select>
                </div>

                <div class="modal-actions">
                    <button class="btn" @@click="cancelEdit">取消</button>
                    <button class="btn btn-primary" @@click="confirmEdit">確認</button>
                </div>
            </div>
        </div>



    </div>


    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        const { createApp, ref, computed, onMounted } = Vue;

        createApp({
          setup(){
            const rows = ref([]);
            const loading = ref(true);
            const error = ref("");
               
            
            // 當月 1~最後 1 日
            function getMonthRange(){
              const now = new Date();
              const y = now.getFullYear(), m = now.getMonth();
              const first = new Date(y, m, 2);
              const last  = new Date(y, m+1, 0);
              const f = d => d.toISOString().slice(0,10);
              return { start: f(first), end: f(last) };
            }

            // 篩選條件
            const filters = ref({
              dateStart: "", dateEnd: "",
              driver: "", applicant: "", car: "", q: ""
            });

            const drivers = ref([]);
            const applicants = ref([]);
            const cars = ref([]);

            // 格式工具
            const pad = n => String(n).padStart(2,"0");
            const fmtDate = d => {
              const dt = new Date(d); if (isNaN(dt)) return "";
              return `${dt.getFullYear()}-${pad(dt.getMonth()+1)}-${pad(dt.getDate())}`;
            };
            const fmtTime = d => {
              const dt = new Date(d); if (isNaN(dt)) return "";
              return `${pad(dt.getHours())}:${pad(dt.getMinutes())}`;
            };

            // 後端 /api/dispatch/records -> 轉成前端欄位
                             const shapeRow = x => ({
          applyId: x.applyId,
          useDate: fmtDate(x.useStart),
          useTime: fmtTime(x.useStart),
          route: (x.origin || "") + " - " + (x.destination || ""),
          applicantName: x.applicantName || "",
          applicantDept: x.applicantDept || "",
          passengerCount: x.passengerCount ?? 0,
          tripType: x.tripType || "",
          tripDistance: x.singleDistance || x.roundTripDistance || "",
          status: x.status || "",

          // 新增
          reasonType: x.reasonType || "",
          reason: x.applyReason || "",
          driverName: x.driverName || "",
          plateNo: x.plateNo || ""
        });

                function normalizeDate(d) {
          if (!d) return null;
          const dt = new Date(d);
          if (isNaN(dt)) return null;
          return dt.toISOString().split('T')[0]; // yyyy-MM-dd
        }


            // 載入（依日期向後端要資料；其餘在前端過濾）
                    const loadData = async () => {
          loading.value = true; error.value = "";
          try {
            const params = {};
            if (filters.value.dateStart) params.dateFrom = normalizeDate(filters.value.dateStart);
            if (filters.value.dateEnd)   params.dateTo   = normalizeDate(filters.value.dateEnd);
        if (filters.value.q && filters.value.q.trim()) {
          params.q = filters.value.q.trim();
        }
            const res = await axios.get('/api/carApplications', { params });
            const arr = Array.isArray(res.data) ? res.data : [];
            rows.value = arr.map(shapeRow);
            console.log("API回傳", res.data);

            // 下拉清單
            const uniq = a => [...new Set(a.filter(Boolean))];
            drivers.value    = uniq(rows.value.map(r => r.driverName));
            applicants.value = uniq(rows.value.map(r => r.applicantName));
            cars.value       = uniq(rows.value.map(r => r.plateNo));
          } catch(e){
            console.log("Validation Errors:", e.response?.data?.errors);
            console.error("API錯誤:", e.response?.data || e.message);

            error.value = "讀取派車單失敗";
          } finally {
            loading.value = false;
          }
        };


            onMounted(() => {
              const {start,end} = getMonthRange();
              filters.value.dateStart = start;
              filters.value.dateEnd   = end;
              loadData();
            });

            // 前端篩選
            const filtered = computed(() => {
              const f = filters.value;
              const q = (f.q||"").toLowerCase().trim();

              return rows.value.filter(r => {
                // 日期區間
                if (f.dateStart && r.useDate < f.dateStart) return false;
                if (f.dateEnd   && r.useDate > f.dateEnd)   return false;

                if (f.driver    && r.driverName    !== f.driver)    return false;
                if (f.applicant && r.applicantName !== f.applicant) return false;
                if (f.car       && r.plateNo       !== f.car)       return false;

                if (q){
                  const hay = [
                    r.route, r.reason,r.applicantName,
                    r.driverName, r.plateNo, r.status
                  ].map(x => (x||"").toString().toLowerCase()).join(" ");
                  if (!hay.includes(q)) return false;
                }
                return true;
              });
            });

            // 顯示文字/樣式
             const statusText = (s) => {
               const k = String(s || "").trim();
               if (k === "完成審核" || k.toLowerCase() === "approved") return "完成審核";
               if (k === "駁回" || k.toLowerCase() === "reject") return "駁回";
               return "待審核";
             };

             // 顯示樣式
             const statusClass = (s) => {
               const k = String(s || "").trim();
               if (k === "完成審核" || k.toLowerCase() === "approved") return "s-approved";
               if (k === "駁回" || k.toLowerCase() === "reject") return "s-reject";
               return "s-wait"; // 待審核
             };


            // 依日期重新查詢後端
            const reloadByDate = () => loadData();

            // 重置到「當月一號～最後一號」，並清空其它條件
            const resetFilters = () => {
              const {start,end} = getMonthRange();
              filters.value.dateStart = start;
              filters.value.dateEnd   = end;
              filters.value.driver    = "";
              filters.value.applicant = "";
              filters.value.car       = "";
              filters.value.q         = "";
              // 重新打 API（當月資料）
              loadData();
            };

            // 匯出目前 filtered
            const exportCSV = () => {
              const head = '用車日期,用車時間,目的地,事由,申請人,人數,行駛里程,審核狀態,駕駛人,車輛\n';
              const body = filtered.value.map(r => ([
                r.useDate, r.useTime,
                `"${(r.route||"").replace(/"/g,'""')}"`,
                `"${(r.reason||"").replace(/"/g,'""')}"`,
                r.applicantName || "",
                r.passengerCount ?? "",
                r.tripDistance ?? "",
                statusText(r.status),
                r.driverName || '未指派',
                r.plateNo || '未指派'
              ].join(','))).join('\n');

              const blob = new Blob([head+body], {type:'text/csv;charset=utf-8;'});
              const url = URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url; a.download = '派車單.csv';
              document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
            };

            

        // R: 檢視
                   const viewing = Vue.ref(null);
        const viewRow = async (r) => {
        try {
        const res = await axios.get(`/api/carApplications/${r.applyId}`);
        viewing.value = res.data; // { app, passengers }
        } catch (err) {
        alert('讀取失敗');
        }
        };
        const closeView = () => { viewing.value = null; };



        // U: 編輯
        const editing = ref(null);   // 正在編輯的 row
          const newStatus = ref("");
                 const editRow = (r) => {
          editing.value = r;
          newStatus.value = r.status || "待審核";
        };

                const confirmEdit = async () => {
          if (!editing.value) return;
          try {
            await axios.patch(`/api/carApplications/${editing.value.applyId}/status`, {
              status: newStatus.value
            });
            alert("狀態已更新為：" + newStatus.value);
            editing.value = null;
            await loadData(); // 重新載入列表
          } catch (err) {
            console.error(err);
            alert("更新失敗");
          }
        };



        // 取消編輯
        const cancelEdit = () => {
          editing.value = null;
        };


        // D: 刪除
                const removeRow = async (r) => {
        if (!confirm(`確定刪除申請單 #${r.applyId}？`)) return;
        try {
        await axios.delete(`/api/carApplications/${r.applyId}`);
        // 前端移除，或重新載入
        rows.value = rows.value.filter(x => x.applyId !== r.applyId);
        alert('刪除成功');
        } catch (err) {
        alert('刪除失敗');
        }
        };


            return {
              rows, loading, error,
              filters, drivers, applicants, cars,
              filtered, statusText, statusClass,
              reloadByDate, resetFilters, exportCSV,
              viewRow, closeView,viewing,editRow, confirmEdit, cancelEdit,removeRow,
              editing, newStatus
            };
          }
        }).mount('#app');
    </script>
</body>
</html>
