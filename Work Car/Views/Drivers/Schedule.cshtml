@{
    
    ViewData["Title"] = "執勤排班";
}

<link rel="stylesheet" href="/css/Driver/Schedule.css" />
<script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<div id="app" class="wrap" v-cloak>
    <div class="topbar">
        <h1>駕駛員管理 ＞ 輪值排班</h1>

    </div>

    <div class="grid">
        <!-- 左：主月曆 -->
        <section class="card">
            <div class="card-hd" style="gap:10px; align-items:center;">
                <button class="btn" @@click="prev">＜</button>
                <div>民國 {{ rocYear }} 年 {{ month }} 月</div>
                <button class="btn" @@click="next">＞</button>

                <!-- 每月 / 每週 分段切換 -->
                <div class="seg" style="margin-left:12px;">
                    <button class="seg-btn" :class="{active: viewMode==='month'}" @@click="viewMode='month'">每月</button>
                    <button class="seg-btn" :class="{active: viewMode==='week'}" @@click="viewMode='week'">每週</button>
                </div>
                <div class="toolbar" style="margin-left:auto; display:flex; gap:6px;">
                    <button class="btn btn-warning" @@click="openAgentModal">代理人</button>
                    <button class="btn btn-primary" @@click="exportCSV">匯出班表</button>
                </div>
            </div>
            <!-- 代理人 Modal -->
            <div v-if="agentModalOpen" class="modal-mask">
                <div class="modal-container" style="max-width:900px;width:90%;">
                    <h3 class="modal-title">代理人員清單</h3>

                    <table class="agent-table" style="width:100%;border-collapse:collapse;">
                        <thead>
                            <tr>
                                <th>姓名</th>
                                <th>身分證</th>
                                <th>生日</th>
                                <th>聯絡地址</th>
                                <th>手機</th>
                                <th>緊急聯絡人</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="a in agents" :key="a.id">
                                <td>{{ a.name }}</td>
                                <td>{{ a.nationalId }}</td>
                                <td>{{ a.birthRoc }}</td>
                                <td>{{ a.contact }}</td>
                                <td>{{ a.mobile }}</td>
                                <td>{{ a.emergency }}</td>
                            </tr>
                            <tr v-if="!agents.length">
                                <td colspan="8" style="text-align:center;color:#999;padding:8px">目前沒有資料</td>
                            </tr>
                        </tbody>
                    </table>

                    <div class="modal-actions" style="margin-top:12px;text-align:right">
                        <button class="btn btn-primary" @@click="agentModalOpen=false">關閉</button>
                    </div>
                </div>
            </div>

            <div class="card-bd" v-if="viewMode==='month'">
                <!-- 月曆：星期標題 -->
                <div class="month-head">
                    <div v-for="w in ['週日','週一','週二','週三','週四','週五','週六']" :key="w">{{ w }}</div>
                </div>
                <!-- 6 週 x 7 天 -->
                <div class="month-grid">
                    <div v-for="(cell,idx) in monthGrid" :key="idx" class="day">
                        <div class="day-hd" :class="{today: cell.isToday}">
                            <span>{{ cell.d || '' }}</span>
                        </div>

                        <!-- 平日才顯示排班 pill（週一=1 ... 週五=5）-->
                        <template v-if="cell.isWeekday">
                            <div class="pill pill-dark">早・午：{{ getDriverNameByDateShift(cell.jsDate,'AM') }}</div>
                            <div class="pill">午・晚：{{ getDriverNameByDateShift(cell.jsDate,'PM') }}</div>
                            <div class="help">● 長差第一順位：{{ getDriverNameByDateShift(cell.jsDate,'G3') }}</div>
                        </template>

                    </div>
                </div>
            </div>

            <!-- 週檢視：只排 Mon–Fri -->
            <div class="card-bd" v-else>
                <table class="table">
                    <thead>
                        <tr>
                            <th style="width:80px">時段</th>
                            <th v-for="(d,i) in weekDays" :key="i">
                                {{ d.label }}<div class="help mono">{{ d.date }}</div>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- 早午 -->
                        <tr>
                            <th>早・午</th>
                            <td v-for="(d,i) in weekDays" :key="'am'+i">
                                <div class="pill pill-dark">
                                    早・午：{{ getDriverNameByDateShift(d.jsDate,'AM') }}
                                </div>
                            </td>
                        </tr>
                        <!-- 午晚 -->
                        <tr>
                            <th>午・晚</th>
                            <td v-for="(d,i) in weekDays" :key="'pm'+i">
                                <div class="pill">
                                    午・晚：{{ getDriverNameByDateShift(d.jsDate,'PM') }}
                                </div>
                            </td>
                        </tr>

                        <!-- 一般(1) -->
                        <tr>
                            <th>一般(1)</th>
                            <td v-for="(d,i) in weekDays" :key="'g1'+i">
                                <div class="pill">
                                    值勤：{{ getDriverNameByDateShift(d.jsDate,'G1') }}
                                </div>
                                <div class="help">
                                    ● 長差第一順位：{{ getDriverNameByDateShift(d.jsDate,'G3') }}
                                </div>
                            </td>
                        </tr>

                        <!-- 一般(2) -->
                        <tr>
                            <th>一般(2)</th>
                            <td v-for="(d,i) in weekDays" :key="'g2'+i">
                                <div class="pill">
                                    值勤：{{ getDriverNameByDateShift(d.jsDate,'G2') }}
                                </div>
                                <div class="help">
                                    ● 長差第一順位：{{ getDriverNameByDateShift(d.jsDate,'G3') }}
                                </div>
                            </td>
                        </tr>

                        <!-- 一般(3) -->
                        <tr>
                            <th>一般(3)</th>
                            <td v-for="(d,i) in weekDays" :key="'g3'+i">
                                <div class="pill">
                                    值勤：{{ getDriverNameByDateShift(d.jsDate,'G3') }}
                                </div>
                                <div class="help">
                                    ● 長差第一順位：{{ getDriverNameByDateShift(d.jsDate,'G3') }}
                                </div>
                            </td>
                        </tr>
                    </tbody>

                </table>
            </div>
        </section>

        <!-- 右：小月曆 + 班次安排 -->
        <aside class="stack">
            <div class="card">
                <div class="card-hd">114年 {{ month }} 月</div>
                <div class="card-bd">
                    <div class="mini-cal">
                        <div class="mini-head" v-for="w in ['日','一','二','三','四','五','六']" :key="w">{{ w }}</div>
                        <div v-for="n in firstWeekday-1" :key="'pad'+n"></div>
                        <div v-for="d in daysInMonth" :key="'d'+d" class="mini-cell" :class="{today: isToday(d)}">{{ d }}</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-hd">班次安排</div>
                <div class="card-bd">
                    <select v-model="selectedWeek" class="week-select">
                        <option v-for="(w,idx) in weeksOfMonth" :key="idx" :value="idx">
                            {{ month }} 月 第 {{ idx+1 }} 週
                        </option>
                    </select>

                    <div class="list" style="margin-top:10px">
                        <div class="row"
                             v-for="k in ['A','B','C','D','E']"
                             :key="k"
                             style="display:flex;align-items:center;margin-bottom:6px;">

                            <label style="flex:0 0 24px;font-weight:700;">{{ k }}：</label>

                            <select v-model="assign[k]" style="flex:1; padding:4px;">
                                <option :value="null">（未指定）</option>
                                <option v-for="p in allCandidates" :key="p.id" :value="p.id">
                                    {{ p.name }}（{{ p.role }}）
                                </option>
                            </select>
                        </div>
                    </div>




                    <div style="text-align:right; margin-top:10px;">
                        <button class="btn btn-primary">確定</button>
                    </div>
                </div>
            </div>
        </aside>
    </div>
</div>

<script>
    const { createApp, ref, reactive, computed, onMounted } = Vue;

    createApp({
      setup() {
        const today   = new Date();
        const rocYear = today.getFullYear() - 1911;
        const month   = ref(today.getMonth() + 1);   // 1-12
        const yearAD  = computed(() => rocYear + 1911);
        const drivers = ref([]);   // 駕駛清單
        const schedules = ref([]); // 班表清單
        const agentModalOpen = ref(false);
        const agents = ref([]);
        const assign = reactive({
           A: null,
           B: null,
           C: null,
           D: null,
           E: null
         });
        const shiftMap = {
           AM: "A",
           PM: "B",
           G1: "C",
           G2: "D",
           G3: "E"
    };

         function initTodayAssign() {
      const todayStr = new Date().toISOString().slice(0,10); // yyyy-MM-dd
      const todaySchedules = schedules.value.filter(s => s.workDate && s.workDate.slice(0,10) === todayStr);

      todaySchedules.forEach(s => {
        const key = shiftMap[s.shift]; // 轉成 A~E
        if (key && assign.hasOwnProperty(key)) {
          assign[key] = s.driverId || null;  // 套 driverId
        }
      });
    }
        const allCandidates = computed(() => {
      // 把駕駛和代理人合併，並加上 role 區分
      return [
        ...(drivers.value || []).map(d => ({ id: d.driverId, name: d.driverName, role: "駕駛" })),
        ...(agents.value  || []).map(a => ({ id: "A-" + a.id, name: a.name, role: "代理人" })) // 加前綴避免 id 撞到
      ];
    });


        // 從 DB 撈代理人
        async function openAgentModal() {
          try {
            const res = await axios.get('/agents/profiles');
            agents.value = res.data;
            agentModalOpen.value = true;
          } catch (err) {
            console.error("讀取代理人失敗:", err);
            alert("無法載入代理人資料");
          }
        }
        //駕駛資料
           async function loadDrivers() {
      try {
        const res = await axios.get('/Drivers/Records'); 
        
        drivers.value = res.data || [];
      } catch (err) {
        console.error("讀取駕駛失敗:", err);
      }
    }
    //班表資料
    async function loadSchedules() {
      try {
        const res = await axios.get('/Drivers/Schedule/Events', { 
          params: { year: yearAD.value, month: month.value }
        });
        schedules.value = res.data || [];
      } catch (err) {
        console.error("讀取班表失敗:", err);
        schedules.value = [];
      }
    }
    //查詢駕駛
            function getDriverNameByDateShift(date, shift) {
      const hit = schedules.value.find(s => {
        const d = new Date(s.workDate);
        return d.getFullYear() === date.getFullYear()
            && d.getMonth()    === date.getMonth()
            && d.getDate()     === date.getDate()
            && s.shift === shift;
      });

      if (!hit) return '—';

      // 如果 API 有回 DriverName
      if (hit.driverName) return hit.driverName;

      // 如果只有 DriverId，就從 drivers 列表對應名字
      const drv = drivers.value.find(p => p.driverId === hit.driverId);
      return drv ? drv.driverName : '—';
    }




        // 工具：依日期+時段找駕駛名字
        function getDriverName(date, shift) {
          const target = schedules.value.find(s => {
            const wd = new Date(s.workDate);
            return wd.getFullYear() === date.getFullYear()
                && wd.getMonth() === date.getMonth()
                && wd.getDate() === date.getDate()
                && s.shift === shift;
          });
          return target ? target.driverName : '—';
        }

        // 右側小月曆
        const daysInMonth   = computed(() => new Date(yearAD.value, month.value, 0).getDate());
        const firstOfMonth  = computed(() => new Date(yearAD.value, month.value - 1, 1));
        const firstWeekday  = computed(() => firstOfMonth.value.getDay() === 0 ? 7 : firstOfMonth.value.getDay());
        const isToday = d => (yearAD.value === today.getFullYear() && month.value === today.getMonth() + 1 && d === today.getDate());

        // 月曆主格
       const monthGrid = computed(() => {
      const arr = [];
      const dim = daysInMonth.value;
      const startDay = firstOfMonth.value.getDay(); // 0=Sun..6=Sat

      // 前面補空格
      for (let i = 0; i < startDay; i++) {
        arr.push({ d:'', isToday:false, isWeekday:false, jsDate:null });
      }

      // 當月日期
      for (let d = 1; d <= dim; d++) {
        const jsDate = new Date(yearAD.value, month.value-1, d);
        const dow = jsDate.getDay();
        arr.push({
          d,
          jsDate,                 
          isToday: isToday(d),
          isWeekday: dow >= 1 && dow <= 5
        });
      }

      // 後面補空格
      while (arr.length < 42) {
        arr.push({ d:'', isToday:false, isWeekday:false, jsDate:null });
      }

      return arr;
    });


        // 週檢視
        const weeksOfMonth = computed(() => {
          const res = [];
          const year = yearAD.value;
          const m = month.value - 1;
          let d = new Date(year, m, 1);
          const dow = (d.getDay() + 6) % 7;
          d.setDate(d.getDate() - dow);

          while (true) {
            const start = new Date(d);
            const end = new Date(d); end.setDate(d.getDate() + 4);
            if (start.getMonth() === m || end.getMonth() === m) {
              res.push([start, end]);
            }
            d.setDate(d.getDate() + 7);
            if (d.getMonth() > m && d.getDate() >= 7) break;
          }
          return res;
        });

        const selectedWeek = ref(0);
        (() => {
          const w = weeksOfMonth.value;
          for (let i = 0; i < w.length; i++) {
            if (today >= w[i][0] && today <= w[i][1]) {
              selectedWeek.value = i; break;
            }
          }
        })();

        const weekDays = computed(() => {
          const w = weeksOfMonth.value[selectedWeek.value];
          if (!w) return [];
          const days = [];
          let d = new Date(w[0]);
          for (let i = 0; i < 5; i++) {
            days.push({
              label: ['週一','週二','週三','週四','週五'][i],
              date: `${d.getMonth() + 1}/${d.getDate()}`,
              jsDate: new Date(d)
            });
            d.setDate(d.getDate() + 1);
          }
          return days;
        });

        // 月/週切換
        const viewMode = ref('month');
        function prev() {
          if (viewMode.value === 'month') {
            month.value = month.value > 1 ? month.value - 1 : 12;
          } else {
            if (selectedWeek.value > 0) {
              selectedWeek.value--;
            } else {
              month.value = month.value > 1 ? month.value - 1 : 12;
              Vue.nextTick(() => {
                selectedWeek.value = weeksOfMonth.value.length - 1;
              });
            }
          }
          loadSchedules();
        }
        function next() {
          if (viewMode.value === 'month') {
            month.value = month.value < 12 ? month.value + 1 : 1;
          } else {
            if (selectedWeek.value < weeksOfMonth.value.length - 1) {
              selectedWeek.value++;
            } else {
              month.value = month.value < 12 ? month.value + 1 : 1;
              Vue.nextTick(() => {
                selectedWeek.value = 0;
              });
            }
          }
          loadSchedules();
        }

        // 匯出 CSV (保持不變)
            const exportCSV = () => {
      // 小工具
      const pad = n => String(n).padStart(2, '0');
      const dowName = i => ['週日','週一','週二','週三','週四','週五','週六'][i];
      const Q = s => `"${String(s ?? '').replaceAll('"','""')}"`;

      // 要輸出的欄位
      const headers = ['日期','星期','早・午','午・晚','一般(1)','一般(2)','一般(3)','長差第一順位'];

      // 依檢視模式決定匯出的日期清單
      let dates = [];
      if (viewMode.value === 'month') {
        const y = yearAD.value;
        const m = month.value;
        const daysInThisMonth = new Date(y, m, 0).getDate();
        for (let d = 1; d <= daysInThisMonth; d++) {
          dates.push(new Date(y, m - 1, d));
        }
      } else {
        const w = weeksOfMonth.value[selectedWeek.value];
        if (!w) {
          alert('目前沒有可匯出的週次');
          return;
        }
        let d = new Date(w[0]); // 週一
        for (let i = 0; i < 5; i++) {
          dates.push(new Date(d));
          d.setDate(d.getDate() + 1);
        }
      }

      // 只輸出平日
      const rows = [];
      for (const dt of dates) {
        const dow = dt.getDay();
        if (dow < 1 || dow > 5) continue; // 只要週一～週五

        rows.push({
          date: `${dt.getFullYear()}-${pad(dt.getMonth()+1)}-${pad(dt.getDate())}`,
          dow: dowName(dow),
          am:   getDriverNameByDateShift(dt,'AM'),
          pm:   getDriverNameByDateShift(dt,'PM'),
          g1:   getDriverNameByDateShift(dt,'G1'),
          g2:   getDriverNameByDateShift(dt,'G2'),
          g3:   getDriverNameByDateShift(dt,'G3'),
          long: getDriverNameByDateShift(dt,'G3') // 長差 = G3
        });
      }

      if (!rows.length) {
        alert('目前沒有可匯出的資料');
        return;
      }

      // 轉 CSV
      const lines = rows.map(r => [
        r.date, r.dow, r.am, r.pm, r.g1, r.g2, r.g3, r.long
      ].map(Q).join(','));

      const bom = '\uFEFF';
      const csv = [headers.join(','), ...lines].join('\r\n');
      const blob = new Blob([bom + csv], { type: 'text/csv;charset=utf-8;' });

      // 檔名
      const fileName = (() => {
        const yRoc = rocYear;
        const mStr = pad(month.value);
        return viewMode.value === 'month'
          ? `排班表_民國${yRoc}年${mStr}月.csv`
          : `排班表_民國${yRoc}年${mStr}月_第${selectedWeek.value+1}週.csv`;
      })();

      if (window.navigator && window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveOrOpenBlob(blob, fileName);
      } else {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }
    };


        onMounted(() => {
          loadDrivers();
          loadSchedules().then(() => {
        initTodayAssign();
        });
    });

           return {
      // === 基本年月與檢視狀態 ===
      rocYear, month,yearAD,viewMode, 
      // === 代理人相關 ===
      agentModalOpen,agents,openAgentModal, 
      // === 駕駛與班表資料 ===
      drivers,schedules,loadSchedules, getDriverNameByDateShift,assign,allCandidates,
      // === 月曆/週曆輔助 ===
      daysInMonth,firstWeekday,isToday,monthGrid, weeksOfMonth,selectedWeek, weekDays,      
      // === 工具方法 ===
      getDriverName, prev, next, exportCSV 
    };

      }
    }).mount('#app');
</script>
