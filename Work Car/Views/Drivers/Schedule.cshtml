@{
    
    ViewData["Title"] = "執勤排班";
}

<link rel="stylesheet" href="/css/Driver/Schedule.css" />
<script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<div id="app" class="wrap" v-cloak>
    <div class="topbar">
        <h1>駕駛員管理 ＞ 輪值排班</h1>

    </div>

    <div class="grid">
        <!-- 左：主月曆 -->
        <section class="card">
            <div class="card-hd" style="gap:10px; align-items:center;">
                <button class="btn" @@click="prev">＜</button>
                <div>民國 {{ rocYear }} 年 {{ month }} 月</div>
                <button class="btn" @@click="next">＞</button>

                <!-- 每月 / 每週 / 每日 分段切換 -->
                <div class="seg" style="margin-left:12px;">
                    <button class="seg-btn" :class="{active: viewMode==='month'}" @@click="viewMode='month'">每月</button>
                    <button class="seg-btn" :class="{active: viewMode==='week'}" @@click="viewMode='week'">每週</button>
                    <button class="seg-btn" :class="{active: viewMode==='day'}" @@click="viewMode='day'">每日</button>
                </div>
                <div class="toolbar" style="margin-left:auto; display:flex; gap:6px;">
                    <button class="btn btn-warning" @@click="openAgentModal">代理人</button>
                    <button class="btn btn-primary" @@click="exportCSV">匯出班表</button>
                </div>
            </div>
            <!-- 代理人 Modal -->
            <div v-if="agentModalOpen" class="modal-mask">
                <div class="modal-container" style="max-width:900px;width:90%;">
                    <h3 class="modal-title">代理人員清單</h3>

                    <table class="agent-table" style="width:100%;border-collapse:collapse;">
                        <thead>
                            <tr>
                                <th>姓名</th>
                                <th>身分證</th>
                                <th>生日</th>
                                <th>聯絡地址</th>
                                <th>手機</th>
                                <th>緊急聯絡人</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="a in agents" :key="a.id">
                                <td>{{ a.name }}</td>
                                <td>{{ a.nationalId }}</td>
                                <td>{{ a.birthRoc }}</td>
                                <td>{{ a.contact }}</td>
                                <td>{{ a.mobile }}</td>
                                <td>{{ a.emergency }}</td>
                            </tr>
                            <tr v-if="!agents.length">
                                <td colspan="8" style="text-align:center;color:#999;padding:8px">目前沒有資料</td>
                            </tr>
                        </tbody>
                    </table>

                    <div class="modal-actions" style="margin-top:12px;text-align:right">
                        <button class="btn btn-primary" @@click="agentModalOpen=false">關閉</button>
                    </div>
                </div>
            </div>

            <div class="card-bd" v-if="viewMode==='month'">
                <!-- 月曆：星期標題 -->
                <div class="month-head">
                    <div v-for="w in ['週日','週一','週二','週三','週四','週五','週六']" :key="w">{{ w }}</div>
                </div>
                <!-- 6 週 x 7 天 -->
                <div class="month-grid">
                    <div v-for="(cell,idx) in monthGrid" :key="idx" class="day">
                        <div class="day-hd" :class="{today: cell.isToday}">
                            <span>{{ cell.d || '' }}</span>
                        </div>

                        <!-- 平日才顯示排班 pill（週一=1 ... 週五=5）-->
                        <template v-if="cell.isWeekday">
                            <div v-for="(txt,i) in linesFor(cell.jsDate)" :key="i"
                                 :class="i===2 ? 'help' : 'pill'">
                                {{ txt.text }}
                            </div>
                        </template>


                    </div>
                </div>
            </div>

            <!-- 週檢視：只排 Mon–Fri -->
            <div class="card-bd" v-else-if="viewMode==='week'">
                <table class="table week-grid">
                    <thead>
                        <tr>
                            <th style="width:80px">時間</th>
                            <th v-for="(d,i) in weekDays" :key="i" :class="{ today: isSameDay(d.jsDate, today) }">
                                {{ d.label }}<div class="help mono">{{ d.date }}</div>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- 08:00（早・午） -->
                        <tr>
                            <th>08:00</th>
                            <td v-for="(d,i) in weekDays" :key="'am'+i">
                                <div class="slot slot-dark">
                                    {{ (linesFor(d.jsDate)[0] || {}).text }}
                                    <span class="mono cnt">{{ getDisp(d.jsDate,'morning').length }}</span>
                                </div>
                                <div v-for="u in getDisp(d.jsDate,'morning')" :key="u.id" class="dotline">
                                    ● {{ hhmm(u.start) }} {{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>

                        <!-- 11:30~13:00（同步顯示 早・午 / 午・晚 標籤 + 午休派工） -->
                        <tr>
                            <th>11:30~13:00</th>
                            <td v-for="(d,i) in weekDays" :key="'noon'+i">
                                <div class="slot">
                                    {{ (linesFor(d.jsDate)[0] || {}).text }}
                                    <span class="mono cnt">{{ getDisp(d.jsDate,'noon').length }}</span>
                                </div>
                                <div class="slot">
                                    {{ (linesFor(d.jsDate)[1] || {}).text }}
                                </div>
                                <div v-for="u in getDisp(d.jsDate,'noon')" :key="u.id" class="dotline">
                                    ● {{ hhmm(u.start) }} {{ u.driverName || '—' }}
                                </div>
                                <div v-for="u in getDisp(d.jsDate,'afternoon')" :key="u.id" class="dotline">
                                    ● {{ hhmm(u.start) }} {{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>

                        <!-- 17:00（午・晚）＋ 下午派工（13:00–16:59）＋ 長差順位；>=17:00 不顯示 -->
                        <tr>
                            <th>17:00~</th>
                            <td v-for="(d,i) in weekDays" :key="'pm'+i">
                                
                                <div class="slot slot-dark">
                                    {{ (linesFor(d.jsDate)[1] || {}).text }}
                                    <span class="mono cnt">{{ getDisp(d.jsDate,'afternoon').length }}</span>
                                </div>
                                
                                
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <!-- 每日檢視 -->
            <div class="card-bd day-view" v-else-if="viewMode==='day'">
                <table class="table">
                    <thead>
                        <tr>
                            <th style="width:80px">時段</th>
                            <th class="today">
                                {{ today.getMonth()+1 }}/{{ today.getDate() }}
                                <span class="help mono">{{ ['日','一','二','三','四','五','六'][today.getDay()] }}</span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th>早・午</th>
                            <td>
                                <div class="pill pill-dark">
                                    A：{{ getDriverNameByDateShift(today,'AM') }}
                                </div>
                                <div v-for="u in dayDispatches.filter(x => x.shift==='AM')" :key="u.id" class="help">
                                    🚗 {{ hhmm(u.start) }}{{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>

                        <tr>
                            <th>午・晚</th>
                            <td>
                                <div class="pill">
                                    B：{{ getDriverNameByDateShift(today,'PM') }}
                                </div>
                                <div v-for="u in dayDispatches.filter(x => x.shift==='PM')" :key="u.id" class="help">
                                    🚗 {{ hhmm(u.start) }}{{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>

                        <tr>
                            <th>一般(1)</th>
                            <td>
                                <div class="pill">C：{{ getDriverNameByDateShift(today,'G1') }}</div>
                                <div v-for="u in dayDispatches.filter(x => x.shift==='G1')" :key="u.id" class="help">
                                    🚗 {{ hhmm(u.start) }}{{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>

                        <tr>
                            <th>一般(2)</th>
                            <td>
                                <div class="pill">D：{{ getDriverNameByDateShift(today,'G2') }}</div>
                                <div v-for="u in dayDispatches.filter(x => x.shift==='G2')" :key="u.id" class="help">
                                    🚗 {{ hhmm(u.start) }}{{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>

                        <tr>
                            <th>一般(3)</th>
                            <td>
                                <div class="pill">E：{{ getDriverNameByDateShift(today,'G3') }}</div>
                                <div v-for="u in dayDispatches.filter(x => x.shift==='G3')" :key="u.id" class="help">
                                    🚗 {{ hhmm(u.start) }}{{ u.driverName || '—' }}
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

        </section>



        <!-- 右：小月曆 + 班次安排 -->
        <aside class="stack">
            <div class="card">
                <div class="card-hd">114年 {{ month }} 月</div>
                <div class="card-bd">
                    <div class="mini-cal">
                        <div class="mini-head" v-for="w in ['日','一','二','三','四','五','六']" :key="w">{{ w }}</div>
                        <div v-for="n in firstWeekday-1" :key="'pad'+n"></div>
                        <div v-for="d in daysInMonth" :key="'d'+d" class="mini-cell" :class="{today: isToday(d)}">{{ d }}</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-hd">班次安排</div>
                <div class="card-bd">
                    <select v-model="selectedOption" class="week-select">
                        <option v-for="opt in optionList" :key="opt.value" :value="opt.value">
                            {{ opt.label }}
                        </option>
                    </select>

                    <div class="list" style="margin-top:10px">
                        <div class="row"
                             v-for="k in ['A','B','C','D','E']"
                             :key="k"
                             style="display:flex;align-items:center;margin-bottom:6px;">

                            <label style="flex:0 0 24px;font-weight:700;">{{ k }}：</label>

                            <select v-model="assign[k]" style="flex:1; padding:4px;">
                                <option :value="null">（未指定）</option>
                                <option v-for="p in allCandidates" :key="p.id" :value="p.id">
                                    {{ p.name }}（{{ p.role }}）
                                </option>
                            </select>
                        </div>
                    </div>




                    <div style="text-align:right; margin-top:10px;">
                        <button class="btn btn-primary"
                                :disabled="isConfirmDisabled"
                                :title="isConfirmDisabled ? '請切換到「日」視圖再確認' : '確認送出'"
                                @@click="applyAssignments">
                            確認
                        </button>
                    </div>
                </div>
            </div>
        </aside>
    </div>
</div>

<script>
    const { createApp, ref, reactive, computed, onMounted, watch, nextTick } = Vue;

    createApp({
      setup() {
        const today   = new Date();
        const rocYear = today.getFullYear() - 1911;
        const month   = ref(today.getMonth() + 1);   // 1-12
        const yearAD  = computed(() => rocYear + 1911);
        const drivers = ref([]);   // 駕駛清單
        const schedules = ref([]); // 班表清單
        const agentModalOpen = ref(false);
        const agents = ref([]);
        const viewMode = ref('month');
        const selectedOption = ref(null);
        const dayDispatches = ref([]); //日派工用車資料
        const weekDispatches = ref({}); //週派工用車資料
        const isConfirmDisabled = computed(() => ['week','month'].includes(viewMode.value));
        const startOfDay = d => new Date(d.getFullYear(), d.getMonth(), d.getDate());
        const endOfDay = d => new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59, 999);
        // 固定代號 → 姓名
        const NAME_OF = { A: '邱OO', B: '黃OO', C: '王OO', D: '吳OO', E: '林OO' };
       // 長差第一順位對應
        const LONG_TRIP_ORDER = {
          1: 'E - 林OO',   // 週一
          2: 'B - 黃OO',   // 週二
          3: 'D - 吳OO',   // 週三
          4: 'A - 邱OO',   // 週四
          5: 'C - 王OO'    // 週五
        };

          function linesFor(dateStr) {
      const d = new Date(dateStr);
      const wd = d.getDay(); // 0=Sun,1=Mon,...,6=Sat

      switch (wd) {
        case 1: // 週一
          return [
            { type:'am', text:`A - ${NAME_OF.A}（早、午）` },
            { type:'pm', text:`B - ${NAME_OF.B}（午、晚）` },
            { type:'long', text:`長差第一順位：${LONG_TRIP_ORDER[1]}` }
          ];
        case 2: // 週二
          return [
            { type:'am', text:`C - ${NAME_OF.C}（早、午）` },
            { type:'pm', text:`D - ${NAME_OF.D}（午、晚）` },
            { type:'long', text:`長差第一順位：${LONG_TRIP_ORDER[2]}` }
          ];
        case 3: // 週三
          return [
            { type:'am', text:`E - ${NAME_OF.E}（早、午）` },
            { type:'pm', text:`A - ${NAME_OF.A}（午、晚）` },
            { type:'long', text:`長差第一順位：${LONG_TRIP_ORDER[3]}` }
          ];
        case 4: // 週四
          return [
            { type:'am', text:`B - ${NAME_OF.B}（早、午）` },
            { type:'pm', text:`C - ${NAME_OF.C}（午、晚）` },
            { type:'long', text:`長差第一順位：${LONG_TRIP_ORDER[4]}` }
          ];
        case 5: // 週五
          return [
            { type:'am', text:`D - ${NAME_OF.D}（早、午）` },
            { type:'pm', text:`E - ${NAME_OF.E}（午、晚）` },
            { type:'long', text:`長差第一順位：${LONG_TRIP_ORDER[5]}` }
          ];
        default: // 六日
          return [];
      }
    }
                 // 週檢視
       const weeksOfMonth = computed(() => {
          const res = [];
          const year = yearAD.value;
          const m = month.value - 1;
          let d = new Date(year, m, 1);
          const dow = (d.getDay() + 6) % 7; // 以週一為起點
          d.setDate(d.getDate() - dow);

          while (true) {
            const start = startOfDay(d);
            const fri = new Date(start); fri.setDate(fri.getDate() + 4);
            const end = endOfDay(fri); // 週五的 23:59:59.999

            if (start.getMonth() === m || end.getMonth() === m) {
              res.push([start, end]);
            }
            d.setDate(d.getDate() + 7);
            if (d.getMonth() > m && d.getDate() >= 7) break;
          }
          return res;
        });
        // 班次對應
        const assign = reactive({
              A: { driverId: 1, shifts: [] },
              B: { driverId: 2, shifts: [] },
              C: { driverId: 3, shifts: [] },
              D: { driverId: 4, shifts: [] },
              E: { driverId: 5, shifts: [] }
         });

        const shiftMap = {
           AM: "A",
           PM: "B",
           G1: "C",
           G2: "D",
           G3: "E"
    };



         function initTodayAssign() {
      const todayStr = new Date().toISOString().slice(0,10); // yyyy-MM-dd
      const todaySchedules = schedules.value.filter(s => s.workDate && s.workDate.slice(0,10) === todayStr);

      todaySchedules.forEach(s => {
        const key = shiftMap[s.shift]; // 轉成 A~E
        if (key && assign.hasOwnProperty(key)) {
          assign[key] = s.driverId || null;  // 套 driverId
        }
      });
    }
        // 月/週/日 切換用的上一個 / 下一個
           function prev() {
      if (viewMode.value === 'month') {
        month.value = month.value > 1 ? month.value - 1 : 12;
        loadSchedules();
      } else if (viewMode.value === 'week') {
        const cur = Number(weekIndex.value);
        if (cur > 0) {
          selectedOption.value = cur - 1;
        } else {
          month.value = month.value > 1 ? month.value - 1 : 12;
          loadSchedules();
          nextTick(() => { selectedOption.value = weeksOfMonth.value.length - 1; });
        }
      } else if (viewMode.value === 'day') {
        // 往前一天，並處理跨月同步
        today.setDate(today.getDate() - 1);
        month.value = today.getMonth() + 1;
        selectedOption.value = today.getDate();
        loadSchedules();
      }
    }

    function next() {
      if (viewMode.value === 'month') {
        month.value = month.value < 12 ? month.value + 1 : 1;
        loadSchedules();
      } else if (viewMode.value === 'week') {
        const cur = Number(weekIndex.value);
        const last = weeksOfMonth.value.length - 1;
        if (cur < last) {
          selectedOption.value = cur + 1;
        } else {
          month.value = month.value < 12 ? month.value + 1 : 1;
          loadSchedules();
          nextTick(() => { selectedOption.value = 0; });
        }
      } else if (viewMode.value === 'day') {
        today.setDate(today.getDate() + 1);
        month.value = today.getMonth() + 1;
        selectedOption.value = today.getDate();
        loadSchedules();
      }
    }
        // 僅平日
    const isWeekdayDate = (d) => {
      const dow = d.getDay();
      return dow >= 1 && dow <= 5;
    };

    // 依當前檢視 & 下拉選擇，算出要套用的日期清單
    function buildTargetDates() {
      const y = yearAD.value;

      if (viewMode.value === 'month') {
        const m = Number(selectedOption.value || month.value);
        const dim = new Date(y, m, 0).getDate();
        const dates = [];
        for (let d = 1; d <= dim; d++) {
          const dt = new Date(y, m - 1, d);
          if (isWeekdayDate(dt)) dates.push(dt);
        }
        return dates;
      }

      if (viewMode.value === 'week') {
        const idx = Number(selectedOption.value ?? 0);
        const w = weeksOfMonth.value[idx];
        if (!w) return [];
        const dates = [];
        let d = new Date(w[0]); // 週一
        for (let i = 0; i < 5; i++) {
          dates.push(new Date(d));
          d.setDate(d.getDate() + 1);
        }
        return dates;
      }

      // day
      const dd = Number(selectedOption.value || today.getDate());
      const dt = new Date(y, month.value - 1, dd);
      return isWeekdayDate(dt) ? [dt] : []; // 假日就不送
    }

    // 將 A~E 轉成後端要的 AM/PM/G1/G2/G3
        const toDriverId = (v) => {
      if (v == null) return null;
      const n = Number(v);
      return Number.isFinite(n) ? n : null;
    };
        // 日期轉 yyyy-MM-dd
        function toYMD(d){
      const pad = n => String(n).padStart(2,'0');
      return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`;
    }
                const hhmm = (dt) => {
      const x = new Date(dt);
      const h = String(x.getHours()).padStart(2,'0');
      const m = String(x.getMinutes()).padStart(2,'0');
      return `${h}:${m}`;
    };
    const minuteOfDay = (dt) => {
      const x = new Date(dt);
      return x.getHours()*60 + x.getMinutes();
    };

    async function applyAssignments() {
      const dates = buildTargetDates();
      if (!dates.length) {
        alert('沒有可套用的日期（可能是週末/假日）');
        return;
      }

      const payload = { 
        dates: dates.map(d => toYMD(d)),
        assign: {
            A: toDriverId(assign.A),
            B: toDriverId(assign.B),
            C: toDriverId(assign.C),
            D: toDriverId(assign.D),
            E: toDriverId(assign.E),
        }
      };
    console.log('[BulkSet] viewMode =', viewMode.value);
    console.log('[BulkSet] selectedOption =', selectedOption?.value ?? selectedOption);
    console.log('[BulkSet] month =', month.value, 'yearAD =', yearAD.value);
    console.log('[BulkSet] dates =', payload.dates);           // 會列出要套用到哪些日期
    console.log('[BulkSet] assign(A..E raw) =', JSON.parse(JSON.stringify(assign)));
    console.log('[BulkSet] payload =', payload);

     try {
      const res = await axios.post('/Drivers/Schedule/BulkSet', payload);
      console.log('[BulkSet] success, changes =', res.data);

      if (res.data && res.data.length > 0) {
        const msg = res.data.map(c =>
          `${c.date} [${c.shift}] ${c.oldDriver ?? '—'} → ${c.newDriver ?? '—'}`
        ).join('\n');

        alert("已修改班表：\n" + msg);
      } else {
        alert("沒有任何變更");
      }

      await loadSchedules();
    } catch (err) {
      const status = err?.response?.status;
      const data   = err?.response?.data;
      console.error('[BulkSet] failed:', status, data, err);
      alert(`批次套用失敗：${status ?? ''} ${data ?? ''}`);
    }


};
        // 找出某一天屬於本月的第幾週（以週一~週五為一週，weeksOfMonth 已經這樣切）
    const findWeekIndexOf = (d) => {
      const t0 = new Date(d.getFullYear(), d.getMonth(), d.getDate()).getTime();
      const w = weeksOfMonth.value;
      for (let i = 0; i < w.length; i++) {
        if (t0 >= w[i][0].getTime() && t0 <= w[i][1].getTime()) return i;
      }
      return 0;
    };

        // 下拉選項
    const optionList = computed(() => {
      if (viewMode.value === 'month') {
        return Array.from({ length: 12 }, (_, i) => ({
          value: i + 1,
          label: ` ${i + 1} 月`
        }));
      }
      if (viewMode.value === 'week') {
        return weeksOfMonth.value.map((_, idx) => ({
          value: idx,
          label: ` ${month.value} 月 第 ${idx + 1} 週`
        }));
      }
      if (viewMode.value === 'day') {
        return Array.from({ length: daysInMonth.value }, (_, i) => ({
          value: i + 1,
          label: ` ${month.value} / ${i + 1} `
        }));
      }
      return [];
    });

        // 目前週的 index（只有在週檢視時才會用到）
    const weekIndex = computed(() => {
      if (viewMode.value !== 'week') return -1;
      const n = Number(selectedOption.value);
      return Number.isInteger(n) ? n : findWeekIndexOf(today);
    });

    // 週檢視要畫的五天（Mon–Fri）
    const weekDays = computed(() => {
      const w = weeksOfMonth.value[weekIndex.value];
      if (!w) return [];
      const days = [];
      let d = new Date(w[0]);             // 週一
      for (let i = 0; i < 5; i++) {
        days.push({
          label: ['週一','週二','週三','週四','週五'][i],
          date: `${d.getMonth() + 1}/${d.getDate()}`,
          jsDate: new Date(d)
        });
        d.setDate(d.getDate() + 1);
      }
      return days;
    });

           const allCandidates = computed(() => {
      return [
        ...(drivers.value || []).map(d => ({ id: d.driverId, name: d.driverName, role: "駕駛" })),
        ...(agents.value  || []).map(a => ({ id: a.driverId, name: a.name, role: "代理人" }))
      ];
    });



        // 從 DB 撈代理人
        async function openAgentModal() {
          try {
            const res = await axios.get('/agents/profiles');
            agents.value = res.data;
            agentModalOpen.value = true;
          } catch (err) {
            console.error("讀取代理人失敗:", err);
            alert("無法載入代理人資料");
          }
        }
        //駕駛資料
           async function loadDrivers() {
      try {
        const res = await axios.get('/Drivers/Records'); 
        
        drivers.value = res.data || [];
      } catch (err) {
        console.error("讀取駕駛失敗:", err);
      }
    }
    //代理人資料
        async function loadAgents() {
      const res = await axios.get('/Agents/profiles');
      agents.value = res.data || [];
    }


        // 防呆的日期相等判斷
        const isSameDay = (a, b) => {
      const da = new Date(a);
      const db = new Date(b);
      return (
        da.getFullYear() === db.getFullYear() &&
        da.getMonth() === db.getMonth() &&
        da.getDate() === db.getDate()
      );
    };
    

    // 根據今天自動選到正確週次
    function setTodayWeek() {
      const today0 = new Date(today.getFullYear(), today.getMonth(), today.getDate()).getTime();
      const w = weeksOfMonth.value;
      for (let i = 0; i < w.length; i++) {
        if (today0 >= w[i][0].getTime() && today0 <= w[i][1].getTime()) {
          selectedOption.value = i;   // 每週模式時使用
          return;
        }
      }
    }


  

    //班表資料
    async function loadSchedules() {
      try {
        const res = await axios.get('/Drivers/Schedule/Events', { 
          params: { year: yearAD.value, month: month.value }
        });
        schedules.value = res.data || [];
      } catch (err) {
        console.error("讀取班表失敗:", err);
        schedules.value = [];
      }
    }
    //查詢駕駛
            function getDriverNameByDateShift(date, shift) {
      const hit = schedules.value.find(s => {
        const d = new Date(s.workDate);
        return d.getFullYear() === date.getFullYear()
            && d.getMonth()    === date.getMonth()
            && d.getDate()     === date.getDate()
            && s.shift === shift;
      });

      if (!hit) return '—';

      // 如果 API 有回 DriverName
      if (hit.driverName) return hit.driverName;

      // 如果只有 DriverId，就從 drivers 列表對應名字
      const drv = drivers.value.find(p => p.driverId === hit.driverId);
      return drv ? drv.driverName : '—';
    }

        // 讀某一天的已核准用車清單
       async function loadDayDispatches() {
      try {
        const res = await axios.get('/Drivers/Schedule/DayDispatches', {
          params: { date: today.toISOString().slice(0,10) }
        });
        dayDispatches.value = res.data;
      } catch (err) {
        console.error("讀取當日派車失敗:", err);
      }
    }

        // 依日期與區段取當天的派工清單
    function getDisp(jsDate, bucket){
      const key = toYMD(jsDate);
      const list = weekDispatches.value[key] || [];
      switch(bucket){
        case 'morning':   // < 11:30
          return list.filter(u => minuteOfDay(u.start) < 690);
        case 'noon':      // 11:30 ~ 12:59
          return list.filter(u => {
            const m = minuteOfDay(u.start);
            return m >= 690 && m < 780;
          });
        case 'afternoon': // 13:00 ~ 16:59
          return list.filter(u => {
            const m = minuteOfDay(u.start);
            return m >= 780 && m < 1020;
          });
        case 'evening':   // >= 17:00
          return list.filter(u => minuteOfDay(u.start) >= 1020);
        default:
          return list;
      }
    }

    // 讀取目前週一到週五的派工
    async function loadWeekDispatches(){
      const days = weekDays.value || [];
      if (!days.length) return;

      const reqs = days.map(d => {
        const date = toYMD(d.jsDate);
        return axios.get('/Drivers/Schedule/DayDispatches', { params: { date } })
          .then(r => ({ date, rows: r.data || [] }))
          .catch(() => ({ date, rows: [] }));
      });

      const all = await Promise.all(reqs);
      const map = {};
      for (const it of all) map[it.date] = it.rows;
      weekDispatches.value = map;
    }

    // 週天數變動或切到「每週」就撈資料
    watch(weekDays, () => {
      if (viewMode.value === 'week') loadWeekDispatches();
    }, { immediate: true });

    watch(viewMode, (m) => {
      if (m === 'week') loadWeekDispatches();
    });



        // 工具：依日期+時段找駕駛名字
        function getDriverName(date, shift) {
          const target = schedules.value.find(s => {
            const wd = new Date(s.workDate);
            return wd.getFullYear() === date.getFullYear()
                && wd.getMonth() === date.getMonth()
                && wd.getDate() === date.getDate()
                && s.shift === shift;
          });
          return target ? target.driverName : '—';
        }

        // 右側小月曆
        const daysInMonth   = computed(() => new Date(yearAD.value, month.value, 0).getDate());
        const firstOfMonth  = computed(() => new Date(yearAD.value, month.value - 1, 1));
        const firstWeekday  = computed(() => firstOfMonth.value.getDay() === 0 ? 7 : firstOfMonth.value.getDay());
        const isToday = d => (yearAD.value === today.getFullYear() && month.value === today.getMonth() + 1 && d === today.getDate());

        // 月曆主格
       const monthGrid = computed(() => {
      const arr = [];
      const dim = daysInMonth.value;
      const startDay = firstOfMonth.value.getDay(); // 0=Sun..6=Sat

      // 前面補空格
      for (let i = 0; i < startDay; i++) {
        arr.push({ d:'', isToday:false, isWeekday:false, jsDate:null });
      }

      // 當月日期
      for (let d = 1; d <= dim; d++) {
        const jsDate = new Date(yearAD.value, month.value-1, d);
        const dow = jsDate.getDay();
        arr.push({
          d,
          jsDate,                 
          isToday: isSameDay(jsDate, today),
          isWeekday: dow >= 1 && dow <= 5
        });
      }

      // 後面補空格
      while (arr.length < 42) {
        arr.push({ d:'', isToday:false, isWeekday:false, jsDate:null });
      }

      return arr;
    });

        
       

        // 匯出 CSV (保持不變)
    const exportCSV = () => {
      const pad = n => String(n).padStart(2, '0');
      const dowName = i => ['週日','週一','週二','週三','週四','週五','週六'][i];
      const Q = s => `"${String(s ?? '').replaceAll('"','""')}"`;
      const headers = ['日期','星期','早・午','午・晚','一般(1)','一般(2)','一般(3)','長差第一順位'];

      // 根據檢視模式組日期清單
      const dates = [];
      if (viewMode.value === 'month') {
        const y = yearAD.value, m = month.value;
        const dim = new Date(y, m, 0).getDate();
        for (let d = 1; d <= dim; d++) dates.push(new Date(y, m - 1, d));
      } else if (viewMode.value === 'week') {
        const w = weeksOfMonth.value[weekIndex.value];
        if (!w) { alert('目前沒有可匯出的週次'); return; }
        let d = new Date(w[0]);
        for (let i = 0; i < 5; i++) { dates.push(new Date(d)); d.setDate(d.getDate() + 1); }
      } else if (viewMode.value === 'day') {
        dates.push(new Date(yearAD.value, month.value - 1, Number(selectedOption.value)));
      }

      // 只輸出平日
      const rows = [];
      for (const dt of dates) {
        const dow = dt.getDay();
        if (dow < 1 || dow > 5) continue;
        rows.push({
          date: `${dt.getFullYear()}-${pad(dt.getMonth()+1)}-${pad(dt.getDate())}`,
          dow: dowName(dow),
          am:   getDriverNameByDateShift(dt,'AM'),
          pm:   getDriverNameByDateShift(dt,'PM'),
          g1:   getDriverNameByDateShift(dt,'G1'),
          g2:   getDriverNameByDateShift(dt,'G2'),
          g3:   getDriverNameByDateShift(dt,'G3'),
          long: getDriverNameByDateShift(dt,'G3'),
        });
      }
      if (!rows.length) { alert('目前沒有可匯出的資料'); return; }

      const lines = rows.map(r => [r.date,r.dow,r.am,r.pm,r.g1,r.g2,r.g3,r.long].map(Q).join(','));
      const bom = '\uFEFF';
      const csv = [headers.join(','), ...lines].join('\r\n');
      const blob = new Blob([bom + csv], { type: 'text/csv;charset=utf-8;' });

      const fileName = (() => {
        const yRoc = rocYear;
        const mStr = pad(month.value);
        if (viewMode.value === 'month') return `排班表_民國${yRoc}年${mStr}月.csv`;
        if (viewMode.value === 'week')  return `排班表_民國${yRoc}年${mStr}月_第${Number(weekIndex.value)+1}週.csv`;
        return `排班表_民國${yRoc}年${mStr}月_${selectedOption.value}日.csv`;
      })();

      if (window.navigator && window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveOrOpenBlob(blob, fileName);
      } else {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url; a.download = fileName;
        document.body.appendChild(a); a.click();
        document.body.removeChild(a); URL.revokeObjectURL(url);
      }
    };
            function syncSelection() {
      if (viewMode.value === 'month') {
        selectedOption.value = month.value;          // 當月
      } else if (viewMode.value === 'week') {
        selectedOption.value = findWeekIndexOf(today); // 今天所在週
      } else if (viewMode.value === 'day') {
        selectedOption.value = today.getDate();      // 今天
      }
    }


      onMounted(async () => {
        await loadDrivers();
        await loadAgents();
        await loadSchedules();
        await loadDayDispatches();

        initTodayAssign();

        await nextTick();
        syncSelection();

         if (viewMode.value === 'month') {
          selectedOption.value = month.value;
        } else if (viewMode.value === 'week') {
          const todayTime = today.getTime();
          const idx = weeksOfMonth.value.findIndex(([s, e]) =>
            todayTime >= s.getTime() && todayTime <= e.getTime()
          );
          selectedOption.value = idx !== -1 ? idx : 0;
        } else if (viewMode.value === 'day') {
          selectedOption.value = today.getDate();
        }
         
        });
            // 切換檢視 → 重新帶入正確的預設
    watch(viewMode, () => {
      syncSelection();
    });

    // 換月/重算週/當月天數變動 → 重新帶入
    watch([month, weeksOfMonth, daysInMonth], () => {
      syncSelection();
    });
         watch(selectedOption, (val) => {
      if (viewMode.value === 'month') {
        const m = Number(val);
        if (m >= 1 && m <= 12) {
          month.value = m;
          loadSchedules();
        }
      } else if (viewMode.value === 'week') {
        // 週直接用選到的 index，weekDays 會自動重算
        // 不需額外處理
      } else if (viewMode.value === 'day') {
        // 不要重新指派 today（它是 const），請用 setFullYear 變更
        today.setFullYear(yearAD.value, month.value - 1, Number(val));
        loadSchedules();
      }
    });

        watch(assign, (newVal, oldVal) => {
      // 取出所有已選的駕駛（排除 null 與代理人）
      const chosenDrivers = Object.values(newVal).filter(id => {
        if (id == null) return false;
        return typeof id === "number";
      });

      // 檢查是否有重複的駕駛
      const seen = new Set();
      for (const key of ["A","B","C","D","E"]) {
        const id = newVal[key];
        if (id == null) continue;
        if (typeof id !== "number") continue; // 代理人不檢查

        if (seen.has(id)) {
          // 重複了 → 自動改成一個未被使用的駕駛
          const available = drivers.value
            .map(d => d.driverId)
            .filter(did => !chosenDrivers.includes(did)); // 找沒被選過的

          if (available.length > 0) {
            assign[key] = available[0];  // 塞第一個可用的
          } else {
            assign[key] = null; // 沒人可用就清空
          }
        } else {
          seen.add(id);
        }
      }
    }, { deep: true });




    return {
      // === 基本年月與檢視狀態 ===
      today, rocYear, month,yearAD,selectedOption,optionList, weeksOfMonth,weekIndex,isSameDay, setTodayWeek,viewMode,toYMD,
      // === 代理人相關 ===
      agentModalOpen,agents,openAgentModal, 
      // === 駕駛與班表資料 ===
       drivers,schedules,loadSchedules, getDriverNameByDateShift,assign,allCandidates,isConfirmDisabled,dayDispatches,
          // === 月曆/週曆輔助 ===
           daysInMonth,firstWeekday,isToday,monthGrid, weekDays,applyAssignments,hhmm,loadDayDispatches,getDisp,loadWeekDispatches,linesFor,
          // === 工具方法 ===
      getDriverName, prev, next, exportCSV 
    };

      }
    }).mount('#app');
</script>
