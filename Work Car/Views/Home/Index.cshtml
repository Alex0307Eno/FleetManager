@* Index.cshtml *@
<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta http-equiv="Content-Security-Policy"
          content="
        default-src 'self';
        frame-src 'self' https://www.google.com https://www.google.com.tw https://maps.google.com https://www.google.com/maps;
        img-src 'self' data: https://*.google.com https://*.ggpht.com https://*.googleapis.com;
        script-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.google.com https://*.gstatic.com;
        style-src 'self' 'unsafe-inline' https://*.googleapis.com;
        connect-src 'self' http://localhost:59899 ws://localhost:59899 https://localhost:44347 wss://localhost:44347;
      ">

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>公務車派車系統</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

    <style>
        :root {
            --bg: #f7f8fa;
            --card: #fff;
            --border: #e5e7eb;
            --text: #111827;
            --muted: #6b7280;
            --chip: #eef2f7;
            --primary: #1e6fb8;
            --shadow: 0 1px 3px rgba(16,24,40,.08);
        }

        * {
            box-sizing: border-box
        }

        html, body {
            height: 100%
        }

        body {
            margin: 0;
            font-family: "Noto Sans TC","PingFang TC","Microsoft JhengHei",system-ui,Arial,sans-serif;
            background: var(--bg);
            color: var(--text)
        }

        .wrap {
            max-width: 1200px;
            margin: 24px auto;
            padding: 0 16px
        }

        .grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 16px
        }

        @@media (max-width:1000px) {
            .grid {
                grid-template-columns: 1fr
            }
        }

        .card {
            background: var(--card);
            border: 1px solid var(--border);
            border-radius: 10px;
            box-shadow: var(--shadow)
        }

        .card-hd {
            padding: 12px 16px;
            border-bottom: 1px solid var(--border);
            font-weight: 700;
            display: flex;
            align-items: center;
            justify-content: space-between
        }

        .card-bd {
            padding: 12px 16px
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 6px
        }

        thead th {
            font-weight: 600;
            color: #374151;
            font-size: 14px;
            text-align: left;
            padding: 8px 10px
        }

        tbody tr {
            background: #fff;
            border: 1px solid var(--border)
        }

        tbody td {
            padding: 10px;
            border-top: 1px solid var(--border);
            border-bottom: 1px solid var(--border)
        }

        tbody tr:first-child td {
            border-top-left-radius: 8px;
            border-top-right-radius: 8px
        }

        tbody tr:last-child td {
            border-bottom-left-radius: 8px;
            border-bottom-right-radius: 8px
        }

        .mono {
            font-variant-numeric: tabular-nums
        }

        .actions {
            display: flex;
            gap: 6px;
            justify-content: center
        }

        .btn {
            border: 1px solid var(--border);
            background: #fff;
            border-radius: 8px;
            padding: 4px 8px;
            cursor: pointer
        }

        .btn-yes {
            color: #0f766e;
            border-color: #99f6e4;
            background: #ecfeff
        }

        .btn-no {
            color: #b91c1c;
            border-color: #fecaca;
            background: #fff1f2
        }

        /* 下方大地圖（只在「排班視圖」顯示） */
        .map-card {
            width: 100%;
            height: 400px
        }

        #map {
            width: 100%;
            height: 100%
        }

        .map {
            height: 360px;
            border-top: 1px solid var(--border);
            border-bottom-left-radius: 10px;
            border-bottom-right-radius: 10px;
            background: linear-gradient(0deg,#e5e7eb 1px,transparent 1px),linear-gradient(90deg,#e5e7eb 1px,transparent 1px),#fafafa;
            background-size: 24px 24px,24px 24px;
            position: relative
        }

            .map::after {
                content: "地圖";
                position: absolute;
                right: 12px;
                bottom: 10px;
                color: #9ca3af;
                font-size: 12px
            }

        #debug {
            position: fixed;
            left: 12px;
            right: 12px;
            bottom: 12px;
            max-height: 40vh;
            overflow: auto;
            background: #0b1020;
            color: #d4e2ff;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 6px 18px rgba(0,0,0,.3);
            z-index: 99999;
            font-size: 12px;
            white-space: pre-wrap
        }

        /* 五張地圖格線（我的位置視圖） */
        .map-grid {
            display: grid;
            grid-template-columns: repeat(3,1fr);
            gap: 12px;
            padding: 12px 16px
        }

        @@media (max-width:1024px) {
            .map-grid {
                grid-template-columns: repeat(2,1fr)
            }
        }

        @@media (max-width:640px) {
            .map-grid {
                grid-template-columns: 1fr
            }
        }

        .map-cell {
            position: relative;
            width: 100%;
            height: 260px;
            background: #f3f4f6;
            border-radius: 8px;
            overflow: hidden
        }

        .badge {
            position: absolute;
            left: 8px;
            bottom: 8px;
            background: rgba(0,0,0,.85);
            color: #fff;
            border-radius: 8px;
            padding: 4px 8px;
            font-size: 12px
        }

        .chip {
            font-size: 12px;
            color: #6b7280
        }

        .badge-row {
            position: absolute;
            left: 8px;
            bottom: 8px;
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .badge-dark {
            background: rgba(0,0,0,.85);
            color: #fff;
            border-radius: 8px;
            padding: 4px 8px;
            font-size: 12px
        }

        .badge-pill {
            border-radius: 999px;
            padding: 4px 10px;
            font-size: 12px;
            font-weight: 600
        }

        .badge-on {
            background: #e6fffa;
            color: #0f766e;
            border: 1px solid #99f6e4;
        }

        .badge-idle {
            background: #f3f4f6;
            color: #111827;
            border: 1px solid #e5e7eb;
        }
    </style>

    <!-- Vue / axios -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <!-- 後端注入 Google Maps Embed API 金鑰 -->
    <script>
        window.GOOGLE_MAPS_KEY = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.GoogleMapsKey ?? ""));
    </script>
</head>

<body>
    <main id="dashboard" class="wrap">
        <div class="grid">
            <!-- 左側：會在兩種視圖之間切換 -->
            <section>
                <!-- 視圖 A：排班視圖 -->
                <div v-if="viewMode==='schedule'" class="card">
                    <div class="card-hd">
                        <div>今日排班情形（@DateTime.Now.ToString("yyyy/M/d dddd", new System.Globalization.CultureInfo("zh-TW"))）</div>
                        <div>
                            <button class="btn" @@click="enterMyLocationView">我的位置</button>
                        </div>
                    </div>

                    <div class="card-bd">
                        <table>
                            <thead>
                                <tr>
                                    <th>駕駛人</th>
                                    <th>排班狀態</th>
                                    <th>目前任務</th>
                                    <th>組室</th>
                                    <th>申請人</th>
                                    <th>人數</th>
                                    <th>累計行駛里程</th>
                                    <th>目前位置</th>
                                    <th>車輛</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="s in schedules" :key="s.key">
                                    <td>{{ s.driverName || '-' }}</td>
                                    <td>{{ s.hasDispatch ? '已派工' : '待派車' }}</td>
                                    <td>{{ s.route || '無任務' }}</td>
                                    <td>{{ s.applicantDept || '-' }}</td>
                                    <td>{{ s.applicantName || '-' }}</td>
                                    <td>{{ s.passengerCount ?? '-' }}</td>
                                    <td>{{ (s.tripDistance || '').toString().replace('公里','') || '-' }}</td>
                                    <td>
                                        <button type="button" class="btn" style="padding:2px 6px" title="查看即時定位" @@click.stop.prevent="openMap(s)">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 384 512" aria-hidden="true">
                                                <path fill="red" d="M192 0C86 0 0 86 0 192c0 96 144 320 192 320s192-224 192-320C384 86 298 0 192 0z" />
                                                <circle cx="192" cy="192" r="48" fill="black" />
                                            </svg>
                                        </button>
                                    </td>
                                    <td>{{ s.plateNo ? s.plateNo.replace(/\D/g, '') : '-' }}</td>
                                </tr>
                                <tr v-if="!schedules.length">
                                    <td colspan="9" style="text-align:center;color:#999;padding:8px">今天沒有排班資料</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- 左下角的大地圖（原樣保留在排班視圖） -->
                    <div class="map-card">
                        <div id="map" class="map"></div>
                    </div>
                </div>

                <!-- 視圖 B：我的位置（覆蓋左側整塊，顯示五張地圖） -->
                <div v-else class="card">
                    <div class="card-hd">
                        <div>目前各車輛位置</div>
                        <div style="display:flex;gap:8px;align-items:center">
                            <span class="chip">
                                金鑰：{{ hasMapsKey ? '已設定' : '未設定' }} ｜
                                <span v-if="locating">定位中…</span><span v-else>定位完成或使用備援中心</span> ｜
                                lat: {{ myLoc?.lat ?? '—' }}, lng: {{ myLoc?.lng ?? '—' }}
                            </span>
                            <button class="btn" @@click="exitMyLocationView">返回</button>
                        </div>
                    </div>

                    <div v-if="locError" class="card-bd" style="color:#b91c1c;">⚠️ {{ locError }}</div>

                    <div class="map-grid" v-if="myMapUrls.length">
                        <div v-for="card in driverCards" :key="card.key" class="map-cell">
                            <iframe v-for="(url, i) in myMapUrls"
                                    :key="'me_'+i"
                                    :src="url"
                                    style="width:100%; height:100%; border:0"
                                    loading="lazy"
                                    allowfullscreen
                                    referrerpolicy="no-referrer-when-downgrade">
                            </iframe>
                            <div class="badge-row">
                                <div class="badge-dark">{{ card.plate }} {{ card.driver }}</div>
                                <div class="badge-pill" :class="card.statusType === 'on' ? 'badge-on' : 'badge-idle'">
                                    {{ card.statusText }}
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card-bd" v-else>
                        <div style="color:#b91c1c;">尚未取得定位或金鑰未設定</div>
                    </div>
                </div>
            </section>

            <!-- 右側資訊 -->
            <aside class="stack">
                <div class="card">
                    <div class="card-hd">今日未完成任務</div>
                    <div class="card-bd">
                        <div v-for="u in unfinished" :key="u.driverName + '_' + u.useTime + '_' + u.route"
                             class="list-row"
                             style="display:flex;justify-content:space-between;border:1px solid var(--border);border-radius:8px;padding:8px 10px;background:#fff;margin-bottom:8px;">
                            <span>{{ u.driverName }}：{{ u.route }}</span>
                            <span class="mono">{{ u.useTime }}</span>
                        </div>
                        <div v-if="unfinished.length === 0" style="color:#999">目前沒有未完成任務</div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-hd">今日待審核派車申請</div>
                    <div class="card-bd">
                        <table style="border-collapse:collapse;width:100%">
                            <thead>
                                <tr style="color:#374151;font-size:14px">
                                    <th style="text-align:left;padding:6px 8px">申請人</th>
                                    <th style="text-align:left;padding:6px 8px">派車時間</th>
                                    <th style="text-align:left;padding:6px 8px">派車地點</th>
                                    <th style="text-align:center;padding:6px 8px">審核</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="p in pending" :key="p.applicantName + '_' + p.useTime" style="background:#fff;border-top:1px solid var(--border)">
                                    <td style="padding:8px 8px">{{ p.applicantName }}</td>
                                    <td style="padding:8px 8px" class="mono">{{ p.useTime }}</td>
                                    <td style="padding:8px 8px">{{ p.route }}</td>
                                    <td style="padding:8px 8px" class="actions">
                                        <button class="btn btn-yes" @@click="approve(p)">✓</button>
                                        <button class="btn btn-no" @@click="reject(p)">✕</button>
                                    </td>
                                </tr>
                                <tr v-if="pending.length === 0">
                                    <td colspan="4" style="text-align:center;color:#999;padding:10px">沒有待審核申請</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </aside>
        </div>
    </main>

<pre id="debug">🟦 Debug console ready…</pre>

    <!-- Debug console mirror -->
    <script>
        (function(){
          const dbg=document.getElementById('debug');
          function toText(v){ try{ return typeof v==='string'? v: JSON.stringify(v,null,2);}catch{return String(v)} }
          function write(prefix,args,pipe){ dbg.textContent += prefix+' '+Array.from(args).map(toText).join(' ')+'\n'; dbg.scrollTop=dbg.scrollHeight; try{pipe.apply(console,args);}catch{} }
          const _log=console.log,_err=console.error,_warn=console.warn;
          console.log=function(){write('🟢',arguments,_log)}; console.warn=function(){write('🟡',arguments,_warn)}; console.error=function(){write('🔴',arguments,_err)};
          window.addEventListener('error', e=>console.error('window.error:', e.message, e.error));
          window.addEventListener('unhandledrejection', e=>console.error('unhandledrejection:', e.reason));
        })();
    </script>

    <!-- Vue App -->
    <script>
        window.addEventListener('DOMContentLoaded', () => {
          if (!window.Vue) { console.error('❌ Vue 還沒載到'); return; }
          const { createApp, ref, onMounted, computed, nextTick } = window.Vue;

          createApp({
            setup(){
              // ====== 視圖切換 ======
              const viewMode = ref('schedule'); // 'schedule' | 'mypos'

              // ====== 列表資料 ======
              const schedules  = ref([]);
              const unfinished = ref([]);
              const pending    = ref([]);

              // ====== 工具 ======
              const hasMapsKey = computed(() => !!(window.GOOGLE_MAPS_KEY && window.GOOGLE_MAPS_KEY.length));
              const toNumOrNull = v => { const n = Number(v); return Number.isFinite(n) ? n : null; };
              const validLatLng = (lat,lng)=> Number.isFinite(lat)&&Number.isFinite(lng) && lat>=-90 && lat<=90 && lng>=-180 && lng<=180 && !(lat===0 && lng===0);

              // ====== 單一駕駛：點表格的針就開新分頁 ======
              const mapLoading = ref(false);
              const mapError   = ref("");
              const currentDriver = ref(null);

              const mapSrc = computed(() => {
                mapError.value = "";
                const d = currentDriver.value;
                if (!d || !hasMapsKey.value) return "";
                const lat = toNumOrNull(d.lat), lng = toNumOrNull(d.lng);
                if (validLatLng(lat,lng)) {
                  const center = `${lat.toFixed(6)},${lng.toFixed(6)}`;
                  return `https://www.google.com/maps/embed/v1/view?key=${window.GOOGLE_MAPS_KEY}&center=${center}&zoom=16&maptype=roadmap`;
                }
                const q = (d.location || d.route || d.applicantDept || d.applicantName || "").trim();
                return q ? `https://www.google.com/maps/embed/v1/place?key=${window.GOOGLE_MAPS_KEY}&q=${encodeURIComponent(q)}` : "";
              });

              function onMapLoaded(){ mapLoading.value = false; }
              function openMap(driver){
                currentDriver.value = { ...driver, lat: toNumOrNull(driver.lat), lng: toNumOrNull(driver.lng) };
                const url = mapSrc.value;
                if (!url) { mapError.value = hasMapsKey.value ? "無定位資訊" : "金鑰未設定"; return; }
                window.open(url, '_blank', 'noopener');
              }

              // ====== 我的位置（五張地圖） ======
              const FALLBACK_CENTER = { lat: 25.033964, lng: 121.564468 }; // 台北101
              const myLoc     = ref({ lat:null, lng:null, ts:null });
              const locating  = ref(false);
              const locError  = ref("");

              const myMapUrl = computed(() => {
                if (!hasMapsKey.value) return "";
                const lat = toNumOrNull(myLoc.value.lat);
                const lng = toNumOrNull(myLoc.value.lng);
                const hasValid = validLatLng(lat, lng);
                const center = hasValid ? `${lat.toFixed(6)},${lng.toFixed(6)}` : `${FALLBACK_CENTER.lat},${FALLBACK_CENTER.lng}`;
                return `https://www.google.com/maps/embed/v1/view?key=${window.GOOGLE_MAPS_KEY}&center=${center}&zoom=16&maptype=roadmap`;
              });

              // 產生五張（相同 URL）以你的定位為中心
              const myMapUrls = computed(() => myMapUrl.value ? Array(5).fill(myMapUrl.value) : []);

              // ★ 這裡是關鍵：把每張卡片需要的資訊（車牌／駕駛／狀態）包起來
              const driverCards = computed(() => {
                const src = myMapUrl.value || "";
                // 取 schedules 前 5 筆；之後要換成各車座標只要把 url 換掉即可
                const base = (schedules.value || []).slice(0, 5).map(d => ({
                  key: d.key,
                  plate: (d.plateNo || '').trim() || '—',
                  driver: (d.driverName || '').trim() || '—',
                  statusText: d.hasDispatch ? '執勤中' : '待機中',
                  statusType: d.hasDispatch ? 'on' : 'idle',
                  url: src
                }));
                // 不足五張補位
                while (base.length < 5) {
                  base.push({
                    key: 'placeholder_' + base.length,
                    plate: '—', driver: '—',
                    statusText: '待機中', statusType: 'idle',
                    url: src
                  });
                }
                return base;
              });

              function getMyLocation(){
                locating.value = true;
                locError.value = "";
                return new Promise((resolve,reject)=>{
                  if (!navigator.geolocation) {
                    locError.value = "此瀏覽器不支援定位 (Geolocation)";
                    locating.value = false;
                    return reject(new Error(locError.value));
                  }
                  navigator.geolocation.getCurrentPosition(
                    pos => {
                      myLoc.value = { lat:Number(pos.coords.latitude), lng:Number(pos.coords.longitude), ts:Date.now() };
                      try { localStorage.setItem('lastMyLoc', JSON.stringify(myLoc.value)); } catch {}
                      locating.value = false;
                      console.log('📍 myLoc 更新：', myLoc.value);
                      resolve();
                    },
                    err => {
                      locating.value = false;
                      locError.value = `定位失敗：${err.message}（請確認 HTTPS/localhost，且已允許定位權限）`;
                      console.warn('定位失敗，改用備援中心點顯示地圖');
                      reject(err);
                    },
                    { enableHighAccuracy:true, timeout:15000, maximumAge:30000 }
                  );
                });
              }

              async function enterMyLocationView(){
                viewMode.value = 'mypos';

                // 先帶上次成功定位（讓畫面立刻有圖）
                try {
                  const saved = JSON.parse(localStorage.getItem('lastMyLoc') || 'null');
                  if (saved && typeof saved.lat === 'number' && typeof saved.lng === 'number') {
                    myLoc.value = saved;
                  }
                } catch {}

                try { await getMyLocation(); } catch(e) {}
                nextTick(() => console.log('🗺 myMapUrl:', myMapUrl.value));
              }

              function exitMyLocationView(){ viewMode.value = 'schedule'; }

              // ====== 資料載入 ======
              async function get(url){ const res = await axios.get(url); return res.data; }
              async function loadAll(){
                try{
                  const [s,u,p] = await Promise.all([
                    get('/api/dashboard/schedule/today'),
                    get('/api/dashboard/dispatch/uncomplete'),
                    get('/api/dashboard/applications/pending')
                  ]);
                  const norm = (list)=> (list||[]).map(x=>({
                    key: `${x.scheduleId ?? (x.driverId ?? 'X')}_${x.shift ?? ''}`,
                    driverName: x.driverName ?? '-',
                    hasDispatch: !!x.hasDispatch,
                    status: x.hasDispatch ? '已派工' : '待派車',
                    route: x.route ?? (x.hasDispatch ? '已派工(無路線)' : '無任務'),
                    applicantDept: x.applicantDept ?? '-',
                    applicantName: x.applicantName ?? '-',
                    passengerCount: x.passengerCount ?? '-',
                    tripDistance: x.tripDistance?.toString()?.replace('公里','') ?? '-',
                    lat: toNumOrNull(x.lat), lng: toNumOrNull(x.lng),
                    location: (x.location ?? '').trim(),
                    plateNo: x.plateNo ?? '-',
                    startTime: x.startTime, endTime: x.endTime,
                    updatedAt: x.updatedAt
                  }));
                  schedules.value  = norm(s);
                  unfinished.value = u || [];
                  pending.value    = p || [];
                }catch(err){ console.error('載入失敗：', err); }
              }

              function approve(item){ console.log('審核通過(示意)：', item); }
              function reject(item){ console.log('駁回(示意)：', item); }

              onMounted(loadAll);

              return {
                // 視圖
                viewMode, enterMyLocationView, exitMyLocationView,
                // 列表/審核
                schedules, unfinished, pending, approve, reject,
                // 單一駕駛（開新分頁）
                openMap, mapLoading, mapError, onMapLoaded,
                // 我的定位（五張）
                hasMapsKey, myLoc, myMapUrls, locating, locError,
                // 地圖卡片（車牌／駕駛／狀態）
                driverCards
              };
            }
          }).mount('#dashboard');
        });
    </script>
   

</body>
</html>
