@* Index.cshtml *@
<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>公務車派車系統</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

    <style>
        :root {
            --bg: #f7f8fa;
            --card: #fff;
            --border: #e5e7eb;
            --text: #111827;
            --muted: #6b7280;
            --chip: #eef2f7;
            --primary: #1e6fb8;
            --shadow: 0 1px 3px rgba(16,24,40,.08);
        }

        * {
            box-sizing: border-box;
        }

        html, body {
            height: 100%;
        }

        body {
            margin: 0;
            font-family: "Noto Sans TC","PingFang TC","Microsoft JhengHei",system-ui,Arial,sans-serif;
            background: var(--bg);
            color: var(--text);
        }

        .wrap {
            max-width: 1200px;
            margin: 24px auto;
            padding: 0 16px;
        }

        .grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 16px;
            align-items: stretch;
        }
            /* 讓 section / aside 裡的 card 能夠等高 */
            .grid > section,
            .grid > aside {
                display: flex;
                flex-direction: column;
            }

                .grid > section .card,
                .grid > aside .card {
                    flex: 1; /* 填滿父層，保持等高 */
                    display: flex;
                    flex-direction: column;
                }
        @@media (max-width:1000px) {
            .grid

        {
            grid-template-columns: 1fr;
        }

        }

        .card {
            background: var(--card);
            border: 1px solid var(--border);
            border-radius: 10px;
            box-shadow: var(--shadow);
        }

        .card-hd {
            padding: 12px 16px;
            border-bottom: 1px solid var(--border);
            font-weight: 700;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .card-bd {
            padding: 12px 16px;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 6px;
        }

        thead th {
            font-weight: 600;
            color: #374151;
            font-size: 14px;
            text-align: left;
            padding: 8px 10px;
        }

        tbody tr {
            background: #fff;
            border: 1px solid var(--border);
        }

        tbody td {
            padding: 8px 10px;
            border-top: 1px solid var(--border);
            border-bottom: 1px solid var(--border);
        }

        .mono {
            font-variant-numeric: tabular-nums;
        }

        .actions {
            display: flex;
            gap: 6px;
            justify-content: center;
        }

        .btn {
            border: 1px solid var(--border);
            background: #fff;
            border-radius: 8px;
            padding: 4px 8px;
            cursor: pointer;
        }

        .btn-yes {
            color: #0f766e;
            border-color: #99f6e4;
            background: #ecfeff;
        }

        .btn-no {
            color: #b91c1c;
            border-color: #fecaca;
            background: #fff1f2;
        }

       

        #map {
            width: 100%;
            height: 100%;
        }

        .map {
            height: 360px;
            border-top: 1px solid var(--border);
            border-bottom-left-radius: 10px;
            border-bottom-right-radius: 10px;
            background: linear-gradient(0deg,#e5e7eb 1px,transparent 1px),linear-gradient(90deg,#e5e7eb 1px,transparent 1px),#fafafa;
            background-size: 24px 24px,24px 24px;
            position: relative;
        }

            .map::after {
                content: "地圖";
                position: absolute;
                right: 12px;
                bottom: 10px;
                color: #9ca3af;
                font-size: 12px;
            }

        /* 五張地圖排版：上3、下2（永遠五張） */
        .map-grid {
            display: grid;
            grid-template-columns: repeat(3,1fr);
            gap: 12px;
            padding: 12px 16px;
        }

        .map-grid-row2 {
            grid-column: 1 / -1;
            display: grid;
            grid-template-columns: repeat(2,1fr);
            gap: 12px;
        }

        .map-cell {
            position: relative;
            width: 100%;
            height: 260px;
            background: #f3f4f6;
            border-radius: 8px;
            overflow: hidden;
        }

        .gmap {
            width: 100%;
            height: 100%;
        }

            .gmap.idle {
                filter: grayscale(0.35) brightness(0.75) saturate(0.7);
                transition: filter .2s ease;
            }

        .badge-row {
            position: absolute;
            left: 8px;
            bottom: 8px;
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .badge-dark {
            background: rgba(0,0,0,.85);
            color: #fff;
            border-radius: 8px;
            padding: 4px 8px;
            font-size: 12px;
        }

        .badge-pill {
            border-radius: 999px;
            padding: 4px 10px;
            font-size: 12px;
            font-weight: 600;
        }

        .badge-on {
            background: #e6fffa;
            color: #0f766e;
            border: 1px solid #99f6e4;
        }

        .badge-idle {
            background: #f3f4f6;
            color: #111827;
            border: 1px solid #e5e7eb;
        }

        .chip {
            font-size: 12px;
            color: #6b7280;
        }

        /* 排班狀態膠囊 */
        .pill {
            display: inline-block;
            padding: 2px 10px;
            border-radius: 999px;
            font-size: 12px;
            border: 1px solid #e5e7eb;
            line-height: 20px;
        }

            .pill.am {
                background: #dbeafe;
                border-color: #93c5fd;
                color: #1e40af;
            }

            .pill.pm {
                background: #dcfce7;
                border-color: #86efac;
                color: #166534;
            }

            .pill.general {
                background: #fee2e2;
                border-color: #fecaca;
                color: #b91c1c;
            }

        /* Debug 面板 */
        #debug {
            position: fixed;
            left: 12px;
            right: 12px;
            bottom: 12px;
            max-height: 40vh;
            overflow: auto;
            background: #0b1020;
            color: #d4e2ff;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 6px 18px rgba(0,0,0,.3);
            z-index: 99999;
            font-size: 12px;
            white-space: pre-wrap;
        }
        /* === 駕駛目前狀態（左下角卡片） === */
        .table-compact thead th,
        .table-compact td {
            padding: 10px 12px;
        }

        .status-dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 6px;
            vertical-align: 1px;
        }

        .status-busy {
            background: #ef4444;
        }
        /* 執勤中：紅 */
        .status-idle {
            background: #22c55e;
        }
        /* 待命中：綠 */
        .status-off {
            background: #94a3b8;
        }
        /* 休息/請假：灰 */
        /* --- 駕駛目前狀態（左下角）專用 --- */
        .no-pad {
            padding: 0;
        }

        .table-flat {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

            .table-flat thead th {
                text-align: left;
                padding: 10px 12px;
                font-size: 14px;
                color: #374151;
                background: #f3f6ff;
                border-bottom: 1px solid var(--border);
            }

            .table-flat tbody td {
                padding: 10px 12px;
                font-size: 14px;
                border-bottom: 1px solid var(--border);
                vertical-align: middle;
            }

            .table-flat tbody tr:nth-child(2n) {
                background: #fff7ed1a; /* 很淡的條紋 */
            }

        /* 小圓點（狀態） */
        .status-dot {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 6px;
            vertical-align: middle;
        }

        .status-red {
            background: #ef4444;
        }
        /* 執勤中 */
        .status-green {
            background: #10b981;
        }
        /* 待命中 */
        .status-gray {
            background: #94a3b8;
        }
        /* 休息/請假 */
        .status-orange {
            background: #f59e0b;
        }
        /* 其他 */

        /* 值班膠囊色已在頁面中，如需補上： */
        .pill {
            display: inline-block;
            padding: 2px 10px;
            border-radius: 999px;
            font-size: 12px;
            border: 1px solid #e5e7eb;
            line-height: 20px;
        }

            .pill.am {
                background: #dbeafe;
                border-color: #93c5fd;
                color: #1e40af;
            }
            /* 早‧午 */
            .pill.pm {
                background: #dcfce7;
                border-color: #86efac;
                color: #166534;
            }
            /* 午‧晚 */
            .pill.general {
                background: #f3f4f6;
                border-color: #d1d5db;
                color: #374151;
            }
        /* 全欄位不換行 + 超出省略 */
        table th, table td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        /* 只有路線可換行 */
        td.col-route {
            white-space: normal;
            overflow: visible;
            text-overflow: clip;
        }

    </style>

    <!-- Vue / axios -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <!-- 後端注入 Google Maps API 金鑰 -->
    <script>
        window.GOOGLE_MAPS_KEY = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.GoogleMapsKey ?? ""));
    </script>
</head>

<body>
    <main id="dashboard" class="wrap" v-clock>
        <div class="grid">
            <!-- 左側：兩種視圖切換 -->
            <section>
                <!-- A. 排班視圖 -->
                <div v-if="viewMode==='schedule'" class="card">
                    <div class="card-hd" style="display:flex; justify-content:space-between; align-items:center;">
                        <!-- 左邊固定 -->
                        <div>今日排班情形</div>

                        <!-- 右邊日期 + 時間 -->
                        <div id="dateTime"></div>
                    </div>

                    <div class="card-bd">
                        <table>
                            <thead>
                                <tr>
                                    <th>駕駛人</th>
                                    <th>排班狀態</th>
                                    <th>目前任務</th>
                                    <th>組室</th>
                                    <th>申請人</th>
                                    <th>人數</th>
                                    <th>累計行駛里程</th>
                                    <th>目前位置</th>
                                    <th>車輛</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="(s, idx) in scheduleTable" :key="s.key">
                                    <td>{{ s.driverName || '-' }}</td>
                                    <td><span class="pill" :class="s.shiftClass">{{ s.shiftLabel }}</span></td>
                                    <td class="col-route">{{ s.arrivalDisplay || '無任務' }}</td>
                                    <td>{{ s.applicantDept }}</td>
                                    <td>{{ s.applicantName || '-' }}</td>
                                    <td>{{ s.passengerCount ?? '-' }}</td>
                                    <td>{{ s.tripDistance ?? '-' }}</td>
                                    <td>
                                        <button class="btn" style="padding:2px 6px" title="查看即時定位" @@click.stop.prevent="openMap(s)">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 384 512" aria-hidden="true">
                                                <path fill="red" d="M192 0C86 0 0 86 0 192c0 96 144 320 192 320s192-224 192-320C384 86 298 0 192 0z" />
                                                <circle cx="192" cy="192" r="48" fill="black" />
                                            </svg>
                                        </button>
                                    </td>
                                    <td>{{ s.plateNo ? s.plateNo.replace(/\D/g, '') : '-' }}</td>
                                </tr>
                               
                                <tr v-if="!schedules.length">
                                    <td colspan="9" style="text-align:center;color:#999;padding:8px">今天沒有排班資料</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- 左下角：駕駛目前狀態 -->
                    <div class="card" style="margin-top:12px;">
                        <div class="card-hd" style="display:flex;align-items:center;justify-content:space-between;">
                            <div>駕駛目前狀態</div>
                            <button class="btn" style="background:#ffb020;border-color:#ffb020;color:#111827;font-weight:700"
                                    @@click="enterMyLocationView">
                                車輛現況
                            </button>
                        </div>
                        <div class="card-bd no-pad">
                            <table class="table-flat">
                                <thead>
                                    <tr>
                                        <th style="width:60px;">順序</th>
                                        <th style="width:120px;">駕駛員</th>
                                        <th style="width:110px;">今日值班</th>
                                        <th style="width:160px;">目前狀態</th>
                                        <th>當前任務</th>
                                        <th style="width:120px;">預計回來時間</th>
                                        <th style="width:150px;">最早可出車時間</th>
                                        <th style="width:100px;">出勤狀況</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="(d,idx) in driverStatus" :key="d.key">
                                        <td class="mono">{{ idx+1 }}</td>
                                        <td>{{ d.driverName }}</td>
                                        <td><span class="pill" :class="d.shiftClass">{{ d.shiftLabel }}</span></td>
                                        <td>
                                            <span class="status-dot" :class="d.stateDotClass"></span>
                                            {{ d.stateText }}
                                            <span v-if="d.note" style="color:#9ca3af;">（{{ d.note }}）</span>
                                        </td>
                                        <td class="mono">{{ d.taskWindow || '無' }}</td>
                                        <td class="mono">{{ d.etaBack || '-' }}</td>
                                        <td class="mono">{{ d.earliestOut || (d.stateText==='待命中' ? '即時可用' : '-') }}</td>
                                        <td>{{ d.attendance }}</td>
                                    </tr>
                                    <tr v-if="driverStatus.length===0">
                                        <td colspan="8" style="text-align:center;color:#94a3b8;padding:16px;">目前沒有資料</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>


                </div>

                <!-- B. 駕駛位置（五張地圖：上3下2、含車子 Marker） -->
                <div v-else class="card">
                    <div class="card-hd">
                        <div>目前各車輛位置</div>
                        <div style="display:flex;gap:8px;align-items:center">
                            
                            <button class="btn" @@click="exitMyLocationView">返回</button>
                        </div>
                    </div>

                    <div v-if="locError" class="card-bd" style="color:#b91c1c;">⚠️ {{ locError }}</div>

                    <!-- 上排 3 張 -->
                    <div class="map-grid">
                        <div v-for="(card, idx) in driverCards.slice(0,3)" :key="card.key" class="map-cell">
                            <div class="gmap" :id="'gmap_'+idx"></div>
                            <div class="badge-row">
                                <div class="badge-dark">{{ card.plate }} <br>{{ card.driver }}</div>
                                <div class="badge-pill" :class="card.statusType === 'on' ? 'badge-on' : 'badge-idle'">{{ card.statusText }}</div>
                            </div>
                        </div>

                        <!-- 下排 2 張 -->
                        <div class="map-grid-row2">
                            <div v-for="(card, i) in driverCards.slice(3,5)" :key="card.key" class="map-cell">
                                <div class="gmap" :id="'gmap_'+(i+3)"></div>
                                <div class="badge-row">
                                    <div class="badge-dark">{{ card.plate }}<br> {{ card.driver }}</div>
                                    <div class="badge-pill" :class="card.statusType === 'on' ? 'badge-on' : 'badge-idle'">{{ card.statusText }}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- 右側資訊 -->
            <aside class="stack">
                <div class="card">
                    <div class="card-hd">今日未完成任務</div>
                    <table style="width:100%;border-collapse:collapse;">
                        <thead>
                            <tr>
                                <th style="text-align:left;padding:6px 10px;border-bottom:1px solid var(--border);">駕駛人</th>
                                <th style="text-align:left;padding:6px 10px;border-bottom:1px solid var(--border);">待辦任務</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="u in unfinished" :key="u.driverName + '_' + u.useTime">
                                <td style="padding:8px 10px">{{ u.driverName }}</td>
                                <td style="padding:8px 10px" class="mono">
                                    {{ (u.useTime || '').split('-')[1] || u.useTime }} {{ (u.route || '').split('-').slice(-1)[0] }}
                                </td>
                            </tr>
                            <tr v-if="unfinished.length === 0">
                                <td colspan="2" style="text-align:center;color:#999;padding:10px">目前沒有未完成任務</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="card">
                    <div class="card-hd">今日待審核派車申請</div>
                    <div class="card-bd">
                        <table style="border-collapse:collapse;width:100%">
                            <thead>
                                <tr style="color:#374151;font-size:14px">
                                    <th style="text-align:left;padding:6px 8px">申請人</th>
                                    <th style="text-align:left;padding:6px 8px">派車時間</th>
                                    <th style="text-align:left;padding:6px 8px">派車地點</th>
                                    <th style="text-align:center;padding:6px 8px">審核</th>
                                </tr>
                            </thead>
                            <tbody>
                                
                                <tr v-for="p in pendingFiltered" :key="(p.applicantName || '-') + '_' + (p.useTime || '-')">
                                    <td style="padding:8px 8px">{{ p.applicantName }}</td>
                                    <td style="padding:8px 8px" class="mono">{{ (p.useTime || '').split('-')[1] || p.useTime }}</td>
                                    <td style="padding:8px 8px">{{ (p.route || '').split('-').slice(-1)[0] }}</td>
                                    <td style="padding:8px 8px" class="actions">
                                        <button class="btn btn-yes" @@click="approve(p)">✓</button>
                                        <button class="btn btn-no" @@click="reject(p)">✕</button>
                                    </td>
                                </tr>
                                <tr v-if="pending.length === 0">
                                    <td colspan="4" style="text-align:center;color:#999;padding:10px">沒有待審核申請</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </aside>
        </div>
        <div id="loading-overlay">
            <div class="spinner"></div>
        </div>
    </main>

    @* <pre id="debug">🟦 Debug console ready…</pre> *@

    <!-- 把 console 也寫到頁面下方 -->
    @* <script>
        (function () {
          const dbg = document.getElementById('debug');
          function toText(v){ try{ return typeof v==='string'? v: JSON.stringify(v,null,2);}catch{return String(v)} }
          function write(prefix, args, pipe){ dbg.textContent += prefix+' '+Array.from(args).map(toText).join(' ')+'\n'; dbg.scrollTop = dbg.scrollHeight; try{pipe.apply(console,args);}catch{} }
          const _log=console.log,_err=console.error,_warn=console.warn;
          console.log=function(){write('🟢',arguments,_log)}; console.warn=function(){write('🟡',arguments,_warn)}; console.error=function(){write('🔴',arguments,_err)};
          window.addEventListener('error', e=>console.error('window.error:', e.message, e.error));
          window.addEventListener('unhandledrejection', e=>console.error('unhandledrejection:', e.reason));
        })();
    </script> *@

    <!-- Vue App -->
    <script>
            function updateDateTime() {
            var now = new Date();

            // 日期 + 星期
            var options = { weekday: 'long' };
            var dateStr = now.getFullYear() + "/" +
                          (now.getMonth() + 1) + "/" +
                          now.getDate() + " " +
                          now.toLocaleDateString("zh-TW", options);

            // 時間 (時:分:秒)
            var timeStr = now.toLocaleTimeString("zh-TW");

            // 更新右邊區塊
        const el = document.getElementById("dateTime");
        if (el) {
          el.textContent = dateStr + " " + timeStr;
        }
                }

        updateDateTime();           // 載入時執行一次
        setInterval(updateDateTime, 1000); // 每秒更新
        window.addEventListener('DOMContentLoaded', () => {
          if (!window.Vue) { console.error('❌ Vue 還沒載到'); return; }
          const { createApp, ref, onMounted, computed, nextTick, watch } = window.Vue;
                  function initMap() {
          console.log("✅ Google Maps API 載入完成，可以開始初始化地圖");
          if (window.renderMyMaps) {
            window.renderMyMaps();
          }
        }
                window.addEventListener("load", ()=>{
          document.getElementById("loading-overlay").style.display="none";
        });
          createApp({
            setup(){
              // ===== 視圖切換 =====
              const viewMode   = ref('schedule');   // 'schedule' | 'mypos'

              // ===== 列表資料 =====
              const schedules  = ref([]);
              const unfinished = ref([]);
              const pending    = ref([]);
              const rows       = ref([]);
              const pendingFiltered = computed(() => {
              const isDoneOrRejected = (s) => {
                const k = String(s || "").trim().toLowerCase();
                // 同時支援中/英/多餘空白
                return k === "完成審核" || k === "駁回" || k === "approved" || k === "rejected";
              };
              return (pending.value || []).filter(x => !isDoneOrRejected(x.status));
            });
              

              // ===== 工具 =====
              const hasMapsKey = computed(() => !!(window.GOOGLE_MAPS_KEY && window.GOOGLE_MAPS_KEY.length));
              const toNumOrNull = v => { const n = Number(v); return Number.isFinite(n) ? n : null; };
              const validLatLng = (lat,lng)=> Number.isFinite(lat)&&Number.isFinite(lng) && lat>=-90 && lat<=90 && lng>=-180 && lng<=180 && !(lat===0 && lng===0);

              const pad = n => n.toString().padStart(2,'0');
              const fmtHHmm = (d) => { if (!d) return ''; const dt = (d instanceof Date) ? d : new Date(d); if (isNaN(dt)) return ''; return `${pad(dt.getHours())}:${pad(dt.getMinutes())}`; };
              const tailDestFromRoute = (route) => { if (!route) return ''; const parts = String(route).split('-').map(s=>s.trim()).filter(Boolean); return parts.length ? parts[parts.length-1] : ''; };

              // ===== 單一駕駛定位：開新分頁 Google Maps（簡單做法） =====
              function openMap(driver){
                const lat = toNumOrNull(driver.lat), lng = toNumOrNull(driver.lng);
                if (validLatLng(lat,lng)) {
                  window.open(`https://www.google.com/maps?q=${lat},${lng}`, '_blank', 'noopener');
                } else {
                  const q = (driver.location || driver.route || driver.applicantDept || driver.applicantName || '').trim();
                  if (q) window.open(`https://www.google.com/maps?q=${encodeURIComponent(q)}`, '_blank', 'noopener');
                  else console.warn('無定位資訊');
                }
              }
                        // ===== 今日排班行程表（司機可重複出現，依時間排序） =====
                 const scheduleTable = computed(() => {
                   return (schedules.value || [])
                     .slice() // 複製一份，避免影響原始資料
                     .sort((a, b) => {
                       const ta = a.startTime ? new Date(a.startTime).getTime() : 0;
                       const tb = b.startTime ? new Date(b.startTime).getTime() : 0;
                       return ta - tb; // 依照開始時間由早到晚排序
                     });
                 });

              // ===== 我的定位（五張地圖） =====
              const FALLBACK_CENTER = { lat: 25.033964, lng: 121.564468 }; // 台北101
              const myLoc     = ref({ lat:null, lng:null, ts:null });
              const locating  = ref(false);
              const locError  = ref("");

              function getMyLocation(){
                locating.value = true;
                locError.value = "";
                return new Promise((resolve,reject)=>{
                  if (!navigator.geolocation) {
                    locError.value = "此瀏覽器不支援定位 (Geolocation)";
                    locating.value = false;
                    return reject(new Error(locError.value));
                  }
                  navigator.geolocation.getCurrentPosition(
                    pos => {
                      myLoc.value = { lat:Number(pos.coords.latitude), lng:Number(pos.coords.longitude), ts:Date.now() };
                      try { localStorage.setItem('lastMyLoc', JSON.stringify(myLoc.value)); } catch {}
                      locating.value = false;
                      console.log('📍 myLoc 更新：', myLoc.value);
                      resolve();
                    },
                    err => {
                      locating.value = false;
                      locError.value = `定位失敗：${err.message}（請確認 HTTPS/localhost，且已允許定位權限）`;
                      console.warn('定位失敗，改用備援中心點顯示地圖');
                      reject(err);
                    },
                    { enableHighAccuracy:true, timeout:15000, maximumAge:30000 }
                  );
                });
              }

              // 地圖 + 車子 marker
              const maps = [];
       
          // 取代舊的 loadGoogleMaps（加入 libraries=marker，供 AdvancedMarkerElement 使用）
          function loadGoogleMaps(){
            return new Promise((resolve, reject) => {
              if (window.google && window.google.maps && google.maps.marker) return resolve();
              if (!window.GOOGLE_MAPS_KEY) return reject(new Error('未設定 Google Maps 金鑰'));
              const s = document.createElement('script');
              // ✅ 拿掉 callback / mapId，只載核心 + marker library
              s.src = `https://maps.googleapis.com/maps/api/js?key=${window.GOOGLE_MAPS_KEY}&v=quarterly&libraries=marker`;
              s.async = true; s.defer = true;
              s.onload = () => resolve();
              s.onerror = () => reject(new Error('載入 Google Maps JS 失敗'));
              document.head.appendChild(s);
            });
          }

          // 統一樣式（你可以自行調整）
          const MAP_STYLES = [
            { featureType: "poi", elementType:"labels", stylers:[{visibility:"off"}] },
            { featureType: "transit", stylers:[{visibility:"off"}] },
            { featureType: "road", elementType:"geometry", stylers:[{lightness:10}] },
            { featureType: "water", stylers:[{saturation:-20}] }
          ];

          // 小汽車圖（橘：執勤中）
          function carSVG(color){
            return `
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="28" height="28">
                <rect x="96" y="200" width="320" height="90" rx="22" ry="22" fill="${color}" />
                <rect x="136" y="160" width="240" height="50" rx="10" ry="10" fill="${color}" />
                <circle cx="186" cy="310" r="22" fill="#1f2937"/>
                <circle cx="326" cy="310" r="22" fill="#1f2937"/>
              </svg>`;
          }

          async function renderMyMaps(){
            try{
              await loadGoogleMaps();
              const myCenter = (typeof myLoc!=='undefined' && myLoc.value && Number.isFinite(+myLoc.value.lat) && Number.isFinite(+myLoc.value.lng))
                ? { lat: +myLoc.value.lat, lng: +myLoc.value.lng }
                : { lat: 25.033964, lng: 121.564468 }; // 台北101

              driverCards.value.forEach((card, i) => {
                const el = document.getElementById('gmap_'+i);
                if (!el) return;

                // 清掉舊內容
                el.replaceChildren();

                // 待機就加暗（.gmap.idle），執勤就移除
                if (card.statusType === 'idle') el.classList.add('idle');
                else el.classList.remove('idle');

                // 座標（沒有就用 myCenter）
                const hasLat = Number.isFinite(+card.lat), hasLng = Number.isFinite(+card.lng);
                const pos = (hasLat && hasLng) ? { lat:+card.lat, lng:+card.lng } : myCenter;

                // ✅ 不用 mapId，改用 styles
                const map = new google.maps.Map(el, {
                  center: pos,
                  zoom: 16,
                  disableDefaultUI: true,
                  mapId:"add29920b46056c38796ff49"
                });

                // 執勤中才顯示橘色小汽車；待機不放 marker
                if (card.statusType === 'on') {
                  const markerEl = document.createElement('div');
                  markerEl.innerHTML = carSVG('#f97316'); // 橘色
                  new google.maps.marker.AdvancedMarkerElement({
                    map, position: pos, content: markerEl
                  });
                }
              });
            }catch(e){
              console.error('renderMyMaps 失敗：', e);
            }
          }



                      window.renderMyMaps = renderMyMaps;

        window.initMap = initMap;
              async function enterMyLocationView(){
                viewMode.value = 'mypos';
                try {
                  const saved = JSON.parse(localStorage.getItem('lastMyLoc') || 'null');
                  if (saved && typeof saved.lat === 'number' && typeof saved.lng === 'number') {
                    myLoc.value = saved;
                  }
                } catch {}
                try { await getMyLocation(); } catch(e) {}
                await nextTick();
                renderMyMaps();
              }
              function exitMyLocationView(){ viewMode.value = 'schedule'; }

              watch(() => myLoc.value, () => { if (viewMode.value === 'mypos') nextTick(renderMyMaps); });
              watch(() => viewMode.value, (m) => { if (m === 'mypos') nextTick(renderMyMaps); });

              // ===== 生成地圖卡片資料（五張） =====
                      const driverCards = computed(() => {
          // 抓我的即時定位
          const myLat = toNumOrNull(myLoc.value?.lat);
          const myLng = toNumOrNull(myLoc.value?.lng);

          const base = (driverStatus.value || []).slice(0, 5).map(d => ({
            key: d.key,
            plate: (d.plateNo || '').trim() || '—',
            driver: (d.driverName || '').trim() || '—',
            statusText: d.stateText,                 // ← 改用 driverStatus 的判斷結果
            statusType: (d.stateText==='執勤中') ? 'on' : 'idle',  // ← 跟 stateText 對應
            // 把地圖座標一律換成我的定位
            lat: validLatLng(myLat, myLng) ? myLat : null,
            lng: validLatLng(myLat, myLng) ? myLng : null
          }));

          while (base.length < 5) {
            base.push({
              key: 'placeholder_' + base.length,
              plate: '—', driver: '—',
              statusText: '待機中', statusType: 'idle',
              lat: validLatLng(myLat, myLng) ? myLat : null,
              lng: validLatLng(myLat, myLng) ? myLng : null
            });
          }

          return base;
        });
                // --- 審核操作（✅/✕） ---
                        const approve = async (p) => {
          if (!confirm(`確定要將申請單 #${p.applyId} 審核通過嗎？`)) return;

          try {
            console.log("🚀 approve", p);
            await axios.patch(`/api/CarApplications/${p.applyId}/status`, {
              status: "完成審核"
            });
            alert("✅ 已成功審核通過");
            p.status = "完成審核";
            pending.value = pending.value.filter(r => r.applyId !== p.applyId);
          } catch (err) {
            console.error("❌ approve error:", err);
            alert("審核失敗");
          }
        };

        const reject = async (p) => {
          if (!confirm(`確定要將申請單 #${p.applyId} 駁回嗎？`)) return;

          try {
            console.log("🚀 reject", p);
            await axios.patch(`/api/CarApplications/${p.applyId}/status`, {
              status: "駁回"
            });
            alert("✅ 已成功駁回");
            p.status = "駁回";
            pending.value = pending.value.filter(r => r.applyId !== p.applyId);
          } catch (err) {
            console.error("❌ reject error:", err);
            alert("駁回失敗");
          }
        };

              // ===== 資料載入 =====
              async function get(url){ const res = await axios.get(url); return res.data; }
              async function loadAll(){
                try{
                  const [s,u,p] = await Promise.all([
                    get('/api/dashboard/schedule/today'),
                    get('/api/dashboard/dispatch/uncomplete'),
                    get('/api/dashboard/applications/pending')
                  ]);
              


                  // 地址對應表（可自行擴充）
                  const addressMap = {
                    '台中市東區復興路四段165巷台中車站後面機車停車場': '農業部',
                    '台中市南屯區文心南路台中文心秀泰影城': '農業部',
                    '台北市信義區信義路': '林業署'
                  };

                  const norm = (list)=> (list||[]).map(x=>{
                    const arrivalTimeRaw = x.arrivalTime ?? x.endTime ?? x.useEnd ?? null;
                    const arrivalPlaceRaw = (x.arrivalPlace ?? x.destination ?? tailDestFromRoute(x.route) ?? x.applicantDept ?? '').toString().trim();
                    const arrivalDisplay = (fmtHHmm(arrivalTimeRaw) && arrivalPlaceRaw)
                      ? `${fmtHHmm(arrivalTimeRaw)} ${arrivalPlaceRaw}` : '';

                    const rawShift = (x.shiftName ?? x.shift ?? '').toString().trim().toUpperCase();
                    const shiftLabel = rawShift==='AM' ? '早午' : rawShift==='PM' ? '午晚' : '一般';
                    const shiftClass = rawShift==='AM' ? 'am' : rawShift==='PM' ? 'pm' : 'general';

                    const deptRaw = (x.applicantDept ?? '').trim();
                    let deptShort = deptRaw;
                    if (deptShort) {
                      const parts = deptShort.split('/');
                      deptShort = parts[parts.length - 1].trim().replace(/科.*$/, '科');
                    }
                    const mappedDept = addressMap[deptShort] || deptShort;

                    return {
                      key: `${x.scheduleId ?? (x.driverId ?? 'X')}_${x.shift ?? ''}`,
                      driverName: x.driverName ?? '-',
                      hasDispatch: !!x.hasDispatch,
                      applicantDept: mappedDept || '-',
                      applicantName: x.applicantName ?? '-',
                      passengerCount: x.passengerCount ?? '-',
                      tripDistance: (x.tripDistance ?? '').toString().replace('公里',''),
                      lat: toNumOrNull(x.lat), lng: toNumOrNull(x.lng),
                      plateNo: x.plateNo ?? '-',
                      startTime: x.startTime, endTime: x.endTime, updatedAt: x.updatedAt,
                      shiftLabel, shiftClass, arrivalDisplay
                    };
                  });
                schedules.value  = norm(s);
                unfinished.value = u || [];

                // 1) 先把各種可能的欄位統一成 .status（處理大小寫與空白）
                                 const cleaned = (p || []).map(x => {
               const rawStatus =
                 (x.status ?? x.Status ?? x.dispatchStatus ?? x.DispatchStatus ?? "")
                   .toString()
                   .trim();
               return {
                 ...x,
                 applyId: x.applyId ?? x.ApplyId ?? null,
                 status: rawStatus
               };
             });
             // 直接放進 pending，畫面用 pendingFiltered 顯示未審核
             pending.value = cleaned;
                      } catch (err) {
            console.error('載入失敗：', err);
          }
        }

              

              // ===== 左下角：駕駛目前狀態（新增） =====
              const addMinutes = (dateLike, mins) => {
                if (!dateLike) return null;
                const d = (dateLike instanceof Date) ? new Date(dateLike) : new Date(dateLike);
                if (isNaN(d)) return null;
                d.setMinutes(d.getMinutes() + (mins||0));
                return d;
              };

                      const scheduleToDriverRow = (x) => {
          // 先安全轉成 Date
          const st = x && x.startTime ? new Date(x.startTime) : null;
          const et = x && x.endTime   ? new Date(x.endTime)   : null;

          const pad = (n) => n.toString().padStart(2,'0');
          const fmtHHmm = (d) => {
            if (!d) return '';
            const dt = (d instanceof Date) ? new Date(d) : new Date(d);
            if (isNaN(dt)) return '';
            return `${pad(dt.getHours())}:${pad(dt.getMinutes())}`;
          };


          // 時間到就不再視為執勤
          const now = new Date();
          const expired = (et instanceof Date) && !isNaN(et) && now >= et;
          const onDuty  = !!x?.hasDispatch && !expired;

          const stateText    = onDuty ? '執勤中' : '待命中';
          const stateDotClass= onDuty ? 'status-red' : 'status-green';

          // 預設（非執勤）→ 全部恢復原狀
          let taskWindow   = '';
          let etaBack      = '';
          let earliestOut  = '即時可用';

          // 只有執勤中才帶入任務視窗/回來時間/最早可出車時間
          if (onDuty) {
            if (st instanceof Date && !isNaN(st) && et instanceof Date && !isNaN(et)) {
              taskWindow = `${fmtHHmm(st)}-${fmtHHmm(et)}`;
              etaBack    = fmtHHmm(et);

              // 你原本邏輯：結束後 15 分鐘才能再出
              const addMinutes = (d, mins) => {
                const t = new Date(d); t.setMinutes(t.getMinutes() + (mins || 0)); return t;
              };
              earliestOut = fmtHHmm(addMinutes(et, 15));
            } else {
              // 有執勤但沒時間資料時，保守顯示
              taskWindow  = '';
              etaBack     = '';
              earliestOut = '-';
            }
          }

          const attendance = x?.leaveNote ? '請假' : '正常';
          const note = x?.leaveNote || '';

          return {
            key: x?.key || `${x?.driverName || 'D'}_${x?.shiftLabel || ''}`,
            driverId: x?.driverId ?? null,
            driverName: x?.driverName ?? '-',
            shiftLabel: x?.shiftLabel || '一般',
            shiftClass: x?.shiftClass || 'general',
            stateText,
            stateDotClass,
            taskWindow,   // ← 當前任務
            etaBack,      // ← 預計回來時間
            earliestOut,  // ← 最早可出車時間
            attendance,
            note
          };
        };


              const driverStatus = computed(()=>{
                const rows = (schedules.value || []).map(scheduleToDriverRow);

                // 同名駕駛只取一筆（執勤中優先）
                const picked = new Map();
                for (const r of rows) {
                  const k = r.driverName || r.key;
                  if (!picked.has(k)) picked.set(k, r);
                  else {
                    const old = picked.get(k);
                    const score = (r.stateText==='執勤中') ? 2 : (r.taskWindow ? 1 : 0);
                    const oldScore = (old.stateText==='執勤中') ? 2 : (old.taskWindow ? 1 : 0);
                    if (score > oldScore) picked.set(k, r);
                  }
                }

                let list = Array.from(picked.values());
                list.sort((a,b)=>{
                  const aw = (a.stateText==='執勤中') ? 0 : 1;
                  const bw = (b.stateText==='執勤中') ? 0 : 1;
                  if (aw !== bw) return aw - bw;
                  return String(a.driverName).localeCompare(String(b.driverName),'zh-Hant');
                });

                while (list.length < 5) {
                  list.push({
                    key: 'placeholder_'+list.length,
                    driverName: '—',
                    shiftLabel: '一般', shiftClass: 'general',
                    stateText: '待命中', stateDotClass:'status-green',
                    taskWindow: '', etaBack:'', earliestOut:'即時可用',
                    attendance: '正常', note:''
                  });
                }
                return list.slice(0,5);
              });


              function openFleetStatus(){
                // 如有專頁可改成實際連結：
                // window.location.href = '/Vehicle/Status';
                console.log('open fleet status');
              }

                      onMounted(() => {
                  loadAll();
                  setInterval(() => {
                    loadAll();  // 每分鐘重抓一次資料，確保狀態更新
                  }, 60 * 1000);
                });


              return {
                // 視圖
                viewMode, enterMyLocationView, exitMyLocationView,fmtHHmm,
                // 列表/審核
                schedules,scheduleTable, unfinished, pending, approve, reject,pendingFiltered,
                // 單一地圖開新頁
                openMap,
                // 我的定位
                hasMapsKey, myLoc, locating, locError,
                // 地圖卡片
                driverCards,
                // 左下角：駕駛狀態（新增）
                driverStatus, openFleetStatus
              };
            }
          }).mount('#dashboard');
        });
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=@(ViewBag.GoogleMapsKey)&v=quarterly&libraries=marker" async defer></script>

</body>
</html>
